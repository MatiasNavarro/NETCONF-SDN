/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp1Table.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>

#include "FTNC-MIB/xfp1Table/xfp1Table_data_access.h"

#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp1Table
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp1Table is subid 3 of mxpMIBObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.3, length: 9
*/

/**
 * initialization for xfp1Table data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param xfp1Table_reg
 *        Pointer to xfp1Table_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int
xfp1Table_init_data(xfp1Table_registration * xfp1Table_reg)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_init_data","called\n"));

    /*
     * TODO:303:o: Initialize xfp1Table data.
     */
    /*
    ***************************************************
    ***             START EXAMPLE CODE              ***
    ***---------------------------------------------***/
    /*
     * if you are the sole writer for the file, you could
     * open it here. However, as stated earlier, we are assuming
     * the worst case, which in this case means that the file is
     * written to by someone else, and might not even exist when
     * we start up. So we can't do anything here.
     */
    /*
    ***---------------------------------------------***
    ***              END  EXAMPLE CODE              ***
    ***************************************************/

    return MFD_SUCCESS;
} /* xfp1Table_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 * @param  cache A pointer to a cache structure. You can set the timeout
 *         and other cache flags using this pointer.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 *  This is also the place to set up cache behavior. The default, to
 *  simply set the cache timeout, will work well with the default
 *  container. If you are using a custom container, you may want to
 *  look at the cache helper documentation to see if there are any
 *  flags you want to set.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void
xfp1Table_container_init(netsnmp_container **container_ptr_ptr,
                             netsnmp_cache *cache)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_container_init","called\n"));
    
    if (NULL == container_ptr_ptr) {
        snmp_log(LOG_ERR,"bad container param to xfp1Table_container_init\n");
        return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    *container_ptr_ptr = NULL;

    if (NULL == cache) {
        snmp_log(LOG_ERR,"bad cache param to xfp1Table_container_init\n");
        return;
    }

    /*
     * TODO:345:A: Set up xfp1Table cache properties.
     *
     * Also for advanced users, you can set parameters for the
     * cache. Do not change the magic pointer, as it is used
     * by the MFD helper. To completely disable caching, set
     * cache->enabled to 0.
     */
    cache->timeout = XFP1TABLE_CACHE_TIMEOUT; /* seconds */
} /* xfp1Table_container_init */

/**
 * container shutdown
 *
 * @param container_ptr A pointer to the container.
 *
 *  This function is called at shutdown to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases.
 *
 *  This function is called before xfp1Table_container_free().
 *
 * @remark
 *  This would also be a good place to do any cleanup needed
 *  for you data source. For example, closing a connection to another
 *  process that supplied the data, closing a database, etc.
 */
void
xfp1Table_container_shutdown(netsnmp_container *container_ptr)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_container_shutdown","called\n"));
    
    if (NULL == container_ptr) {
        snmp_log(LOG_ERR,"bad params to xfp1Table_container_shutdown\n");
        return;
    }

} /* xfp1Table_container_shutdown */

/**
 * load initial data
 *
 * TODO:350:M: Implement xfp1Table data load
 * This function will also be called by the cache helper to load
 * the container again (after the container free function has been
 * called to free the previous contents).
 *
 * @param container container to which items should be inserted
 *
 * @retval MFD_SUCCESS              : success.
 * @retval MFD_RESOURCE_UNAVAILABLE : Can't access data source
 * @retval MFD_ERROR                : other error.
 *
 *  This function is called to load the index(es) (and data, optionally)
 *  for the every row in the data set.
 *
 * @remark
 *  While loading the data, the only important thing is the indexes.
 *  If access to your data is cheap/fast (e.g. you have a pointer to a
 *  structure in memory), it would make sense to update the data here.
 *  If, however, the accessing the data invovles more work (e.g. parsing
 *  some other existing data, or peforming calculations to derive the data),
 *  then you can limit yourself to setting the indexes and saving any
 *  information you will need later. Then use the saved information in
 *  xfp1Table_row_prep() for populating data.
 *
 * @note
 *  If you need consistency between rows (like you want statistics
 *  for each row to be from the same time frame), you should set all
 *  data here.
 *
 */
int
xfp1Table_container_load(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_container_load","called\n"));
    
    xfp1Table_rowreq_ctx *rowreq_ctx;
    size_t count = 0;

    /*
     * temporary storage for index values
     */
        /*
         * xfp1Index(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h
         */
   
    char xfp1Index[32];
    strcpy (xfp1Index, "xfp1Index");
    size_t xfp1Index_len = strlen(xfp1Index);

    shm_handler_create(pt_monitor_struct);

        /*
         * TODO:352:M: |   |-> set indexes in new xfp1Table rowreq context.
         * data context will be set from the param (unless NULL,
         *      in which case a new data context will be allocated)
         */
        rowreq_ctx = xfp1Table_allocate_rowreq_ctx(NULL);
        if (NULL == rowreq_ctx) {
            snmp_log(LOG_ERR, "memory allocation failed\n");
            return MFD_RESOURCE_UNAVAILABLE;
        }
        if(MFD_SUCCESS != xfp1Table_indexes_set(rowreq_ctx
                               , xfp1Index, xfp1Index_len
               )) {
            snmp_log(LOG_ERR,"error setting index while loading "
                     "xfp1Table data.\n");
            xfp1Table_release_rowreq_ctx(rowreq_ctx);
        }

        /*
         * TODO:352:r: |   |-> populate xfp1Table data context.
         * Populate data context here. (optionally, delay until row prep)
         */
    /*
     * TRANSIENT or semi-TRANSIENT data:
     * copy data or save any info needed to do it in row_prep.
     */
    /*
     * setup/save data for xfp1Pres
     * xfp1Pres(2)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1Pres data
     */
    char xfp1Pres[65535];
	strcpy (xfp1Pres, general_status_no_yes[!pt_monitor_struct->xfp_struct.xfp_presence[0]]);
	size_t xfp1Pres_len = strlen(xfp1Pres);

    rowreq_ctx->data.xfp1Pres_len = xfp1Pres_len* sizeof(xfp1Pres[0]);
    if ((NULL == rowreq_ctx->data.xfp1Pres) ||
        (rowreq_ctx->data.xfp1Pres_len <
         (xfp1Pres_len* sizeof(xfp1Pres[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1Pres)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.xfp1Pres, xfp1Pres, xfp1Pres_len* sizeof(xfp1Pres[0]) );
    
    /*
     * setup/save data for xfp1Loss
     * xfp1Loss(3)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1Loss data
     */
     
    char xfp1Loss[65535];
	strcpy (xfp1Loss, general_status_no_yes[pt_monitor_struct->xfp_struct.xfp_rx_loss[0]]);
	size_t xfp1Loss_len = strlen(xfp1Loss);
     
    rowreq_ctx->data.xfp1Loss_len = xfp1Loss_len* sizeof(xfp1Loss[0]);
    if ((NULL == rowreq_ctx->data.xfp1Loss) ||
        (rowreq_ctx->data.xfp1Loss_len <
         (xfp1Loss_len* sizeof(xfp1Loss[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1Loss)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1Loss, xfp1Loss, xfp1Loss_len* sizeof(xfp1Loss[0]) );
    
    /*
     * setup/save data for xfp1Rdy
     * xfp1Rdy(4)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1Rdy data
     */

    char xfp1Rdy[65535];
	strcpy (xfp1Rdy, general_status_no_yes[!pt_monitor_struct->xfp_struct.xfp_ready[0]]);
	size_t xfp1Rdy_len = strlen(xfp1Rdy);
     
    rowreq_ctx->data.xfp1Rdy_len = xfp1Rdy_len* sizeof(xfp1Rdy[0]);
    if ((NULL == rowreq_ctx->data.xfp1Rdy) ||
        (rowreq_ctx->data.xfp1Rdy_len <
         (xfp1Rdy_len* sizeof(xfp1Rdy[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1Rdy)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1Rdy, xfp1Rdy, xfp1Rdy_len* sizeof(xfp1Rdy[0]) );
    
    /*
     * setup/save data for xfp1Int
     * xfp1Int(5)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1Int data
     */
     
    char xfp1Int[65535];
	strcpy (xfp1Int, general_status_no_yes[!pt_monitor_struct->xfp_struct.xfp_interrupt[0]]);
	size_t xfp1Int_len = strlen(xfp1Int);
     
    rowreq_ctx->data.xfp1Int_len = xfp1Int_len* sizeof(xfp1Int[0]);
    if ((NULL == rowreq_ctx->data.xfp1Int) ||
        (rowreq_ctx->data.xfp1Int_len <
         (xfp1Int_len* sizeof(xfp1Int[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1Int)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.xfp1Int, xfp1Int, xfp1Int_len* sizeof(xfp1Int[0]) );
    
    /*
     * setup/save data for xfp1TxPow
     * xfp1TxPow(6)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1TxPow data
     */
     
    char xfp1TxPow[65535];
	sprintf(output_char, "%.2f", pt_monitor_struct->xfp_struct.xfp_tx_power[0]);
	strcpy (xfp1TxPow, output_char);
	size_t xfp1TxPow_len = strlen(xfp1TxPow);
     
    rowreq_ctx->data.xfp1TxPow_len = xfp1TxPow_len* sizeof(xfp1TxPow[0]);
    if ((NULL == rowreq_ctx->data.xfp1TxPow) ||
        (rowreq_ctx->data.xfp1TxPow_len <
         (xfp1TxPow_len* sizeof(xfp1TxPow[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1TxPow)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1TxPow, xfp1TxPow, xfp1TxPow_len* sizeof(xfp1TxPow[0]) );
    
    /*
     * setup/save data for xfp1RxPow
     * xfp1RxPow(7)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1RxPow data
     */
     
    char xfp1RxPow[65535];
	sprintf(output_char, "%.2f", pt_monitor_struct->xfp_struct.xfp_rx_power[0]);
	strcpy (xfp1RxPow, output_char);
	size_t xfp1RxPow_len = strlen(xfp1RxPow);
     
   rowreq_ctx->data.xfp1RxPow_len = xfp1RxPow_len* sizeof(xfp1RxPow[0]);
   if ((NULL == rowreq_ctx->data.xfp1RxPow) ||
        (rowreq_ctx->data.xfp1RxPow_len <
         (xfp1RxPow_len* sizeof(xfp1RxPow[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1RxPow)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1RxPow, xfp1RxPow, xfp1RxPow_len* sizeof(xfp1RxPow[0]) );
    
    /*
     * setup/save data for xfp1Temp
     * xfp1Temp(8)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1Temp data
     */
     
    char xfp1Temp[65535];
	sprintf(output_char, "%.2f", pt_monitor_struct->xfp_struct.xfp_temperature[0]);
	strcpy (xfp1Temp, output_char);
	size_t xfp1Temp_len = strlen(xfp1Temp);
     
    rowreq_ctx->data.xfp1Temp_len = xfp1Temp_len* sizeof(xfp1Temp[0]);
    if ((NULL == rowreq_ctx->data.xfp1Temp) ||
        (rowreq_ctx->data.xfp1Temp_len <
         (xfp1Temp_len* sizeof(xfp1Temp[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1Temp)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1Temp, xfp1Temp, xfp1Temp_len* sizeof(xfp1Temp[0]) );
    
    /*
     * setup/save data for xfp1LowTxPow
     * xfp1LowTxPow(9)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1LowTxPow data
     */
    
    char xfp1LowTxPow[65535];
	strcpy (xfp1LowTxPow, alarm_no_Alarm[pt_monitor_struct->xfp_struct.xfp_interruption_flags[0][0]]);	
	size_t xfp1LowTxPow_len = strlen(xfp1LowTxPow);
     
    rowreq_ctx->data.xfp1LowTxPow_len = xfp1LowTxPow_len* sizeof(xfp1LowTxPow[0]);
    if ((NULL == rowreq_ctx->data.xfp1LowTxPow) ||
        (rowreq_ctx->data.xfp1LowTxPow_len <
         (xfp1LowTxPow_len* sizeof(xfp1LowTxPow[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1LowTxPow)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1LowTxPow, xfp1LowTxPow, xfp1LowTxPow_len* sizeof(xfp1LowTxPow[0]) );
    
    /*
     * setup/save data for xfp1HighTxPow
     * xfp1HighTxPow(10)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1HighTxPow data
     */
     
    char xfp1HighTxPow[65535];
	strcpy (xfp1HighTxPow, alarm_no_Alarm[pt_monitor_struct->xfp_struct.xfp_interruption_flags[0][1]]);
	size_t xfp1HighTxPow_len = strlen(xfp1HighTxPow);
    
    rowreq_ctx->data.xfp1HighTxPow_len = xfp1HighTxPow_len* sizeof(xfp1HighTxPow[0]);
    if ((NULL == rowreq_ctx->data.xfp1HighTxPow) ||
        (rowreq_ctx->data.xfp1HighTxPow_len <
         (xfp1HighTxPow_len* sizeof(xfp1HighTxPow[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1HighTxPow)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1HighTxPow, xfp1HighTxPow, xfp1HighTxPow_len* sizeof(xfp1HighTxPow[0]) );
    
    /*
     * setup/save data for xfp1LowRxPow
     * xfp1LowRxPow(11)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1LowRxPow data
     */
     
    char xfp1LowRxPow[65535];
	strcpy (xfp1LowRxPow, alarm_no_Alarm[pt_monitor_struct->xfp_struct.xfp_interruption_flags[0][2]]);
	size_t xfp1LowRxPow_len = strlen(xfp1LowRxPow);
     
    rowreq_ctx->data.xfp1LowRxPow_len = xfp1LowRxPow_len* sizeof(xfp1LowRxPow[0]);
    if ((NULL == rowreq_ctx->data.xfp1LowRxPow) ||
        (rowreq_ctx->data.xfp1LowRxPow_len <
         (xfp1LowRxPow_len* sizeof(xfp1LowRxPow[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1LowRxPow)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1LowRxPow, xfp1LowRxPow, xfp1LowRxPow_len* sizeof(xfp1LowRxPow[0]) );
    
    /*
     * setup/save data for xfp1HighRxPow
     * xfp1HighRxPow(12)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1HighRxPow data
     */
     
    char xfp1HighRxPow[65535];
	strcpy (xfp1HighRxPow, alarm_no_Alarm[pt_monitor_struct->xfp_struct.xfp_interruption_flags[0][3]]);
	size_t xfp1HighRxPow_len = strlen(xfp1HighRxPow);
     
    rowreq_ctx->data.xfp1HighRxPow_len = xfp1HighRxPow_len* sizeof(xfp1HighRxPow[0]);
    if ((NULL == rowreq_ctx->data.xfp1HighRxPow) ||
        (rowreq_ctx->data.xfp1HighRxPow_len <
         (xfp1HighRxPow_len* sizeof(xfp1HighRxPow[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1HighRxPow)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1HighRxPow, xfp1HighRxPow, xfp1HighRxPow_len* sizeof(xfp1HighRxPow[0]) );
    
    /*
     * setup/save data for xfp1RxCdrLol
     * xfp1RxCdrLol(13)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1RxCdrLol data
     */
     
    char xfp1RxCdrLol[65535];
	strcpy (xfp1RxCdrLol, alarm_no_Alarm[pt_monitor_struct->xfp_struct.xfp_interruption_flags[0][4]]);
	size_t xfp1RxCdrLol_len = strlen(xfp1RxCdrLol);
     
    rowreq_ctx->data.xfp1RxCdrLol_len = xfp1RxCdrLol_len* sizeof(xfp1RxCdrLol[0]);
    if ((NULL == rowreq_ctx->data.xfp1RxCdrLol) ||
        (rowreq_ctx->data.xfp1RxCdrLol_len <
         (xfp1RxCdrLol_len* sizeof(xfp1RxCdrLol[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1RxCdrLol)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1RxCdrLol, xfp1RxCdrLol, xfp1RxCdrLol_len* sizeof(xfp1RxCdrLol[0]) );
    
    /*
     * setup/save data for xfp1TxCdrLol
     * xfp1TxCdrLol(14)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1TxCdrLol data
     */
     
    char xfp1TxCdrLol[65535];
	strcpy (xfp1TxCdrLol, alarm_no_Alarm[pt_monitor_struct->xfp_struct.xfp_interruption_flags[0][5]]);
	size_t xfp1TxCdrLol_len = strlen(xfp1TxCdrLol);
     
    rowreq_ctx->data.xfp1TxCdrLol_len = xfp1TxCdrLol_len* sizeof(xfp1TxCdrLol[0]);
    if ((NULL == rowreq_ctx->data.xfp1TxCdrLol) ||
        (rowreq_ctx->data.xfp1TxCdrLol_len <
         (xfp1TxCdrLol_len* sizeof(xfp1TxCdrLol[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1TxCdrLol)\n");
        return MFD_ERROR;
    }    
    memcpy( rowreq_ctx->data.xfp1TxCdrLol, xfp1TxCdrLol, xfp1TxCdrLol_len* sizeof(xfp1TxCdrLol[0]) );
    
    /*
     * setup/save data for xfp1LasFault
     * xfp1LasFault(15)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for xfp1LasFault data
     */
     
    char xfp1LasFault[65535];
	strcpy (xfp1LasFault, alarm_no_Alarm[pt_monitor_struct->xfp_struct.xfp_interruption_flags[0][6]]);
	size_t xfp1LasFault_len = strlen(xfp1LasFault);
     
    rowreq_ctx->data.xfp1LasFault_len = xfp1LasFault_len* sizeof(xfp1LasFault[0]);
    if ((NULL == rowreq_ctx->data.xfp1LasFault) ||
        (rowreq_ctx->data.xfp1LasFault_len <
         (xfp1LasFault_len* sizeof(xfp1LasFault[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1LasFault)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.xfp1LasFault, xfp1LasFault, xfp1LasFault_len* sizeof(xfp1LasFault[0]) );
        
        /*
         * insert into table container
         */
        CONTAINER_INSERT(container, rowreq_ctx);
        ++count;

    DEBUGMSGT(("verbose:xfp1Table:xfp1Table_container_load",
               "inserted %d records\n", count));

    return MFD_SUCCESS;
} /* xfp1Table_container_load */

/**
 * container clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void
xfp1Table_container_free(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_container_free","called\n"));

    /*
     * TODO:380:M: Free xfp1Table container data.
     */
} /* xfp1Table_container_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int
xfp1Table_row_prep( xfp1Table_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_row_prep","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
} /* xfp1Table_row_prep */

/** @} */
