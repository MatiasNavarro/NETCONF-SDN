/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp1Table.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement xfp1Table get routines.
 * TODO:240:M: Implement xfp1Table mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp1Table
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp1Table is subid 3 of mxpMIBObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.3, length: 9
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement xfp1Table data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param xfp1Index_ptr
 * @param xfp1Index_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
xfp1Table_indexes_set_tbl_idx(xfp1Table_mib_index *tbl_idx, char *xfp1Index_val_ptr,  size_t xfp1Index_val_ptr_len)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_indexes_set_tbl_idx","called\n"));

    /* xfp1Index(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->xfp1Index_len = sizeof(tbl_idx->xfp1Index)/sizeof(tbl_idx->xfp1Index[0]); /* max length */
    /*
     * make sure there is enough space for xfp1Index data
     */
    if ((NULL == tbl_idx->xfp1Index) ||
        (tbl_idx->xfp1Index_len <
         (xfp1Index_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp1Index_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->xfp1Index_len = xfp1Index_val_ptr_len;
    memcpy( tbl_idx->xfp1Index, xfp1Index_val_ptr, xfp1Index_val_ptr_len* sizeof(xfp1Index_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* xfp1Table_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
xfp1Table_indexes_set(xfp1Table_rowreq_ctx *rowreq_ctx, char *xfp1Index_val_ptr,  size_t xfp1Index_val_ptr_len)
{
    DEBUGMSGTL(("verbose:xfp1Table:xfp1Table_indexes_set","called\n"));

    if(MFD_SUCCESS != xfp1Table_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , xfp1Index_val_ptr, xfp1Index_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != xfp1Table_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* xfp1Table_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1Pres
 * xfp1Pres is subid 2 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.2
 * Description:
XFP1 Presence
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1Pres data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1Pres_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1Pres_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1Pres.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1Pres_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1Pres_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1Pres_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1Pres_val_ptr_ptr, size_t *xfp1Pres_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1Pres_val_ptr_ptr) && (NULL != *xfp1Pres_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1Pres_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1Pres_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1Pres data.
 * copy (* xfp1Pres_val_ptr_ptr ) data and (* xfp1Pres_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1Pres data
     */
    if ((NULL == (* xfp1Pres_val_ptr_ptr )) ||
        ((* xfp1Pres_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1Pres_len* sizeof(rowreq_ctx->data.xfp1Pres[0])))) {
        /*
         * allocate space for xfp1Pres data
         */
        (* xfp1Pres_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1Pres_len* sizeof(rowreq_ctx->data.xfp1Pres[0]));
        if(NULL == (* xfp1Pres_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1Pres)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1Pres_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1Pres_len* sizeof(rowreq_ctx->data.xfp1Pres[0]);
    memcpy( (* xfp1Pres_val_ptr_ptr ), rowreq_ctx->data.xfp1Pres, rowreq_ctx->data.xfp1Pres_len* sizeof(rowreq_ctx->data.xfp1Pres[0]) );

    return MFD_SUCCESS;
} /* xfp1Pres_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1Loss
 * xfp1Loss is subid 3 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.3
 * Description:
XFP1 Loss of Signal Indicator
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1Loss data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1Loss_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1Loss_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1Loss.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1Loss_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1Loss_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1Loss_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1Loss_val_ptr_ptr, size_t *xfp1Loss_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1Loss_val_ptr_ptr) && (NULL != *xfp1Loss_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1Loss_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1Loss_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1Loss data.
 * copy (* xfp1Loss_val_ptr_ptr ) data and (* xfp1Loss_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1Loss data
     */
    if ((NULL == (* xfp1Loss_val_ptr_ptr )) ||
        ((* xfp1Loss_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1Loss_len* sizeof(rowreq_ctx->data.xfp1Loss[0])))) {
        /*
         * allocate space for xfp1Loss data
         */
        (* xfp1Loss_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1Loss_len* sizeof(rowreq_ctx->data.xfp1Loss[0]));
        if(NULL == (* xfp1Loss_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1Loss)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1Loss_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1Loss_len* sizeof(rowreq_ctx->data.xfp1Loss[0]);
    memcpy( (* xfp1Loss_val_ptr_ptr ), rowreq_ctx->data.xfp1Loss, rowreq_ctx->data.xfp1Loss_len* sizeof(rowreq_ctx->data.xfp1Loss[0]) );

    return MFD_SUCCESS;
} /* xfp1Loss_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1Rdy
 * xfp1Rdy is subid 4 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.4
 * Description:
XFP1 Ready
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1Rdy data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1Rdy_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1Rdy_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1Rdy.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1Rdy_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1Rdy_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1Rdy_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1Rdy_val_ptr_ptr, size_t *xfp1Rdy_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1Rdy_val_ptr_ptr) && (NULL != *xfp1Rdy_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1Rdy_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1Rdy_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1Rdy data.
 * copy (* xfp1Rdy_val_ptr_ptr ) data and (* xfp1Rdy_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1Rdy data
     */
    if ((NULL == (* xfp1Rdy_val_ptr_ptr )) ||
        ((* xfp1Rdy_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1Rdy_len* sizeof(rowreq_ctx->data.xfp1Rdy[0])))) {
        /*
         * allocate space for xfp1Rdy data
         */
        (* xfp1Rdy_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1Rdy_len* sizeof(rowreq_ctx->data.xfp1Rdy[0]));
        if(NULL == (* xfp1Rdy_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1Rdy)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1Rdy_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1Rdy_len* sizeof(rowreq_ctx->data.xfp1Rdy[0]);
    memcpy( (* xfp1Rdy_val_ptr_ptr ), rowreq_ctx->data.xfp1Rdy, rowreq_ctx->data.xfp1Rdy_len* sizeof(rowreq_ctx->data.xfp1Rdy[0]) );

    return MFD_SUCCESS;
} /* xfp1Rdy_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1Int
 * xfp1Int is subid 5 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.5
 * Description:
XFP1 Interruption signal
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1Int data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1Int_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1Int_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1Int.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1Int_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1Int_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1Int_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1Int_val_ptr_ptr, size_t *xfp1Int_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1Int_val_ptr_ptr) && (NULL != *xfp1Int_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1Int_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1Int_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1Int data.
 * copy (* xfp1Int_val_ptr_ptr ) data and (* xfp1Int_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1Int data
     */
    if ((NULL == (* xfp1Int_val_ptr_ptr )) ||
        ((* xfp1Int_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1Int_len* sizeof(rowreq_ctx->data.xfp1Int[0])))) {
        /*
         * allocate space for xfp1Int data
         */
        (* xfp1Int_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1Int_len* sizeof(rowreq_ctx->data.xfp1Int[0]));
        if(NULL == (* xfp1Int_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1Int)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1Int_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1Int_len* sizeof(rowreq_ctx->data.xfp1Int[0]);
    memcpy( (* xfp1Int_val_ptr_ptr ), rowreq_ctx->data.xfp1Int, rowreq_ctx->data.xfp1Int_len* sizeof(rowreq_ctx->data.xfp1Int[0]) );

    return MFD_SUCCESS;
} /* xfp1Int_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1TxPow
 * xfp1TxPow is subid 6 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.6
 * Description:
XFP1 TX Power
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1TxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1TxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1TxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1TxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1TxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1TxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1TxPow_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1TxPow_val_ptr_ptr, size_t *xfp1TxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1TxPow_val_ptr_ptr) && (NULL != *xfp1TxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1TxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1TxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1TxPow data.
 * copy (* xfp1TxPow_val_ptr_ptr ) data and (* xfp1TxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1TxPow data
     */
    if ((NULL == (* xfp1TxPow_val_ptr_ptr )) ||
        ((* xfp1TxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1TxPow_len* sizeof(rowreq_ctx->data.xfp1TxPow[0])))) {
        /*
         * allocate space for xfp1TxPow data
         */
        (* xfp1TxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1TxPow_len* sizeof(rowreq_ctx->data.xfp1TxPow[0]));
        if(NULL == (* xfp1TxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1TxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1TxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1TxPow_len* sizeof(rowreq_ctx->data.xfp1TxPow[0]);
    memcpy( (* xfp1TxPow_val_ptr_ptr ), rowreq_ctx->data.xfp1TxPow, rowreq_ctx->data.xfp1TxPow_len* sizeof(rowreq_ctx->data.xfp1TxPow[0]) );

    return MFD_SUCCESS;
} /* xfp1TxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1RxPow
 * xfp1RxPow is subid 7 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.7
 * Description:
XFP1 RX Power
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1RxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1RxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1RxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1RxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1RxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1RxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1RxPow_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1RxPow_val_ptr_ptr, size_t *xfp1RxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1RxPow_val_ptr_ptr) && (NULL != *xfp1RxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1RxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1RxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1RxPow data.
 * copy (* xfp1RxPow_val_ptr_ptr ) data and (* xfp1RxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1RxPow data
     */
    if ((NULL == (* xfp1RxPow_val_ptr_ptr )) ||
        ((* xfp1RxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1RxPow_len* sizeof(rowreq_ctx->data.xfp1RxPow[0])))) {
        /*
         * allocate space for xfp1RxPow data
         */
        (* xfp1RxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1RxPow_len* sizeof(rowreq_ctx->data.xfp1RxPow[0]));
        if(NULL == (* xfp1RxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1RxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1RxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1RxPow_len* sizeof(rowreq_ctx->data.xfp1RxPow[0]);
    memcpy( (* xfp1RxPow_val_ptr_ptr ), rowreq_ctx->data.xfp1RxPow, rowreq_ctx->data.xfp1RxPow_len* sizeof(rowreq_ctx->data.xfp1RxPow[0]) );

    return MFD_SUCCESS;
} /* xfp1RxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1Temp
 * xfp1Temp is subid 8 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.8
 * Description:
XFP1 Temperature
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1Temp data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1Temp_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1Temp_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1Temp.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1Temp_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1Temp_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1Temp_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1Temp_val_ptr_ptr, size_t *xfp1Temp_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1Temp_val_ptr_ptr) && (NULL != *xfp1Temp_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1Temp_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1Temp_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1Temp data.
 * copy (* xfp1Temp_val_ptr_ptr ) data and (* xfp1Temp_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1Temp data
     */
    if ((NULL == (* xfp1Temp_val_ptr_ptr )) ||
        ((* xfp1Temp_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1Temp_len* sizeof(rowreq_ctx->data.xfp1Temp[0])))) {
        /*
         * allocate space for xfp1Temp data
         */
        (* xfp1Temp_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1Temp_len* sizeof(rowreq_ctx->data.xfp1Temp[0]));
        if(NULL == (* xfp1Temp_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1Temp)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1Temp_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1Temp_len* sizeof(rowreq_ctx->data.xfp1Temp[0]);
    memcpy( (* xfp1Temp_val_ptr_ptr ), rowreq_ctx->data.xfp1Temp, rowreq_ctx->data.xfp1Temp_len* sizeof(rowreq_ctx->data.xfp1Temp[0]) );

    return MFD_SUCCESS;
} /* xfp1Temp_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1LowTxPow
 * xfp1LowTxPow is subid 9 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.9
 * Description:
XFP1 Low TX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1LowTxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1LowTxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1LowTxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1LowTxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1LowTxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1LowTxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1LowTxPow_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1LowTxPow_val_ptr_ptr, size_t *xfp1LowTxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1LowTxPow_val_ptr_ptr) && (NULL != *xfp1LowTxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1LowTxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1LowTxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1LowTxPow data.
 * copy (* xfp1LowTxPow_val_ptr_ptr ) data and (* xfp1LowTxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1LowTxPow data
     */
    if ((NULL == (* xfp1LowTxPow_val_ptr_ptr )) ||
        ((* xfp1LowTxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1LowTxPow_len* sizeof(rowreq_ctx->data.xfp1LowTxPow[0])))) {
        /*
         * allocate space for xfp1LowTxPow data
         */
        (* xfp1LowTxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1LowTxPow_len* sizeof(rowreq_ctx->data.xfp1LowTxPow[0]));
        if(NULL == (* xfp1LowTxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1LowTxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1LowTxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1LowTxPow_len* sizeof(rowreq_ctx->data.xfp1LowTxPow[0]);
    memcpy( (* xfp1LowTxPow_val_ptr_ptr ), rowreq_ctx->data.xfp1LowTxPow, rowreq_ctx->data.xfp1LowTxPow_len* sizeof(rowreq_ctx->data.xfp1LowTxPow[0]) );

    return MFD_SUCCESS;
} /* xfp1LowTxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1HighTxPow
 * xfp1HighTxPow is subid 10 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.10
 * Description:
XFP1 High TX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1HighTxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1HighTxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1HighTxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1HighTxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1HighTxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1HighTxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1HighTxPow_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1HighTxPow_val_ptr_ptr, size_t *xfp1HighTxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1HighTxPow_val_ptr_ptr) && (NULL != *xfp1HighTxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1HighTxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1HighTxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1HighTxPow data.
 * copy (* xfp1HighTxPow_val_ptr_ptr ) data and (* xfp1HighTxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1HighTxPow data
     */
    if ((NULL == (* xfp1HighTxPow_val_ptr_ptr )) ||
        ((* xfp1HighTxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1HighTxPow_len* sizeof(rowreq_ctx->data.xfp1HighTxPow[0])))) {
        /*
         * allocate space for xfp1HighTxPow data
         */
        (* xfp1HighTxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1HighTxPow_len* sizeof(rowreq_ctx->data.xfp1HighTxPow[0]));
        if(NULL == (* xfp1HighTxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1HighTxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1HighTxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1HighTxPow_len* sizeof(rowreq_ctx->data.xfp1HighTxPow[0]);
    memcpy( (* xfp1HighTxPow_val_ptr_ptr ), rowreq_ctx->data.xfp1HighTxPow, rowreq_ctx->data.xfp1HighTxPow_len* sizeof(rowreq_ctx->data.xfp1HighTxPow[0]) );

    return MFD_SUCCESS;
} /* xfp1HighTxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1LowRxPow
 * xfp1LowRxPow is subid 11 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.11
 * Description:
XFP1 High RX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1LowRxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1LowRxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1LowRxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1LowRxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1LowRxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1LowRxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1LowRxPow_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1LowRxPow_val_ptr_ptr, size_t *xfp1LowRxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1LowRxPow_val_ptr_ptr) && (NULL != *xfp1LowRxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1LowRxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1LowRxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1LowRxPow data.
 * copy (* xfp1LowRxPow_val_ptr_ptr ) data and (* xfp1LowRxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1LowRxPow data
     */
    if ((NULL == (* xfp1LowRxPow_val_ptr_ptr )) ||
        ((* xfp1LowRxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1LowRxPow_len* sizeof(rowreq_ctx->data.xfp1LowRxPow[0])))) {
        /*
         * allocate space for xfp1LowRxPow data
         */
        (* xfp1LowRxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1LowRxPow_len* sizeof(rowreq_ctx->data.xfp1LowRxPow[0]));
        if(NULL == (* xfp1LowRxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1LowRxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1LowRxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1LowRxPow_len* sizeof(rowreq_ctx->data.xfp1LowRxPow[0]);
    memcpy( (* xfp1LowRxPow_val_ptr_ptr ), rowreq_ctx->data.xfp1LowRxPow, rowreq_ctx->data.xfp1LowRxPow_len* sizeof(rowreq_ctx->data.xfp1LowRxPow[0]) );

    return MFD_SUCCESS;
} /* xfp1LowRxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1HighRxPow
 * xfp1HighRxPow is subid 12 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.12
 * Description:
XFP1 High RX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1HighRxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1HighRxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1HighRxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1HighRxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1HighRxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1HighRxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1HighRxPow_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1HighRxPow_val_ptr_ptr, size_t *xfp1HighRxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1HighRxPow_val_ptr_ptr) && (NULL != *xfp1HighRxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1HighRxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1HighRxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1HighRxPow data.
 * copy (* xfp1HighRxPow_val_ptr_ptr ) data and (* xfp1HighRxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1HighRxPow data
     */
    if ((NULL == (* xfp1HighRxPow_val_ptr_ptr )) ||
        ((* xfp1HighRxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1HighRxPow_len* sizeof(rowreq_ctx->data.xfp1HighRxPow[0])))) {
        /*
         * allocate space for xfp1HighRxPow data
         */
        (* xfp1HighRxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1HighRxPow_len* sizeof(rowreq_ctx->data.xfp1HighRxPow[0]));
        if(NULL == (* xfp1HighRxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1HighRxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1HighRxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1HighRxPow_len* sizeof(rowreq_ctx->data.xfp1HighRxPow[0]);
    memcpy( (* xfp1HighRxPow_val_ptr_ptr ), rowreq_ctx->data.xfp1HighRxPow, rowreq_ctx->data.xfp1HighRxPow_len* sizeof(rowreq_ctx->data.xfp1HighRxPow[0]) );

    return MFD_SUCCESS;
} /* xfp1HighRxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1RxCdrLol
 * xfp1RxCdrLol is subid 13 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.13
 * Description:
XFP1 RX Loss of Lock Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1RxCdrLol data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1RxCdrLol_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1RxCdrLol_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1RxCdrLol.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1RxCdrLol_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1RxCdrLol_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1RxCdrLol_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1RxCdrLol_val_ptr_ptr, size_t *xfp1RxCdrLol_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1RxCdrLol_val_ptr_ptr) && (NULL != *xfp1RxCdrLol_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1RxCdrLol_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1RxCdrLol_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1RxCdrLol data.
 * copy (* xfp1RxCdrLol_val_ptr_ptr ) data and (* xfp1RxCdrLol_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1RxCdrLol data
     */
    if ((NULL == (* xfp1RxCdrLol_val_ptr_ptr )) ||
        ((* xfp1RxCdrLol_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1RxCdrLol_len* sizeof(rowreq_ctx->data.xfp1RxCdrLol[0])))) {
        /*
         * allocate space for xfp1RxCdrLol data
         */
        (* xfp1RxCdrLol_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1RxCdrLol_len* sizeof(rowreq_ctx->data.xfp1RxCdrLol[0]));
        if(NULL == (* xfp1RxCdrLol_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1RxCdrLol)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1RxCdrLol_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1RxCdrLol_len* sizeof(rowreq_ctx->data.xfp1RxCdrLol[0]);
    memcpy( (* xfp1RxCdrLol_val_ptr_ptr ), rowreq_ctx->data.xfp1RxCdrLol, rowreq_ctx->data.xfp1RxCdrLol_len* sizeof(rowreq_ctx->data.xfp1RxCdrLol[0]) );

    return MFD_SUCCESS;
} /* xfp1RxCdrLol_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1TxCdrLol
 * xfp1TxCdrLol is subid 14 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.14
 * Description:
XFP1 TX Loss of Lock Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1TxCdrLol data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1TxCdrLol_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1TxCdrLol_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1TxCdrLol.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1TxCdrLol_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1TxCdrLol_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1TxCdrLol_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1TxCdrLol_val_ptr_ptr, size_t *xfp1TxCdrLol_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1TxCdrLol_val_ptr_ptr) && (NULL != *xfp1TxCdrLol_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1TxCdrLol_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1TxCdrLol_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1TxCdrLol data.
 * copy (* xfp1TxCdrLol_val_ptr_ptr ) data and (* xfp1TxCdrLol_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1TxCdrLol data
     */
    if ((NULL == (* xfp1TxCdrLol_val_ptr_ptr )) ||
        ((* xfp1TxCdrLol_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1TxCdrLol_len* sizeof(rowreq_ctx->data.xfp1TxCdrLol[0])))) {
        /*
         * allocate space for xfp1TxCdrLol data
         */
        (* xfp1TxCdrLol_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1TxCdrLol_len* sizeof(rowreq_ctx->data.xfp1TxCdrLol[0]));
        if(NULL == (* xfp1TxCdrLol_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1TxCdrLol)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1TxCdrLol_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1TxCdrLol_len* sizeof(rowreq_ctx->data.xfp1TxCdrLol[0]);
    memcpy( (* xfp1TxCdrLol_val_ptr_ptr ), rowreq_ctx->data.xfp1TxCdrLol, rowreq_ctx->data.xfp1TxCdrLol_len* sizeof(rowreq_ctx->data.xfp1TxCdrLol[0]) );

    return MFD_SUCCESS;
} /* xfp1TxCdrLol_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp1Entry.xfp1LasFault
 * xfp1LasFault is subid 15 of xfp1Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.3.1.15
 * Description:
XFP1 Laser Fault Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp1LasFault data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp1LasFault_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp1LasFault_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp1LasFault.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp1LasFault_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp1LasFault_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp1LasFault_get( xfp1Table_rowreq_ctx *rowreq_ctx, char **xfp1LasFault_val_ptr_ptr, size_t *xfp1LasFault_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp1LasFault_val_ptr_ptr) && (NULL != *xfp1LasFault_val_ptr_ptr));
   netsnmp_assert( NULL != xfp1LasFault_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp1Table:xfp1LasFault_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp1LasFault data.
 * copy (* xfp1LasFault_val_ptr_ptr ) data and (* xfp1LasFault_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp1LasFault data
     */
    if ((NULL == (* xfp1LasFault_val_ptr_ptr )) ||
        ((* xfp1LasFault_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp1LasFault_len* sizeof(rowreq_ctx->data.xfp1LasFault[0])))) {
        /*
         * allocate space for xfp1LasFault data
         */
        (* xfp1LasFault_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp1LasFault_len* sizeof(rowreq_ctx->data.xfp1LasFault[0]));
        if(NULL == (* xfp1LasFault_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp1LasFault)\n");
            return MFD_ERROR;
        }
    }
    (* xfp1LasFault_val_ptr_len_ptr ) = rowreq_ctx->data.xfp1LasFault_len* sizeof(rowreq_ctx->data.xfp1LasFault[0]);
    memcpy( (* xfp1LasFault_val_ptr_ptr ), rowreq_ctx->data.xfp1LasFault, rowreq_ctx->data.xfp1LasFault_len* sizeof(rowreq_ctx->data.xfp1LasFault[0]) );

    return MFD_SUCCESS;
} /* xfp1LasFault_get */



/** @} */
