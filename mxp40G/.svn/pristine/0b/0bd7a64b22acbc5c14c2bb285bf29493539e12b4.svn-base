/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 *
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp2SeverityTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>
#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @defgroup data_set data_set: Routines to set data
 *
 * These routines are used to set the value for individual objects. The
 * row context is passed, along with the new value.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp2SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp2SeverityTable is subid 2 of xfpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2, length: 12
*/
    /*
     * NOTE: if you update this chart, please update the versions in
     *       local/mib2c-conf.d/parent-set.m2i
     *       agent/mibgroup/helpers/baby_steps.c
     * while you're at it.
     */
    /*
     ***********************************************************************
     * Baby Steps Flow Chart (2004.06.05)                                  *
     *                                                                     *
     * +--------------+    +================+    U = unconditional path    *
     * |optional state|    ||required state||    S = path for success      *
     * +--------------+    +================+    E = path for error        *
     ***********************************************************************
     *
     *                        +--------------+
     *                        |     pre      |
     *                        |   request    |
     *                        +--------------+
     *                               | U
     *                        +==============+
     *       +----------------||  object    ||
     *       |              E ||  lookup    ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |              E ||   check    ||
     *       |<---------------||   values   ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |       +<-------||   undo     ||
     *       |       |      E ||   setup    ||
     *       |       |        +==============+
     *       |       |               | S
     *       |       |        +==============+
     *       |       |        ||    set     ||-------------------------->+
     *       |       |        ||   value    || E                         |
     *       |       |        +==============+                           |
     *       |       |               | S                                 |
     *       |       |        +--------------+                           |
     *       |       |        |    check     |-------------------------->|
     *       |       |        |  consistency | E                         |
     *       |       |        +--------------+                           |
     *       |       |               | S                                 |
     *       |       |        +==============+         +==============+  |
     *       |       |        ||   commit   ||-------->||     undo   ||  |
     *       |       |        ||            || E       ||    commit  ||  |
     *       |       |        +==============+         +==============+  |
     *       |       |               | S                     U |<--------+
     *       |       |        +--------------+         +==============+
     *       |       |        | irreversible |         ||    undo    ||
     *       |       |        |    commit    |         ||     set    ||
     *       |       |        +--------------+         +==============+
     *       |       |               | U                     U |
     *       |       +-------------->|<------------------------+
     *       |                +==============+
     *       |                ||   undo     ||
     *       |                ||  cleanup   ||
     *       |                +==============+
     *       +---------------------->| U
     *                        +--------------+
     *                        |    post      |
     *                        |   request    |
     *                        +--------------+
     *
     */

/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 *
 * Note that the undo context has been allocated with
 * xfp2SeverityTable_allocate_data(), but may need extra
 * initialization similar to what you may have done in
 * xfp2SeverityTable_rowreq_ctx_init().
 * Note that an individual node's undo_setup function will only be called
 * if that node is being set to a new value.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in the node's undo_setup
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
xfp2SeverityTable_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTable_undo_setup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> Setup xfp2SeverityTable undo.
     * set up xfp2SeverityTable undo information, in preparation for a set.
     * Undo storage is in (* xfp2SeverityLaserFault_val_ptr )*
     */

    return rc;
} /* xfp2SeverityTable_undo_setup */

/**
 * Undo a set request.
 *
 * This function will be called before the individual node undo
 * functions are called. If you need to do any undo that is not
 * related to a specific column, you can do it here.
 *
 * Note that an individual node's undo function will only be called
 * if that node is being set to a new value.
 *
 * If there is anything  specific to a particular column (e.g. releasing
 * memory for a string), you should do that setup in the node's undo
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
xfp2SeverityTable_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTable_undo","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> xfp2SeverityTable undo.
     * xfp2SeverityTable undo information, in response to a failed set.
     * Undo storage is in (* xfp2SeverityLaserFault_val_ptr )*
     */

    return rc;
} /* xfp2SeverityTable_undo_setup */

/**
 * Cleanup up context undo information.
 *
 * This function will be called after set/commit processing. If you
 * allocated any resources in undo_setup, this is the place to release
 * those resources.
 *
 * This function is called regardless of the success or failure of the set
 * request. If you need to perform different steps for cleanup depending
 * on success or failure, you can add a flag to the rowreq_ctx.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
xfp2SeverityTable_undo_cleanup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTable_undo_cleanup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:452:M: |-> Cleanup xfp2SeverityTable undo.
     * Undo storage is in (* xfp2SeverityLaserFault_val_ptr )*
     */

    return rc;
} /* xfp2SeverityTable_undo_cleanup */

/**
 * commit new values.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * xfp2SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param xfp2SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
xfp2SeverityTable_commit( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;
    int             save_flags;

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTable_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * save flags, then clear until we actually do something
     */
    save_flags = rowreq_ctx->column_set_flags;
    rowreq_ctx->column_set_flags = 0;

    /*
     * commit xfp2SeverityTable data
     * 1) check the column's flag in save_flags to see if it was set.
     * 2) clear the flag when you handle that column
     * 3) set the column's flag in column_set_flags if it needs undo
     *    processing in case of a failure.
     */
    if (save_flags & COLUMN_XFP2SEVERITYPRESENCE_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYPRESENCE_FLAG; /* clear xfp2SeverityPresence */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityPresence.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityPresence commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityPresence
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYPRESENCE_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYRXLOSS_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYRXLOSS_FLAG; /* clear xfp2SeverityRxLoss */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityRxLoss.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityRxLoss commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityRxLoss
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYRXLOSS_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYREADY_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYREADY_FLAG; /* clear xfp2SeverityReady */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityReady.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityReady commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityReady
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYREADY_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYTXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYTXPOWER_FLAG; /* clear xfp2SeverityTxPower */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityTxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityTxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityTxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYTXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYRXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYRXPOWER_FLAG; /* clear xfp2SeverityRxPower */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityRxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityRxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityRxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYRXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYTEMPERATURE_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYTEMPERATURE_FLAG; /* clear xfp2SeverityTemperature */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityTemperature.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityTemperature commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityTemperature
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYTEMPERATURE_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYLOWTXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYLOWTXPOWER_FLAG; /* clear xfp2SeverityLowTxPower */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityLowTxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityLowTxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityLowTxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYLOWTXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYHIGHTXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYHIGHTXPOWER_FLAG; /* clear xfp2SeverityHighTxPower */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityHighTxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityHighTxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityHighTxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYHIGHTXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYLOWRXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYLOWRXPOWER_FLAG; /* clear xfp2SeverityLowRxPower */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityLowRxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityLowRxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityLowRxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYLOWRXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYHIGHRXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYHIGHRXPOWER_FLAG; /* clear xfp2SeverityHighRxPower */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityHighRxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityHighRxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityHighRxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYHIGHRXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYRXCDRLOSSOFLOCK_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYRXCDRLOSSOFLOCK_FLAG; /* clear xfp2SeverityRxCdrLossOfLock */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityRxCdrLossOfLock.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityRxCdrLossOfLock commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityRxCdrLossOfLock
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYRXCDRLOSSOFLOCK_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYTXCDRLOSSOFLOCK_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYTXCDRLOSSOFLOCK_FLAG; /* clear xfp2SeverityTxCdrLossOfLock */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityTxCdrLossOfLock.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityTxCdrLossOfLock commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityTxCdrLossOfLock
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYTXCDRLOSSOFLOCK_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP2SEVERITYLASERFAULT_FLAG) {
       save_flags &= ~COLUMN_XFP2SEVERITYLASERFAULT_FLAG; /* clear xfp2SeverityLaserFault */
       /*
        * TODO:482:o: |-> commit column xfp2SeverityLaserFault.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp2SeverityTable column xfp2SeverityLaserFault commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp2SeverityLaserFault
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP2SEVERITYLASERFAULT_FLAG;
       }
    }

    /*
     * if we successfully commited this row, set the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags |= MFD_ROW_DIRTY;
    }

    if (save_flags) {
       snmp_log(LOG_ERR, "unhandled columns (0x%x) in commit\n", save_flags);
       return MFD_ERROR;
    }

    return rc;
} /* xfp2SeverityTable_commit */

/**
 * undo commit new values.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * xfp2SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param xfp2SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
xfp2SeverityTable_undo_commit( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTable_undo_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:485:M: |-> Undo xfp2SeverityTable commit.
     * check the column's flag in rowreq_ctx->column_set_flags to see
     * if it was set during commit, then undo it.
     *
     * eg: if (rowreq_ctx->column_set_flags & COLUMN__FLAG) {}
     */

    
    /*
     * if we successfully un-commited this row, clear the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags &= ~MFD_ROW_DIRTY;
    }

    return rc;
} /* xfp2SeverityTable_undo_commit */

/*
 * TODO:440:M: Implement xfp2SeverityTable node value checks.
 * TODO:450:M: Implement xfp2SeverityTable undo functions.
 * TODO:460:M: Implement xfp2SeverityTable set functions.
 * TODO:480:M: Implement xfp2SeverityTable commit functions.
 */
/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityPresence
 * xfp2SeverityPresence is subid 2 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityPresence_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityPresence_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityPresence_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityPresence_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityPresence value.
     */

    return MFD_SUCCESS; /* xfp2SeverityPresence value not illegal */
} /* xfp2SeverityPresence_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityPresence_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityPresence_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityPresence undo.
     */
    /*
     * copy xfp2SeverityPresence data
     * set rowreq_ctx->undo->xfp2SeverityPresence from rowreq_ctx->data.xfp2SeverityPresence
     */
    rowreq_ctx->undo->xfp2SeverityPresence = rowreq_ctx->data.xfp2SeverityPresence;


    return MFD_SUCCESS;
} /* xfp2SeverityPresence_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityPresence_val
 *        A long containing the new value.
 */
int
xfp2SeverityPresence_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityPresence_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityPresence_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityPresence value.
     * set xfp2SeverityPresence value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityPresence = xfp2SeverityPresence_val;

    // Set severity on shared memory
    setXfp2Severity("presence", xfp2SeverityPresence_val);

    return MFD_SUCCESS;
} /* xfp2SeverityPresence_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityPresence_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityPresence_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityPresence undo.
     */
    /*
     * copy xfp2SeverityPresence data
     * set rowreq_ctx->data.xfp2SeverityPresence from rowreq_ctx->undo->xfp2SeverityPresence
     */
    rowreq_ctx->data.xfp2SeverityPresence = rowreq_ctx->undo->xfp2SeverityPresence;

    
    return MFD_SUCCESS;
} /* xfp2SeverityPresence_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityRxLoss
 * xfp2SeverityRxLoss is subid 3 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityRxLoss_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityRxLoss_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityRxLoss_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxLoss_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityRxLoss value.
     */

    return MFD_SUCCESS; /* xfp2SeverityRxLoss value not illegal */
} /* xfp2SeverityRxLoss_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityRxLoss_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxLoss_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityRxLoss undo.
     */
    /*
     * copy xfp2SeverityRxLoss data
     * set rowreq_ctx->undo->xfp2SeverityRxLoss from rowreq_ctx->data.xfp2SeverityRxLoss
     */
    rowreq_ctx->undo->xfp2SeverityRxLoss = rowreq_ctx->data.xfp2SeverityRxLoss;


    return MFD_SUCCESS;
} /* xfp2SeverityRxLoss_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityRxLoss_val
 *        A long containing the new value.
 */
int
xfp2SeverityRxLoss_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityRxLoss_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxLoss_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityRxLoss value.
     * set xfp2SeverityRxLoss value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityRxLoss = xfp2SeverityRxLoss_val;

    // Set severity on shared memory
    setXfp2Severity("rx_loss", xfp2SeverityRxLoss_val);

    return MFD_SUCCESS;
} /* xfp2SeverityRxLoss_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityRxLoss_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxLoss_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityRxLoss undo.
     */
    /*
     * copy xfp2SeverityRxLoss data
     * set rowreq_ctx->data.xfp2SeverityRxLoss from rowreq_ctx->undo->xfp2SeverityRxLoss
     */
    rowreq_ctx->data.xfp2SeverityRxLoss = rowreq_ctx->undo->xfp2SeverityRxLoss;

    
    return MFD_SUCCESS;
} /* xfp2SeverityRxLoss_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityReady
 * xfp2SeverityReady is subid 4 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityReady_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityReady_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityReady_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityReady_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityReady value.
     */

    return MFD_SUCCESS; /* xfp2SeverityReady value not illegal */
} /* xfp2SeverityReady_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityReady_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityReady_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityReady undo.
     */
    /*
     * copy xfp2SeverityReady data
     * set rowreq_ctx->undo->xfp2SeverityReady from rowreq_ctx->data.xfp2SeverityReady
     */
    rowreq_ctx->undo->xfp2SeverityReady = rowreq_ctx->data.xfp2SeverityReady;


    return MFD_SUCCESS;
} /* xfp2SeverityReady_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityReady_val
 *        A long containing the new value.
 */
int
xfp2SeverityReady_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityReady_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityReady_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityReady value.
     * set xfp2SeverityReady value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityReady = xfp2SeverityReady_val;

    // Set severity on shared memory
    setXfp2Severity("ready", xfp2SeverityReady_val);

    return MFD_SUCCESS;
} /* xfp2SeverityReady_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityReady_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityReady_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityReady undo.
     */
    /*
     * copy xfp2SeverityReady data
     * set rowreq_ctx->data.xfp2SeverityReady from rowreq_ctx->undo->xfp2SeverityReady
     */
    rowreq_ctx->data.xfp2SeverityReady = rowreq_ctx->undo->xfp2SeverityReady;

    
    return MFD_SUCCESS;
} /* xfp2SeverityReady_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityTxPower
 * xfp2SeverityTxPower is subid 5 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityTxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityTxPower_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityTxPower_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityTxPower value.
     */

    return MFD_SUCCESS; /* xfp2SeverityTxPower value not illegal */
} /* xfp2SeverityTxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityTxPower_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityTxPower undo.
     */
    /*
     * copy xfp2SeverityTxPower data
     * set rowreq_ctx->undo->xfp2SeverityTxPower from rowreq_ctx->data.xfp2SeverityTxPower
     */
    rowreq_ctx->undo->xfp2SeverityTxPower = rowreq_ctx->data.xfp2SeverityTxPower;


    return MFD_SUCCESS;
} /* xfp2SeverityTxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityTxPower_val
 *        A long containing the new value.
 */
int
xfp2SeverityTxPower_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityTxPower_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityTxPower value.
     * set xfp2SeverityTxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityTxPower = xfp2SeverityTxPower_val;

    // Set severity on shared memory
    setXfp2Severity("tx_power", xfp2SeverityTxPower_val);

    return MFD_SUCCESS;
} /* xfp2SeverityTxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityTxPower_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityTxPower undo.
     */
    /*
     * copy xfp2SeverityTxPower data
     * set rowreq_ctx->data.xfp2SeverityTxPower from rowreq_ctx->undo->xfp2SeverityTxPower
     */
    rowreq_ctx->data.xfp2SeverityTxPower = rowreq_ctx->undo->xfp2SeverityTxPower;

    
    return MFD_SUCCESS;
} /* xfp2SeverityTxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityRxPower
 * xfp2SeverityRxPower is subid 6 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityRxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityRxPower_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityRxPower_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityRxPower value.
     */

    return MFD_SUCCESS; /* xfp2SeverityRxPower value not illegal */
} /* xfp2SeverityRxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityRxPower_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityRxPower undo.
     */
    /*
     * copy xfp2SeverityRxPower data
     * set rowreq_ctx->undo->xfp2SeverityRxPower from rowreq_ctx->data.xfp2SeverityRxPower
     */
    rowreq_ctx->undo->xfp2SeverityRxPower = rowreq_ctx->data.xfp2SeverityRxPower;


    return MFD_SUCCESS;
} /* xfp2SeverityRxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityRxPower_val
 *        A long containing the new value.
 */
int
xfp2SeverityRxPower_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityRxPower_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityRxPower value.
     * set xfp2SeverityRxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityRxPower = xfp2SeverityRxPower_val;

    // Set severity on shared memory
    setXfp2Severity("rx_power", xfp2SeverityRxPower_val);

    return MFD_SUCCESS;
} /* xfp2SeverityRxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityRxPower_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityRxPower undo.
     */
    /*
     * copy xfp2SeverityRxPower data
     * set rowreq_ctx->data.xfp2SeverityRxPower from rowreq_ctx->undo->xfp2SeverityRxPower
     */
    rowreq_ctx->data.xfp2SeverityRxPower = rowreq_ctx->undo->xfp2SeverityRxPower;

    
    return MFD_SUCCESS;
} /* xfp2SeverityRxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityTemperature
 * xfp2SeverityTemperature is subid 7 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityTemperature_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityTemperature_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityTemperature_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTemperature_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityTemperature value.
     */

    return MFD_SUCCESS; /* xfp2SeverityTemperature value not illegal */
} /* xfp2SeverityTemperature_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityTemperature_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTemperature_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityTemperature undo.
     */
    /*
     * copy xfp2SeverityTemperature data
     * set rowreq_ctx->undo->xfp2SeverityTemperature from rowreq_ctx->data.xfp2SeverityTemperature
     */
    rowreq_ctx->undo->xfp2SeverityTemperature = rowreq_ctx->data.xfp2SeverityTemperature;


    return MFD_SUCCESS;
} /* xfp2SeverityTemperature_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityTemperature_val
 *        A long containing the new value.
 */
int
xfp2SeverityTemperature_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityTemperature_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTemperature_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityTemperature value.
     * set xfp2SeverityTemperature value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityTemperature = xfp2SeverityTemperature_val;

    // Set severity on shared memory
    setXfp2Severity("temperature", xfp2SeverityTemperature_val);

    return MFD_SUCCESS;
} /* xfp2SeverityTemperature_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityTemperature_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTemperature_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityTemperature undo.
     */
    /*
     * copy xfp2SeverityTemperature data
     * set rowreq_ctx->data.xfp2SeverityTemperature from rowreq_ctx->undo->xfp2SeverityTemperature
     */
    rowreq_ctx->data.xfp2SeverityTemperature = rowreq_ctx->undo->xfp2SeverityTemperature;

    
    return MFD_SUCCESS;
} /* xfp2SeverityTemperature_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityLowTxPower
 * xfp2SeverityLowTxPower is subid 8 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.8
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityLowTxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityLowTxPower_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityLowTxPower_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowTxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityLowTxPower value.
     */

    return MFD_SUCCESS; /* xfp2SeverityLowTxPower value not illegal */
} /* xfp2SeverityLowTxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityLowTxPower_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowTxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityLowTxPower undo.
     */
    /*
     * copy xfp2SeverityLowTxPower data
     * set rowreq_ctx->undo->xfp2SeverityLowTxPower from rowreq_ctx->data.xfp2SeverityLowTxPower
     */
    rowreq_ctx->undo->xfp2SeverityLowTxPower = rowreq_ctx->data.xfp2SeverityLowTxPower;


    return MFD_SUCCESS;
} /* xfp2SeverityLowTxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityLowTxPower_val
 *        A long containing the new value.
 */
int
xfp2SeverityLowTxPower_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityLowTxPower_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowTxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityLowTxPower value.
     * set xfp2SeverityLowTxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityLowTxPower = xfp2SeverityLowTxPower_val;

    // Set severity on shared memory
    setXfp2Severity("low_tx_power", xfp2SeverityLowTxPower_val);

    return MFD_SUCCESS;
} /* xfp2SeverityLowTxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityLowTxPower_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowTxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityLowTxPower undo.
     */
    /*
     * copy xfp2SeverityLowTxPower data
     * set rowreq_ctx->data.xfp2SeverityLowTxPower from rowreq_ctx->undo->xfp2SeverityLowTxPower
     */
    rowreq_ctx->data.xfp2SeverityLowTxPower = rowreq_ctx->undo->xfp2SeverityLowTxPower;

    
    return MFD_SUCCESS;
} /* xfp2SeverityLowTxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityHighTxPower
 * xfp2SeverityHighTxPower is subid 9 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.9
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityHighTxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityHighTxPower_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityHighTxPower_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighTxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityHighTxPower value.
     */

    return MFD_SUCCESS; /* xfp2SeverityHighTxPower value not illegal */
} /* xfp2SeverityHighTxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityHighTxPower_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighTxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityHighTxPower undo.
     */
    /*
     * copy xfp2SeverityHighTxPower data
     * set rowreq_ctx->undo->xfp2SeverityHighTxPower from rowreq_ctx->data.xfp2SeverityHighTxPower
     */
    rowreq_ctx->undo->xfp2SeverityHighTxPower = rowreq_ctx->data.xfp2SeverityHighTxPower;


    return MFD_SUCCESS;
} /* xfp2SeverityHighTxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityHighTxPower_val
 *        A long containing the new value.
 */
int
xfp2SeverityHighTxPower_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityHighTxPower_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighTxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityHighTxPower value.
     * set xfp2SeverityHighTxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityHighTxPower = xfp2SeverityHighTxPower_val;

    // Set severity on shared memory
    setXfp2Severity("high_tx_power", xfp2SeverityHighTxPower_val);

    return MFD_SUCCESS;
} /* xfp2SeverityHighTxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityHighTxPower_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighTxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityHighTxPower undo.
     */
    /*
     * copy xfp2SeverityHighTxPower data
     * set rowreq_ctx->data.xfp2SeverityHighTxPower from rowreq_ctx->undo->xfp2SeverityHighTxPower
     */
    rowreq_ctx->data.xfp2SeverityHighTxPower = rowreq_ctx->undo->xfp2SeverityHighTxPower;

    
    return MFD_SUCCESS;
} /* xfp2SeverityHighTxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityLowRxPower
 * xfp2SeverityLowRxPower is subid 10 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.10
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityLowRxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityLowRxPower_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityLowRxPower_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowRxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityLowRxPower value.
     */

    return MFD_SUCCESS; /* xfp2SeverityLowRxPower value not illegal */
} /* xfp2SeverityLowRxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityLowRxPower_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowRxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityLowRxPower undo.
     */
    /*
     * copy xfp2SeverityLowRxPower data
     * set rowreq_ctx->undo->xfp2SeverityLowRxPower from rowreq_ctx->data.xfp2SeverityLowRxPower
     */
    rowreq_ctx->undo->xfp2SeverityLowRxPower = rowreq_ctx->data.xfp2SeverityLowRxPower;


    return MFD_SUCCESS;
} /* xfp2SeverityLowRxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityLowRxPower_val
 *        A long containing the new value.
 */
int
xfp2SeverityLowRxPower_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityLowRxPower_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowRxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityLowRxPower value.
     * set xfp2SeverityLowRxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityLowRxPower = xfp2SeverityLowRxPower_val;

    // Set severity on shared memory
    setXfp2Severity("low_rx_power", xfp2SeverityLowRxPower_val);

    return MFD_SUCCESS;
} /* xfp2SeverityLowRxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityLowRxPower_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLowRxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityLowRxPower undo.
     */
    /*
     * copy xfp2SeverityLowRxPower data
     * set rowreq_ctx->data.xfp2SeverityLowRxPower from rowreq_ctx->undo->xfp2SeverityLowRxPower
     */
    rowreq_ctx->data.xfp2SeverityLowRxPower = rowreq_ctx->undo->xfp2SeverityLowRxPower;

    
    return MFD_SUCCESS;
} /* xfp2SeverityLowRxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityHighRxPower
 * xfp2SeverityHighRxPower is subid 11 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.11
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityHighRxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityHighRxPower_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityHighRxPower_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighRxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityHighRxPower value.
     */

    return MFD_SUCCESS; /* xfp2SeverityHighRxPower value not illegal */
} /* xfp2SeverityHighRxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityHighRxPower_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighRxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityHighRxPower undo.
     */
    /*
     * copy xfp2SeverityHighRxPower data
     * set rowreq_ctx->undo->xfp2SeverityHighRxPower from rowreq_ctx->data.xfp2SeverityHighRxPower
     */
    rowreq_ctx->undo->xfp2SeverityHighRxPower = rowreq_ctx->data.xfp2SeverityHighRxPower;


    return MFD_SUCCESS;
} /* xfp2SeverityHighRxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityHighRxPower_val
 *        A long containing the new value.
 */
int
xfp2SeverityHighRxPower_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityHighRxPower_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighRxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityHighRxPower value.
     * set xfp2SeverityHighRxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityHighRxPower = xfp2SeverityHighRxPower_val;

    // Set severity on shared memory
    setXfp2Severity("high_rx_power", xfp2SeverityHighRxPower_val);

    return MFD_SUCCESS;
} /* xfp2SeverityHighRxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityHighRxPower_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityHighRxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityHighRxPower undo.
     */
    /*
     * copy xfp2SeverityHighRxPower data
     * set rowreq_ctx->data.xfp2SeverityHighRxPower from rowreq_ctx->undo->xfp2SeverityHighRxPower
     */
    rowreq_ctx->data.xfp2SeverityHighRxPower = rowreq_ctx->undo->xfp2SeverityHighRxPower;

    
    return MFD_SUCCESS;
} /* xfp2SeverityHighRxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityRxCdrLossOfLock
 * xfp2SeverityRxCdrLossOfLock is subid 12 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.12
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityRxCdrLossOfLock_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityRxCdrLossOfLock_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityRxCdrLossOfLock_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxCdrLossOfLock_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityRxCdrLossOfLock value.
     */

    return MFD_SUCCESS; /* xfp2SeverityRxCdrLossOfLock value not illegal */
} /* xfp2SeverityRxCdrLossOfLock_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityRxCdrLossOfLock_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxCdrLossOfLock_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityRxCdrLossOfLock undo.
     */
    /*
     * copy xfp2SeverityRxCdrLossOfLock data
     * set rowreq_ctx->undo->xfp2SeverityRxCdrLossOfLock from rowreq_ctx->data.xfp2SeverityRxCdrLossOfLock
     */
    rowreq_ctx->undo->xfp2SeverityRxCdrLossOfLock = rowreq_ctx->data.xfp2SeverityRxCdrLossOfLock;


    return MFD_SUCCESS;
} /* xfp2SeverityRxCdrLossOfLock_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityRxCdrLossOfLock_val
 *        A long containing the new value.
 */
int
xfp2SeverityRxCdrLossOfLock_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityRxCdrLossOfLock_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxCdrLossOfLock_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityRxCdrLossOfLock value.
     * set xfp2SeverityRxCdrLossOfLock value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityRxCdrLossOfLock = xfp2SeverityRxCdrLossOfLock_val;

    // Set severity on shared memory
    setXfp2Severity("rx_cdr_loss_of_lock", xfp2SeverityRxCdrLossOfLock_val);

    return MFD_SUCCESS;
} /* xfp2SeverityRxCdrLossOfLock_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityRxCdrLossOfLock_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityRxCdrLossOfLock_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityRxCdrLossOfLock undo.
     */
    /*
     * copy xfp2SeverityRxCdrLossOfLock data
     * set rowreq_ctx->data.xfp2SeverityRxCdrLossOfLock from rowreq_ctx->undo->xfp2SeverityRxCdrLossOfLock
     */
    rowreq_ctx->data.xfp2SeverityRxCdrLossOfLock = rowreq_ctx->undo->xfp2SeverityRxCdrLossOfLock;

    
    return MFD_SUCCESS;
} /* xfp2SeverityRxCdrLossOfLock_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityTxCdrLossOfLock
 * xfp2SeverityTxCdrLossOfLock is subid 13 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.13
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityTxCdrLossOfLock_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityTxCdrLossOfLock_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityTxCdrLossOfLock_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxCdrLossOfLock_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityTxCdrLossOfLock value.
     */

    return MFD_SUCCESS; /* xfp2SeverityTxCdrLossOfLock value not illegal */
} /* xfp2SeverityTxCdrLossOfLock_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityTxCdrLossOfLock_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxCdrLossOfLock_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityTxCdrLossOfLock undo.
     */
    /*
     * copy xfp2SeverityTxCdrLossOfLock data
     * set rowreq_ctx->undo->xfp2SeverityTxCdrLossOfLock from rowreq_ctx->data.xfp2SeverityTxCdrLossOfLock
     */
    rowreq_ctx->undo->xfp2SeverityTxCdrLossOfLock = rowreq_ctx->data.xfp2SeverityTxCdrLossOfLock;


    return MFD_SUCCESS;
} /* xfp2SeverityTxCdrLossOfLock_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityTxCdrLossOfLock_val
 *        A long containing the new value.
 */
int
xfp2SeverityTxCdrLossOfLock_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityTxCdrLossOfLock_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxCdrLossOfLock_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityTxCdrLossOfLock value.
     * set xfp2SeverityTxCdrLossOfLock value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityTxCdrLossOfLock = xfp2SeverityTxCdrLossOfLock_val;

    // Set severity on shared memory
    setXfp2Severity("tx_cdr_loss_of_lock", xfp2SeverityTxCdrLossOfLock_val);

    return MFD_SUCCESS;
} /* xfp2SeverityTxCdrLossOfLock_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityTxCdrLossOfLock_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityTxCdrLossOfLock_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityTxCdrLossOfLock undo.
     */
    /*
     * copy xfp2SeverityTxCdrLossOfLock data
     * set rowreq_ctx->data.xfp2SeverityTxCdrLossOfLock from rowreq_ctx->undo->xfp2SeverityTxCdrLossOfLock
     */
    rowreq_ctx->data.xfp2SeverityTxCdrLossOfLock = rowreq_ctx->undo->xfp2SeverityTxCdrLossOfLock;

    
    return MFD_SUCCESS;
} /* xfp2SeverityTxCdrLossOfLock_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2SeverityEntry.xfp2SeverityLaserFault
 * xfp2SeverityLaserFault is subid 14 of xfp2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.2.1.14
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2SeverityLaserFault_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp2SeverityLaserFault_check_value( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityLaserFault_val)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLaserFault_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp2SeverityLaserFault value.
     */

    return MFD_SUCCESS; /* xfp2SeverityLaserFault value not illegal */
} /* xfp2SeverityLaserFault_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp2SeverityLaserFault_undo_setup( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLaserFault_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp2SeverityLaserFault undo.
     */
    /*
     * copy xfp2SeverityLaserFault data
     * set rowreq_ctx->undo->xfp2SeverityLaserFault from rowreq_ctx->data.xfp2SeverityLaserFault
     */
    rowreq_ctx->undo->xfp2SeverityLaserFault = rowreq_ctx->data.xfp2SeverityLaserFault;


    return MFD_SUCCESS;
} /* xfp2SeverityLaserFault_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp2SeverityLaserFault_val
 *        A long containing the new value.
 */
int
xfp2SeverityLaserFault_set( xfp2SeverityTable_rowreq_ctx *rowreq_ctx, long xfp2SeverityLaserFault_val )
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLaserFault_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp2SeverityLaserFault value.
     * set xfp2SeverityLaserFault value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp2SeverityLaserFault = xfp2SeverityLaserFault_val;

    // Set severity on shared memory
    setXfp2Severity("laser_fault", xfp2SeverityLaserFault_val);

    return MFD_SUCCESS;
} /* xfp2SeverityLaserFault_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp2SeverityLaserFault_undo( xfp2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp2SeverityTable:xfp2SeverityLaserFault_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp2SeverityLaserFault undo.
     */
    /*
     * copy xfp2SeverityLaserFault data
     * set rowreq_ctx->data.xfp2SeverityLaserFault from rowreq_ctx->undo->xfp2SeverityLaserFault
     */
    rowreq_ctx->data.xfp2SeverityLaserFault = rowreq_ctx->undo->xfp2SeverityLaserFault;

    
    return MFD_SUCCESS;
} /* xfp2SeverityLaserFault_undo */

void setXfp2Severity(char *alarm, long severity_value)
{
	DEBUGMSGTL(("verbose:xfp2SeverityTable:setXfp2Severity","called\n"));

	shm_handler_create(pt_monitor_struct);

	if(strcmp(alarm, "presence") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].presence = severity_value;
	}
	else if(strcmp(alarm, "rx_loss") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].rx_loss = severity_value;
	}
	else if(strcmp(alarm, "ready") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].ready = severity_value;
	}
	else if(strcmp(alarm, "tx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].tx_power = severity_value;
	}
	else if(strcmp(alarm, "rx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].rx_power = severity_value;
	}
	else if(strcmp(alarm, "temperature") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].temperature = severity_value;
	}
	else if(strcmp(alarm, "low_tx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].low_tx_power = severity_value;
	}
	else if(strcmp(alarm, "high_tx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].high_tx_power = severity_value;
	}
	else if(strcmp(alarm, "low_rx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].low_rx_power = severity_value;
	}
	else if(strcmp(alarm, "high_rx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].high_rx_power = severity_value;
	}
	else if(strcmp(alarm, "rx_cdr_loss_of_lock") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].rx_cdr_loss_of_lock = severity_value;
	}
	else if(strcmp(alarm, "tx_cdr_loss_of_lock") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].tx_cdr_loss_of_lock = severity_value;
	}
	else if(strcmp(alarm, "laser_fault") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[1].laser_fault = severity_value;
	}

	// Set dirty flag
	pt_monitor_struct->sev_dirty_flag = 1;
}

/** @} */
