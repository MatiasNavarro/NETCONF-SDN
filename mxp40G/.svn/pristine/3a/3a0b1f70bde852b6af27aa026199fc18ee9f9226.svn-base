/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp4SeverityTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement xfp4SeverityTable get routines.
 * TODO:240:M: Implement xfp4SeverityTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp4SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp4SeverityTable is subid 4 of xfpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4, length: 12
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement xfp4SeverityTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param xfp4SeverityIndex_val
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
xfp4SeverityTable_indexes_set_tbl_idx(xfp4SeverityTable_mib_index *tbl_idx, long xfp4SeverityIndex_val)
{
    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityTable_indexes_set_tbl_idx","called\n"));

    /* xfp4SeverityIndex(1)/INTEGER32/ASN_INTEGER/long(long)//l/a/w/e/R/d/h */
    tbl_idx->xfp4SeverityIndex = xfp4SeverityIndex_val;
    

    return MFD_SUCCESS;
} /* xfp4SeverityTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
xfp4SeverityTable_indexes_set(xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long xfp4SeverityIndex_val)
{
    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityTable_indexes_set","called\n"));

    if(MFD_SUCCESS != xfp4SeverityTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , xfp4SeverityIndex_val
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != xfp4SeverityTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* xfp4SeverityTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityPresence
 * xfp4SeverityPresence is subid 2 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityPresence data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityPresence_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityPresence_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityPresence_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityPresence_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityPresence_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityPresence data.
 * copy (* xfp4SeverityPresence_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityPresence_val_ptr ) = rowreq_ctx->data.xfp4SeverityPresence;

    return MFD_SUCCESS;
} /* xfp4SeverityPresence_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityRxLoss
 * xfp4SeverityRxLoss is subid 3 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityRxLoss data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityRxLoss_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityRxLoss_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityRxLoss_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityRxLoss_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityRxLoss_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityRxLoss data.
 * copy (* xfp4SeverityRxLoss_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityRxLoss_val_ptr ) = rowreq_ctx->data.xfp4SeverityRxLoss;

    return MFD_SUCCESS;
} /* xfp4SeverityRxLoss_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityReady
 * xfp4SeverityReady is subid 4 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityReady data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityReady_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityReady_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityReady_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityReady_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityReady_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityReady data.
 * copy (* xfp4SeverityReady_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityReady_val_ptr ) = rowreq_ctx->data.xfp4SeverityReady;

    return MFD_SUCCESS;
} /* xfp4SeverityReady_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityTxPower
 * xfp4SeverityTxPower is subid 5 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityTxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityTxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityTxPower_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityTxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityTxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityTxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityTxPower data.
 * copy (* xfp4SeverityTxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityTxPower_val_ptr ) = rowreq_ctx->data.xfp4SeverityTxPower;

    return MFD_SUCCESS;
} /* xfp4SeverityTxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityRxPower
 * xfp4SeverityRxPower is subid 6 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityRxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityRxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityRxPower_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityRxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityRxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityRxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityRxPower data.
 * copy (* xfp4SeverityRxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityRxPower_val_ptr ) = rowreq_ctx->data.xfp4SeverityRxPower;

    return MFD_SUCCESS;
} /* xfp4SeverityRxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityTemperature
 * xfp4SeverityTemperature is subid 7 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityTemperature data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityTemperature_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityTemperature_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityTemperature_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityTemperature_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityTemperature_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityTemperature data.
 * copy (* xfp4SeverityTemperature_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityTemperature_val_ptr ) = rowreq_ctx->data.xfp4SeverityTemperature;

    return MFD_SUCCESS;
} /* xfp4SeverityTemperature_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityLowTxPower
 * xfp4SeverityLowTxPower is subid 8 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.8
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityLowTxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityLowTxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityLowTxPower_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityLowTxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityLowTxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityLowTxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityLowTxPower data.
 * copy (* xfp4SeverityLowTxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityLowTxPower_val_ptr ) = rowreq_ctx->data.xfp4SeverityLowTxPower;

    return MFD_SUCCESS;
} /* xfp4SeverityLowTxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityHighTxPower
 * xfp4SeverityHighTxPower is subid 9 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.9
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityHighTxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityHighTxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityHighTxPower_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityHighTxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityHighTxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityHighTxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityHighTxPower data.
 * copy (* xfp4SeverityHighTxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityHighTxPower_val_ptr ) = rowreq_ctx->data.xfp4SeverityHighTxPower;

    return MFD_SUCCESS;
} /* xfp4SeverityHighTxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityLowRxPower
 * xfp4SeverityLowRxPower is subid 10 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.10
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityLowRxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityLowRxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityLowRxPower_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityLowRxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityLowRxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityLowRxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityLowRxPower data.
 * copy (* xfp4SeverityLowRxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityLowRxPower_val_ptr ) = rowreq_ctx->data.xfp4SeverityLowRxPower;

    return MFD_SUCCESS;
} /* xfp4SeverityLowRxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityHighRxPower
 * xfp4SeverityHighRxPower is subid 11 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.11
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityHighRxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityHighRxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityHighRxPower_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityHighRxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityHighRxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityHighRxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityHighRxPower data.
 * copy (* xfp4SeverityHighRxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityHighRxPower_val_ptr ) = rowreq_ctx->data.xfp4SeverityHighRxPower;

    return MFD_SUCCESS;
} /* xfp4SeverityHighRxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityRxCdrLossOfLock
 * xfp4SeverityRxCdrLossOfLock is subid 12 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.12
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityRxCdrLossOfLock data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityRxCdrLossOfLock_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityRxCdrLossOfLock_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityRxCdrLossOfLock_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityRxCdrLossOfLock_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityRxCdrLossOfLock_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityRxCdrLossOfLock data.
 * copy (* xfp4SeverityRxCdrLossOfLock_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityRxCdrLossOfLock_val_ptr ) = rowreq_ctx->data.xfp4SeverityRxCdrLossOfLock;

    return MFD_SUCCESS;
} /* xfp4SeverityRxCdrLossOfLock_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityTxCdrLossOfLock
 * xfp4SeverityTxCdrLossOfLock is subid 13 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.13
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityTxCdrLossOfLock data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityTxCdrLossOfLock_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityTxCdrLossOfLock_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityTxCdrLossOfLock_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityTxCdrLossOfLock_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityTxCdrLossOfLock_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityTxCdrLossOfLock data.
 * copy (* xfp4SeverityTxCdrLossOfLock_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityTxCdrLossOfLock_val_ptr ) = rowreq_ctx->data.xfp4SeverityTxCdrLossOfLock;

    return MFD_SUCCESS;
} /* xfp4SeverityTxCdrLossOfLock_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp4SeverityEntry.xfp4SeverityLaserFault
 * xfp4SeverityLaserFault is subid 14 of xfp4SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.4.1.14
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp4SeverityLaserFault data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp4SeverityLaserFault_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp4SeverityLaserFault_get( xfp4SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp4SeverityLaserFault_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp4SeverityLaserFault_val_ptr );


    DEBUGMSGTL(("verbose:xfp4SeverityTable:xfp4SeverityLaserFault_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp4SeverityLaserFault data.
 * copy (* xfp4SeverityLaserFault_val_ptr ) from rowreq_ctx->data
 */
    (* xfp4SeverityLaserFault_val_ptr ) = rowreq_ctx->data.xfp4SeverityLaserFault;

    return MFD_SUCCESS;
} /* xfp4SeverityLaserFault_get */



/** @} */
