/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../txpDSPErrorsTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>

#include "txpDSPErrorsTable_data_access.h"

#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table txpDSPErrorsTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::txpDSPErrorsTable is subid 2 of txpDSP.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.9.3.2, length: 11
*/

/**
 * initialization for txpDSPErrorsTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param txpDSPErrorsTable_reg
 *        Pointer to txpDSPErrorsTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int
txpDSPErrorsTable_init_data(txpDSPErrorsTable_registration * txpDSPErrorsTable_reg)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_init_data","called\n"));

    /*
     * TODO:303:o: Initialize txpDSPErrorsTable data.
     */
    /*
    ***************************************************
    ***             START EXAMPLE CODE              ***
    ***---------------------------------------------***/
    /*
     * if you are the sole writer for the file, you could
     * open it here. However, as stated earlier, we are assuming
     * the worst case, which in this case means that the file is
     * written to by someone else, and might not even exist when
     * we start up. So we can't do anything here.
     */
    /*
    ***---------------------------------------------***
    ***              END  EXAMPLE CODE              ***
    ***************************************************/

    return MFD_SUCCESS;
} /* txpDSPErrorsTable_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 * @param  cache A pointer to a cache structure. You can set the timeout
 *         and other cache flags using this pointer.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 *  This is also the place to set up cache behavior. The default, to
 *  simply set the cache timeout, will work well with the default
 *  container. If you are using a custom container, you may want to
 *  look at the cache helper documentation to see if there are any
 *  flags you want to set.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void
txpDSPErrorsTable_container_init(netsnmp_container **container_ptr_ptr,
                             netsnmp_cache *cache)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_container_init","called\n"));
    
    if (NULL == container_ptr_ptr) {
        snmp_log(LOG_ERR,"bad container param to txpDSPErrorsTable_container_init\n");
        return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    *container_ptr_ptr = NULL;

    if (NULL == cache) {
        snmp_log(LOG_ERR,"bad cache param to txpDSPErrorsTable_container_init\n");
        return;
    }

    /*
     * TODO:345:A: Set up txpDSPErrorsTable cache properties.
     *
     * Also for advanced users, you can set parameters for the
     * cache. Do not change the magic pointer, as it is used
     * by the MFD helper. To completely disable caching, set
     * cache->enabled to 0.
     */
    cache->timeout = TXPDSPERRORSTABLE_CACHE_TIMEOUT; /* seconds */
} /* txpDSPErrorsTable_container_init */

/**
 * container shutdown
 *
 * @param container_ptr A pointer to the container.
 *
 *  This function is called at shutdown to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases.
 *
 *  This function is called before txpDSPErrorsTable_container_free().
 *
 * @remark
 *  This would also be a good place to do any cleanup needed
 *  for you data source. For example, closing a connection to another
 *  process that supplied the data, closing a database, etc.
 */
void
txpDSPErrorsTable_container_shutdown(netsnmp_container *container_ptr)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_container_shutdown","called\n"));
    
    if (NULL == container_ptr) {
        snmp_log(LOG_ERR,"bad params to txpDSPErrorsTable_container_shutdown\n");
        return;
    }

} /* txpDSPErrorsTable_container_shutdown */

/**
 * load initial data
 *
 * TODO:350:M: Implement txpDSPErrorsTable data load
 * This function will also be called by the cache helper to load
 * the container again (after the container free function has been
 * called to free the previous contents).
 *
 * @param container container to which items should be inserted
 *
 * @retval MFD_SUCCESS              : success.
 * @retval MFD_RESOURCE_UNAVAILABLE : Can't access data source
 * @retval MFD_ERROR                : other error.
 *
 *  This function is called to load the index(es) (and data, optionally)
 *  for the every row in the data set.
 *
 * @remark
 *  While loading the data, the only important thing is the indexes.
 *  If access to your data is cheap/fast (e.g. you have a pointer to a
 *  structure in memory), it would make sense to update the data here.
 *  If, however, the accessing the data invovles more work (e.g. parsing
 *  some other existing data, or peforming calculations to derive the data),
 *  then you can limit yourself to setting the indexes and saving any
 *  information you will need later. Then use the saved information in
 *  txpDSPErrorsTable_row_prep() for populating data.
 *
 * @note
 *  If you need consistency between rows (like you want statistics
 *  for each row to be from the same time frame), you should set all
 *  data here.
 *
 */
int
txpDSPErrorsTable_container_load(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_container_load","called\n"));

    txpDSPErrorsTable_rowreq_ctx *rowreq_ctx;
    size_t count = 0;

    /*
     * temporary storage for index values
     */
        /*
         * txpDSPErrorsIndex(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h
         */
   
    char txpDSPErrorsIndex[32];
    strcpy (txpDSPErrorsIndex, "txpDSPErrorsIndex");
    size_t txpDSPErrorsIndex_len = strlen(txpDSPErrorsIndex);

    shm_handler_create(pt_monitor_struct);

        /*
         * TODO:352:M: |   |-> set indexes in new txpDSPErrorsTable rowreq context.
         * data context will be set from the param (unless NULL,
         *      in which case a new data context will be allocated)
         */
        rowreq_ctx = txpDSPErrorsTable_allocate_rowreq_ctx(NULL);
        if (NULL == rowreq_ctx) {
            snmp_log(LOG_ERR, "memory allocation failed\n");
            return MFD_RESOURCE_UNAVAILABLE;
        }
        if(MFD_SUCCESS != txpDSPErrorsTable_indexes_set(rowreq_ctx
                               , txpDSPErrorsIndex, txpDSPErrorsIndex_len
               )) {
            snmp_log(LOG_ERR,"error setting index while loading "
                     "txpDSPErrorsTable data.\n");
            txpDSPErrorsTable_release_rowreq_ctx(rowreq_ctx);
        }

        /*
         * TODO:352:r: |   |-> populate txpDSPErrorsTable data context.
         * Populate data context here. (optionally, delay until row prep)
         */
    /*
     * TRANSIENT or semi-TRANSIENT data:
     * copy data or save any info needed to do it in row_prep.
     */
    /*
     * setup/save data for msexi
     * msexi(2)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for msexi data
     */
    
    char msexi[65535];
	sprintf(output_char, "%d", pt_monitor_struct->txp_struct.txp_mse.fields.mse_xi);
	strcpy (msexi, output_char);
	size_t msexi_len = strlen(msexi);
    
    rowreq_ctx->data.msexi_len = msexi_len* sizeof(msexi[0]);
    if ((NULL == rowreq_ctx->data.msexi) ||
        (rowreq_ctx->data.msexi_len <
         (msexi_len* sizeof(msexi[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (msexi)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.msexi, msexi, msexi_len* sizeof(msexi[0]) );
    
    /*
     * setup/save data for msexq
     * msexq(3)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for msexq data
     */
    
    char msexq[65535];
	sprintf(output_char, "%d", pt_monitor_struct->txp_struct.txp_mse.fields.mse_xq);
	strcpy (msexq, output_char);
	size_t msexq_len = strlen(msexq);
    
    rowreq_ctx->data.msexq_len = msexq_len* sizeof(msexq[0]);
    if ((NULL == rowreq_ctx->data.msexq) ||
        (rowreq_ctx->data.msexq_len <
         (msexq_len* sizeof(msexq[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (msexq)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.msexq, msexq, msexq_len* sizeof(msexq[0]) );
    
    /*
     * setup/save data for mseyi
     * mseyi(4)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for mseyi data
     */
    
    char mseyi[65535];
	sprintf(output_char, "%d", pt_monitor_struct->txp_struct.txp_mse.fields.mse_yi);
	strcpy (mseyi, output_char);
	size_t mseyi_len = strlen(mseyi);
    
    rowreq_ctx->data.mseyi_len = mseyi_len* sizeof(mseyi[0]);
    if ((NULL == rowreq_ctx->data.mseyi) ||
        (rowreq_ctx->data.mseyi_len <
         (mseyi_len* sizeof(mseyi[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (mseyi)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.mseyi, mseyi, mseyi_len* sizeof(mseyi[0]) );
    
    /*
     * setup/save data for mseyq
     * mseyq(5)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for mseyq data
     */
    
    char mseyq[65535];
	sprintf(output_char, "%d", pt_monitor_struct->txp_struct.txp_mse.fields.mse_yq);
	strcpy (mseyq, output_char);
	size_t mseyq_len = strlen(mseyq);
    
    rowreq_ctx->data.mseyq_len = mseyq_len* sizeof(mseyq[0]);
    if ((NULL == rowreq_ctx->data.mseyq) ||
        (rowreq_ctx->data.mseyq_len <
         (mseyq_len* sizeof(mseyq[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (mseyq)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.mseyq, mseyq, mseyq_len* sizeof(mseyq[0]) );
    
    /*
     * setup/save data for berestimate
     * berestimate(6)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for berestimate data
     */
    
    char berestimate[65535];
	sprintf(output_char, "%d", pt_monitor_struct->txp_struct.txp_ber_estimate);
	strcpy (berestimate, output_char);
	size_t berestimate_len = strlen(berestimate);
    
    rowreq_ctx->data.berestimate_len = berestimate_len* sizeof(berestimate[0]);
    if ((NULL == rowreq_ctx->data.berestimate) ||
        (rowreq_ctx->data.berestimate_len <
         (berestimate_len* sizeof(berestimate[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (berestimate)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.berestimate, berestimate, berestimate_len* sizeof(berestimate[0]) );

        /*
         * insert into table container
         */
        CONTAINER_INSERT(container, rowreq_ctx);
        ++count;
    
    DEBUGMSGT(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_container_load",
               "inserted %d records\n", count));

    return MFD_SUCCESS;
} /* txpDSPErrorsTable_container_load */

/**
 * container clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void
txpDSPErrorsTable_container_free(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_container_free","called\n"));

    /*
     * TODO:380:M: Free txpDSPErrorsTable container data.
     */
} /* txpDSPErrorsTable_container_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int
txpDSPErrorsTable_row_prep( txpDSPErrorsTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_row_prep","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
} /* txpDSPErrorsTable_row_prep */

/** @} */
