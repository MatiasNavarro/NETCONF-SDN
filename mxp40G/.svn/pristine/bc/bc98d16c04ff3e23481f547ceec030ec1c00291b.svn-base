/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp2Table.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement xfp2Table get routines.
 * TODO:240:M: Implement xfp2Table mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp2Table
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp2Table is subid 4 of mxpMIBObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.4, length: 9
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement xfp2Table data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param xfp2Index_ptr
 * @param xfp2Index_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
xfp2Table_indexes_set_tbl_idx(xfp2Table_mib_index *tbl_idx, char *xfp2Index_val_ptr,  size_t xfp2Index_val_ptr_len)
{
    DEBUGMSGTL(("verbose:xfp2Table:xfp2Table_indexes_set_tbl_idx","called\n"));

    /* xfp2Index(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->xfp2Index_len = sizeof(tbl_idx->xfp2Index)/sizeof(tbl_idx->xfp2Index[0]); /* max length */
    /*
     * make sure there is enough space for xfp2Index data
     */
    if ((NULL == tbl_idx->xfp2Index) ||
        (tbl_idx->xfp2Index_len <
         (xfp2Index_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp2Index_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->xfp2Index_len = xfp2Index_val_ptr_len;
    memcpy( tbl_idx->xfp2Index, xfp2Index_val_ptr, xfp2Index_val_ptr_len* sizeof(xfp2Index_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* xfp2Table_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
xfp2Table_indexes_set(xfp2Table_rowreq_ctx *rowreq_ctx, char *xfp2Index_val_ptr,  size_t xfp2Index_val_ptr_len)
{
    DEBUGMSGTL(("verbose:xfp2Table:xfp2Table_indexes_set","called\n"));

    if(MFD_SUCCESS != xfp2Table_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , xfp2Index_val_ptr, xfp2Index_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != xfp2Table_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* xfp2Table_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2Pres
 * xfp2Pres is subid 2 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.2
 * Description:
XFP2 Presence
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2Pres data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2Pres_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2Pres_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2Pres.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2Pres_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2Pres_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2Pres_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2Pres_val_ptr_ptr, size_t *xfp2Pres_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2Pres_val_ptr_ptr) && (NULL != *xfp2Pres_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2Pres_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2Pres_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2Pres data.
 * copy (* xfp2Pres_val_ptr_ptr ) data and (* xfp2Pres_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2Pres data
     */
    if ((NULL == (* xfp2Pres_val_ptr_ptr )) ||
        ((* xfp2Pres_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2Pres_len* sizeof(rowreq_ctx->data.xfp2Pres[0])))) {
        /*
         * allocate space for xfp2Pres data
         */
        (* xfp2Pres_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2Pres_len* sizeof(rowreq_ctx->data.xfp2Pres[0]));
        if(NULL == (* xfp2Pres_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2Pres)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2Pres_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2Pres_len* sizeof(rowreq_ctx->data.xfp2Pres[0]);
    memcpy( (* xfp2Pres_val_ptr_ptr ), rowreq_ctx->data.xfp2Pres, rowreq_ctx->data.xfp2Pres_len* sizeof(rowreq_ctx->data.xfp2Pres[0]) );

    return MFD_SUCCESS;
} /* xfp2Pres_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2Loss
 * xfp2Loss is subid 3 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.3
 * Description:
XFP2 Loss of Signal Indicator
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2Loss data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2Loss_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2Loss_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2Loss.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2Loss_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2Loss_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2Loss_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2Loss_val_ptr_ptr, size_t *xfp2Loss_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2Loss_val_ptr_ptr) && (NULL != *xfp2Loss_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2Loss_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2Loss_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2Loss data.
 * copy (* xfp2Loss_val_ptr_ptr ) data and (* xfp2Loss_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2Loss data
     */
    if ((NULL == (* xfp2Loss_val_ptr_ptr )) ||
        ((* xfp2Loss_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2Loss_len* sizeof(rowreq_ctx->data.xfp2Loss[0])))) {
        /*
         * allocate space for xfp2Loss data
         */
        (* xfp2Loss_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2Loss_len* sizeof(rowreq_ctx->data.xfp2Loss[0]));
        if(NULL == (* xfp2Loss_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2Loss)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2Loss_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2Loss_len* sizeof(rowreq_ctx->data.xfp2Loss[0]);
    memcpy( (* xfp2Loss_val_ptr_ptr ), rowreq_ctx->data.xfp2Loss, rowreq_ctx->data.xfp2Loss_len* sizeof(rowreq_ctx->data.xfp2Loss[0]) );

    return MFD_SUCCESS;
} /* xfp2Loss_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2Rdy
 * xfp2Rdy is subid 4 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.4
 * Description:
XFP2 Ready
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2Rdy data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2Rdy_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2Rdy_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2Rdy.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2Rdy_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2Rdy_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2Rdy_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2Rdy_val_ptr_ptr, size_t *xfp2Rdy_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2Rdy_val_ptr_ptr) && (NULL != *xfp2Rdy_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2Rdy_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2Rdy_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2Rdy data.
 * copy (* xfp2Rdy_val_ptr_ptr ) data and (* xfp2Rdy_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2Rdy data
     */
    if ((NULL == (* xfp2Rdy_val_ptr_ptr )) ||
        ((* xfp2Rdy_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2Rdy_len* sizeof(rowreq_ctx->data.xfp2Rdy[0])))) {
        /*
         * allocate space for xfp2Rdy data
         */
        (* xfp2Rdy_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2Rdy_len* sizeof(rowreq_ctx->data.xfp2Rdy[0]));
        if(NULL == (* xfp2Rdy_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2Rdy)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2Rdy_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2Rdy_len* sizeof(rowreq_ctx->data.xfp2Rdy[0]);
    memcpy( (* xfp2Rdy_val_ptr_ptr ), rowreq_ctx->data.xfp2Rdy, rowreq_ctx->data.xfp2Rdy_len* sizeof(rowreq_ctx->data.xfp2Rdy[0]) );

    return MFD_SUCCESS;
} /* xfp2Rdy_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2Int
 * xfp2Int is subid 5 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.5
 * Description:
XFP2 Interruption signal
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2Int data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2Int_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2Int_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2Int.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2Int_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2Int_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2Int_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2Int_val_ptr_ptr, size_t *xfp2Int_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2Int_val_ptr_ptr) && (NULL != *xfp2Int_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2Int_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2Int_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2Int data.
 * copy (* xfp2Int_val_ptr_ptr ) data and (* xfp2Int_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2Int data
     */
    if ((NULL == (* xfp2Int_val_ptr_ptr )) ||
        ((* xfp2Int_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2Int_len* sizeof(rowreq_ctx->data.xfp2Int[0])))) {
        /*
         * allocate space for xfp2Int data
         */
        (* xfp2Int_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2Int_len* sizeof(rowreq_ctx->data.xfp2Int[0]));
        if(NULL == (* xfp2Int_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2Int)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2Int_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2Int_len* sizeof(rowreq_ctx->data.xfp2Int[0]);
    memcpy( (* xfp2Int_val_ptr_ptr ), rowreq_ctx->data.xfp2Int, rowreq_ctx->data.xfp2Int_len* sizeof(rowreq_ctx->data.xfp2Int[0]) );

    return MFD_SUCCESS;
} /* xfp2Int_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2TxPow
 * xfp2TxPow is subid 6 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.6
 * Description:
XFP2 TX Power
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2TxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2TxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2TxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2TxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2TxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2TxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2TxPow_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2TxPow_val_ptr_ptr, size_t *xfp2TxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2TxPow_val_ptr_ptr) && (NULL != *xfp2TxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2TxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2TxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2TxPow data.
 * copy (* xfp2TxPow_val_ptr_ptr ) data and (* xfp2TxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2TxPow data
     */
    if ((NULL == (* xfp2TxPow_val_ptr_ptr )) ||
        ((* xfp2TxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2TxPow_len* sizeof(rowreq_ctx->data.xfp2TxPow[0])))) {
        /*
         * allocate space for xfp2TxPow data
         */
        (* xfp2TxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2TxPow_len* sizeof(rowreq_ctx->data.xfp2TxPow[0]));
        if(NULL == (* xfp2TxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2TxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2TxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2TxPow_len* sizeof(rowreq_ctx->data.xfp2TxPow[0]);
    memcpy( (* xfp2TxPow_val_ptr_ptr ), rowreq_ctx->data.xfp2TxPow, rowreq_ctx->data.xfp2TxPow_len* sizeof(rowreq_ctx->data.xfp2TxPow[0]) );

    return MFD_SUCCESS;
} /* xfp2TxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2RxPow
 * xfp2RxPow is subid 7 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.7
 * Description:
XFP2 RX Power
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2RxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2RxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2RxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2RxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2RxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2RxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2RxPow_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2RxPow_val_ptr_ptr, size_t *xfp2RxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2RxPow_val_ptr_ptr) && (NULL != *xfp2RxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2RxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2RxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2RxPow data.
 * copy (* xfp2RxPow_val_ptr_ptr ) data and (* xfp2RxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2RxPow data
     */
    if ((NULL == (* xfp2RxPow_val_ptr_ptr )) ||
        ((* xfp2RxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2RxPow_len* sizeof(rowreq_ctx->data.xfp2RxPow[0])))) {
        /*
         * allocate space for xfp2RxPow data
         */
        (* xfp2RxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2RxPow_len* sizeof(rowreq_ctx->data.xfp2RxPow[0]));
        if(NULL == (* xfp2RxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2RxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2RxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2RxPow_len* sizeof(rowreq_ctx->data.xfp2RxPow[0]);
    memcpy( (* xfp2RxPow_val_ptr_ptr ), rowreq_ctx->data.xfp2RxPow, rowreq_ctx->data.xfp2RxPow_len* sizeof(rowreq_ctx->data.xfp2RxPow[0]) );

    return MFD_SUCCESS;
} /* xfp2RxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2Temp
 * xfp2Temp is subid 8 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.8
 * Description:
XFP2Temperature
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2Temp data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2Temp_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2Temp_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2Temp.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2Temp_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2Temp_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2Temp_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2Temp_val_ptr_ptr, size_t *xfp2Temp_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2Temp_val_ptr_ptr) && (NULL != *xfp2Temp_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2Temp_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2Temp_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2Temp data.
 * copy (* xfp2Temp_val_ptr_ptr ) data and (* xfp2Temp_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2Temp data
     */
    if ((NULL == (* xfp2Temp_val_ptr_ptr )) ||
        ((* xfp2Temp_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2Temp_len* sizeof(rowreq_ctx->data.xfp2Temp[0])))) {
        /*
         * allocate space for xfp2Temp data
         */
        (* xfp2Temp_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2Temp_len* sizeof(rowreq_ctx->data.xfp2Temp[0]));
        if(NULL == (* xfp2Temp_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2Temp)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2Temp_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2Temp_len* sizeof(rowreq_ctx->data.xfp2Temp[0]);
    memcpy( (* xfp2Temp_val_ptr_ptr ), rowreq_ctx->data.xfp2Temp, rowreq_ctx->data.xfp2Temp_len* sizeof(rowreq_ctx->data.xfp2Temp[0]) );

    return MFD_SUCCESS;
} /* xfp2Temp_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2LowTxPow
 * xfp2LowTxPow is subid 9 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.9
 * Description:
XFP2 Low TX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2LowTxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2LowTxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2LowTxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2LowTxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2LowTxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2LowTxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2LowTxPow_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2LowTxPow_val_ptr_ptr, size_t *xfp2LowTxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2LowTxPow_val_ptr_ptr) && (NULL != *xfp2LowTxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2LowTxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2LowTxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2LowTxPow data.
 * copy (* xfp2LowTxPow_val_ptr_ptr ) data and (* xfp2LowTxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2LowTxPow data
     */
    if ((NULL == (* xfp2LowTxPow_val_ptr_ptr )) ||
        ((* xfp2LowTxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2LowTxPow_len* sizeof(rowreq_ctx->data.xfp2LowTxPow[0])))) {
        /*
         * allocate space for xfp2LowTxPow data
         */
        (* xfp2LowTxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2LowTxPow_len* sizeof(rowreq_ctx->data.xfp2LowTxPow[0]));
        if(NULL == (* xfp2LowTxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2LowTxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2LowTxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2LowTxPow_len* sizeof(rowreq_ctx->data.xfp2LowTxPow[0]);
    memcpy( (* xfp2LowTxPow_val_ptr_ptr ), rowreq_ctx->data.xfp2LowTxPow, rowreq_ctx->data.xfp2LowTxPow_len* sizeof(rowreq_ctx->data.xfp2LowTxPow[0]) );

    return MFD_SUCCESS;
} /* xfp2LowTxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2HighTxPow
 * xfp2HighTxPow is subid 10 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.10
 * Description:
XFP2 High TX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2HighTxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2HighTxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2HighTxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2HighTxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2HighTxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2HighTxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2HighTxPow_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2HighTxPow_val_ptr_ptr, size_t *xfp2HighTxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2HighTxPow_val_ptr_ptr) && (NULL != *xfp2HighTxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2HighTxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2HighTxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2HighTxPow data.
 * copy (* xfp2HighTxPow_val_ptr_ptr ) data and (* xfp2HighTxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2HighTxPow data
     */
    if ((NULL == (* xfp2HighTxPow_val_ptr_ptr )) ||
        ((* xfp2HighTxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2HighTxPow_len* sizeof(rowreq_ctx->data.xfp2HighTxPow[0])))) {
        /*
         * allocate space for xfp2HighTxPow data
         */
        (* xfp2HighTxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2HighTxPow_len* sizeof(rowreq_ctx->data.xfp2HighTxPow[0]));
        if(NULL == (* xfp2HighTxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2HighTxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2HighTxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2HighTxPow_len* sizeof(rowreq_ctx->data.xfp2HighTxPow[0]);
    memcpy( (* xfp2HighTxPow_val_ptr_ptr ), rowreq_ctx->data.xfp2HighTxPow, rowreq_ctx->data.xfp2HighTxPow_len* sizeof(rowreq_ctx->data.xfp2HighTxPow[0]) );

    return MFD_SUCCESS;
} /* xfp2HighTxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2LowRxPow
 * xfp2LowRxPow is subid 11 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.11
 * Description:
XFP2 High RX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2LowRxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2LowRxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2LowRxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2LowRxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2LowRxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2LowRxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2LowRxPow_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2LowRxPow_val_ptr_ptr, size_t *xfp2LowRxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2LowRxPow_val_ptr_ptr) && (NULL != *xfp2LowRxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2LowRxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2LowRxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2LowRxPow data.
 * copy (* xfp2LowRxPow_val_ptr_ptr ) data and (* xfp2LowRxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2LowRxPow data
     */
    if ((NULL == (* xfp2LowRxPow_val_ptr_ptr )) ||
        ((* xfp2LowRxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2LowRxPow_len* sizeof(rowreq_ctx->data.xfp2LowRxPow[0])))) {
        /*
         * allocate space for xfp2LowRxPow data
         */
        (* xfp2LowRxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2LowRxPow_len* sizeof(rowreq_ctx->data.xfp2LowRxPow[0]));
        if(NULL == (* xfp2LowRxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2LowRxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2LowRxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2LowRxPow_len* sizeof(rowreq_ctx->data.xfp2LowRxPow[0]);
    memcpy( (* xfp2LowRxPow_val_ptr_ptr ), rowreq_ctx->data.xfp2LowRxPow, rowreq_ctx->data.xfp2LowRxPow_len* sizeof(rowreq_ctx->data.xfp2LowRxPow[0]) );

    return MFD_SUCCESS;
} /* xfp2LowRxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2HighRxPow
 * xfp2HighRxPow is subid 12 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.12
 * Description:
XFP2 High RX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2HighRxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2HighRxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2HighRxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2HighRxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2HighRxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2HighRxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2HighRxPow_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2HighRxPow_val_ptr_ptr, size_t *xfp2HighRxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2HighRxPow_val_ptr_ptr) && (NULL != *xfp2HighRxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2HighRxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2HighRxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2HighRxPow data.
 * copy (* xfp2HighRxPow_val_ptr_ptr ) data and (* xfp2HighRxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2HighRxPow data
     */
    if ((NULL == (* xfp2HighRxPow_val_ptr_ptr )) ||
        ((* xfp2HighRxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2HighRxPow_len* sizeof(rowreq_ctx->data.xfp2HighRxPow[0])))) {
        /*
         * allocate space for xfp2HighRxPow data
         */
        (* xfp2HighRxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2HighRxPow_len* sizeof(rowreq_ctx->data.xfp2HighRxPow[0]));
        if(NULL == (* xfp2HighRxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2HighRxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2HighRxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2HighRxPow_len* sizeof(rowreq_ctx->data.xfp2HighRxPow[0]);
    memcpy( (* xfp2HighRxPow_val_ptr_ptr ), rowreq_ctx->data.xfp2HighRxPow, rowreq_ctx->data.xfp2HighRxPow_len* sizeof(rowreq_ctx->data.xfp2HighRxPow[0]) );

    return MFD_SUCCESS;
} /* xfp2HighRxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2RxCdrLol
 * xfp2RxCdrLol is subid 13 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.13
 * Description:
XFP2 RX Loss of Lock Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2RxCdrLol data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2RxCdrLol_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2RxCdrLol_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2RxCdrLol.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2RxCdrLol_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2RxCdrLol_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2RxCdrLol_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2RxCdrLol_val_ptr_ptr, size_t *xfp2RxCdrLol_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2RxCdrLol_val_ptr_ptr) && (NULL != *xfp2RxCdrLol_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2RxCdrLol_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2RxCdrLol_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2RxCdrLol data.
 * copy (* xfp2RxCdrLol_val_ptr_ptr ) data and (* xfp2RxCdrLol_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2RxCdrLol data
     */
    if ((NULL == (* xfp2RxCdrLol_val_ptr_ptr )) ||
        ((* xfp2RxCdrLol_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2RxCdrLol_len* sizeof(rowreq_ctx->data.xfp2RxCdrLol[0])))) {
        /*
         * allocate space for xfp2RxCdrLol data
         */
        (* xfp2RxCdrLol_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2RxCdrLol_len* sizeof(rowreq_ctx->data.xfp2RxCdrLol[0]));
        if(NULL == (* xfp2RxCdrLol_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2RxCdrLol)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2RxCdrLol_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2RxCdrLol_len* sizeof(rowreq_ctx->data.xfp2RxCdrLol[0]);
    memcpy( (* xfp2RxCdrLol_val_ptr_ptr ), rowreq_ctx->data.xfp2RxCdrLol, rowreq_ctx->data.xfp2RxCdrLol_len* sizeof(rowreq_ctx->data.xfp2RxCdrLol[0]) );

    return MFD_SUCCESS;
} /* xfp2RxCdrLol_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2TxCdrLol
 * xfp2TxCdrLol is subid 14 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.14
 * Description:
XFP2 TX Loss of Lock Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2TxCdrLol data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2TxCdrLol_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2TxCdrLol_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2TxCdrLol.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2TxCdrLol_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2TxCdrLol_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2TxCdrLol_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2TxCdrLol_val_ptr_ptr, size_t *xfp2TxCdrLol_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2TxCdrLol_val_ptr_ptr) && (NULL != *xfp2TxCdrLol_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2TxCdrLol_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2TxCdrLol_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2TxCdrLol data.
 * copy (* xfp2TxCdrLol_val_ptr_ptr ) data and (* xfp2TxCdrLol_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2TxCdrLol data
     */
    if ((NULL == (* xfp2TxCdrLol_val_ptr_ptr )) ||
        ((* xfp2TxCdrLol_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2TxCdrLol_len* sizeof(rowreq_ctx->data.xfp2TxCdrLol[0])))) {
        /*
         * allocate space for xfp2TxCdrLol data
         */
        (* xfp2TxCdrLol_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2TxCdrLol_len* sizeof(rowreq_ctx->data.xfp2TxCdrLol[0]));
        if(NULL == (* xfp2TxCdrLol_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2TxCdrLol)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2TxCdrLol_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2TxCdrLol_len* sizeof(rowreq_ctx->data.xfp2TxCdrLol[0]);
    memcpy( (* xfp2TxCdrLol_val_ptr_ptr ), rowreq_ctx->data.xfp2TxCdrLol, rowreq_ctx->data.xfp2TxCdrLol_len* sizeof(rowreq_ctx->data.xfp2TxCdrLol[0]) );

    return MFD_SUCCESS;
} /* xfp2TxCdrLol_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp2Entry.xfp2LasFault
 * xfp2LasFault is subid 15 of xfp2Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.4.1.15
 * Description:
XFP2 Laser Fault Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp2LasFault data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp2LasFault_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp2LasFault_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp2LasFault.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp2LasFault_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp2LasFault_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp2LasFault_get( xfp2Table_rowreq_ctx *rowreq_ctx, char **xfp2LasFault_val_ptr_ptr, size_t *xfp2LasFault_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp2LasFault_val_ptr_ptr) && (NULL != *xfp2LasFault_val_ptr_ptr));
   netsnmp_assert( NULL != xfp2LasFault_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp2Table:xfp2LasFault_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp2LasFault data.
 * copy (* xfp2LasFault_val_ptr_ptr ) data and (* xfp2LasFault_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp2LasFault data
     */
    if ((NULL == (* xfp2LasFault_val_ptr_ptr )) ||
        ((* xfp2LasFault_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp2LasFault_len* sizeof(rowreq_ctx->data.xfp2LasFault[0])))) {
        /*
         * allocate space for xfp2LasFault data
         */
        (* xfp2LasFault_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp2LasFault_len* sizeof(rowreq_ctx->data.xfp2LasFault[0]));
        if(NULL == (* xfp2LasFault_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp2LasFault)\n");
            return MFD_ERROR;
        }
    }
    (* xfp2LasFault_val_ptr_len_ptr ) = rowreq_ctx->data.xfp2LasFault_len* sizeof(rowreq_ctx->data.xfp2LasFault[0]);
    memcpy( (* xfp2LasFault_val_ptr_ptr ), rowreq_ctx->data.xfp2LasFault, rowreq_ctx->data.xfp2LasFault_len* sizeof(rowreq_ctx->data.xfp2LasFault[0]) );

    return MFD_SUCCESS;
} /* xfp2LasFault_get */



/** @} */
