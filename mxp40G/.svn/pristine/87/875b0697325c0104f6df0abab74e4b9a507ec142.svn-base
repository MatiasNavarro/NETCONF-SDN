/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef TPCLIENT1SEVERITYTABLE_H
#define TPCLIENT1SEVERITYTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(FTNC-MIB)
config_require(FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_interface)
config_require(FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_data_access)
config_require(FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_data_get)
config_require(FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for tpClient1SeverityTable */
#include "FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_oids.h"

/* enum definions */
#include "FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_tpClient1SeverityTable(void);
void shutdown_tpClient1SeverityTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table tpClient1SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::tpClient1SeverityTable is subid 2 of tpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.2, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review tpClient1SeverityTable registration context.
     */
typedef netsnmp_data_list tpClient1SeverityTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review tpClient1SeverityTable data context structure.
 * This structure is used to represent the data for tpClient1SeverityTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * tpClient1SeverityTable.
 */
typedef struct tpClient1SeverityTable_data_s {
    
        /*
         * tpClient1SeverityFramerFsmms(2)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityFramerFsmms;
    
        /*
         * tpClient1SeverityFramerFssusts(3)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityFramerFssusts;
    
        /*
         * tpClient1SeverityFramerSoof(4)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityFramerSoof;
    
        /*
         * tpClient1SeverityFramerSlof(5)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityFramerSlof;
    
        /*
         * tpClient1SeverityFramerSif(6)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityFramerSif;
    
        /*
         * tpClient1SeverityFramerFst(7)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityFramerFst;
    
        /*
         * tpClient1SeverityLosstatLosf(8)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityLosstatLosf;
    
        /*
         * tpClient1SeverityPathmonAccstat(9)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityPathmonAccstat;
    
        /*
         * tpClient1SeverityPathmonDais(10)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityPathmonDais;
    
        /*
         * tpClient1SeverityPathmonDbdi(11)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityPathmonDbdi;
    
        /*
         * tpClient1SeverityPathmonDlck(12)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityPathmonDlck;
    
        /*
         * tpClient1SeverityPathmonMsiunst(13)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeverityPathmonMsiunst;
    
        /*
         * tpClient1SeveritySecmonBipsfs(14)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeveritySecmonBipsfs;
    
        /*
         * tpClient1SeveritySecmonDbdi(15)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeveritySecmonDbdi;
    
        /*
         * tpClient1SeveritySecmonDiae(16)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeveritySecmonDiae;
    
        /*
         * tpClient1SeveritySecmonFlom(17)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeveritySecmonFlom;
    
        /*
         * tpClient1SeveritySecmonLom(18)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   tpClient1SeveritySecmonLom;
    
} tpClient1SeverityTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review tpClient1SeverityTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef tpClient1SeverityTable_data tpClient1SeverityTable_undo_data;

/*
 * TODO:120:r: |-> Review tpClient1SeverityTable mib index.
 * This structure is used to represent the index for tpClient1SeverityTable.
 */
typedef struct tpClient1SeverityTable_mib_index_s {

        /*
         * tpClient1SeverityIndex(1)/INTEGER32/ASN_INTEGER/long(long)//l/a/w/e/R/d/h
         */
   long   tpClient1SeverityIndex;


} tpClient1SeverityTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review tpClient1SeverityTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_tpClient1SeverityTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review tpClient1SeverityTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * tpClient1SeverityTable_rowreq_ctx pointer.
 */
typedef struct tpClient1SeverityTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_tpClient1SeverityTable_IDX_LEN];
    
    tpClient1SeverityTable_mib_index        tbl_idx;
    
    tpClient1SeverityTable_data              data;
    tpClient1SeverityTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to tpClient1SeverityTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *tpClient1SeverityTable_data_list;

} tpClient1SeverityTable_rowreq_ctx;

typedef struct tpClient1SeverityTable_ref_rowreq_ctx_s {
    tpClient1SeverityTable_rowreq_ctx *rowreq_ctx;
} tpClient1SeverityTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int tpClient1SeverityTable_pre_request(tpClient1SeverityTable_registration * user_context);
    int tpClient1SeverityTable_post_request(tpClient1SeverityTable_registration * user_context,
        int rc);

    int tpClient1SeverityTable_rowreq_ctx_init(tpClient1SeverityTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void tpClient1SeverityTable_rowreq_ctx_cleanup(tpClient1SeverityTable_rowreq_ctx *rowreq_ctx);

    int tpClient1SeverityTable_commit(tpClient1SeverityTable_rowreq_ctx * rowreq_ctx);

    tpClient1SeverityTable_rowreq_ctx *
                  tpClient1SeverityTable_row_find_by_mib_index(tpClient1SeverityTable_mib_index *mib_idx);

extern const oid tpClient1SeverityTable_oid[];
extern const int tpClient1SeverityTable_oid_size;


#include "FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_interface.h"
#include "FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_data_access.h"
#include "FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_data_get.h"
#include "FTNC-MIB/tpClient1SeverityTable/tpClient1SeverityTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* TPCLIENT1SEVERITYTABLE_H */
/** @} */
