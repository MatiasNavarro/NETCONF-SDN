/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp3SeverityTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement xfp3SeverityTable get routines.
 * TODO:240:M: Implement xfp3SeverityTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp3SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp3SeverityTable is subid 3 of xfpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3, length: 12
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement xfp3SeverityTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param xfp3SeverityIndex_val
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
xfp3SeverityTable_indexes_set_tbl_idx(xfp3SeverityTable_mib_index *tbl_idx, long xfp3SeverityIndex_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTable_indexes_set_tbl_idx","called\n"));

    /* xfp3SeverityIndex(1)/INTEGER32/ASN_INTEGER/long(long)//l/a/w/e/R/d/h */
    tbl_idx->xfp3SeverityIndex = xfp3SeverityIndex_val;
    

    return MFD_SUCCESS;
} /* xfp3SeverityTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
xfp3SeverityTable_indexes_set(xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityIndex_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTable_indexes_set","called\n"));

    if(MFD_SUCCESS != xfp3SeverityTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , xfp3SeverityIndex_val
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != xfp3SeverityTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* xfp3SeverityTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityPresence
 * xfp3SeverityPresence is subid 2 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityPresence data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityPresence_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityPresence_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityPresence_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityPresence_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityPresence_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityPresence data.
 * copy (* xfp3SeverityPresence_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityPresence_val_ptr ) = rowreq_ctx->data.xfp3SeverityPresence;

    return MFD_SUCCESS;
} /* xfp3SeverityPresence_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityRxLoss
 * xfp3SeverityRxLoss is subid 3 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityRxLoss data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityRxLoss_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityRxLoss_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityRxLoss_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityRxLoss_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxLoss_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityRxLoss data.
 * copy (* xfp3SeverityRxLoss_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityRxLoss_val_ptr ) = rowreq_ctx->data.xfp3SeverityRxLoss;

    return MFD_SUCCESS;
} /* xfp3SeverityRxLoss_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityReady
 * xfp3SeverityReady is subid 4 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityReady data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityReady_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityReady_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityReady_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityReady_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityReady_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityReady data.
 * copy (* xfp3SeverityReady_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityReady_val_ptr ) = rowreq_ctx->data.xfp3SeverityReady;

    return MFD_SUCCESS;
} /* xfp3SeverityReady_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityTxPower
 * xfp3SeverityTxPower is subid 5 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityTxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityTxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityTxPower_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityTxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityTxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityTxPower data.
 * copy (* xfp3SeverityTxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityTxPower_val_ptr ) = rowreq_ctx->data.xfp3SeverityTxPower;

    return MFD_SUCCESS;
} /* xfp3SeverityTxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityRxPower
 * xfp3SeverityRxPower is subid 6 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityRxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityRxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityRxPower_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityRxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityRxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityRxPower data.
 * copy (* xfp3SeverityRxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityRxPower_val_ptr ) = rowreq_ctx->data.xfp3SeverityRxPower;

    return MFD_SUCCESS;
} /* xfp3SeverityRxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityTemperature
 * xfp3SeverityTemperature is subid 7 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityTemperature data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityTemperature_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityTemperature_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityTemperature_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityTemperature_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTemperature_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityTemperature data.
 * copy (* xfp3SeverityTemperature_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityTemperature_val_ptr ) = rowreq_ctx->data.xfp3SeverityTemperature;

    return MFD_SUCCESS;
} /* xfp3SeverityTemperature_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityLowTxPower
 * xfp3SeverityLowTxPower is subid 8 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.8
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityLowTxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityLowTxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityLowTxPower_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityLowTxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityLowTxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowTxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityLowTxPower data.
 * copy (* xfp3SeverityLowTxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityLowTxPower_val_ptr ) = rowreq_ctx->data.xfp3SeverityLowTxPower;

    return MFD_SUCCESS;
} /* xfp3SeverityLowTxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityHighTxPower
 * xfp3SeverityHighTxPower is subid 9 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.9
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityHighTxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityHighTxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityHighTxPower_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityHighTxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityHighTxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighTxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityHighTxPower data.
 * copy (* xfp3SeverityHighTxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityHighTxPower_val_ptr ) = rowreq_ctx->data.xfp3SeverityHighTxPower;

    return MFD_SUCCESS;
} /* xfp3SeverityHighTxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityLowRxPower
 * xfp3SeverityLowRxPower is subid 10 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.10
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityLowRxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityLowRxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityLowRxPower_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityLowRxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityLowRxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowRxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityLowRxPower data.
 * copy (* xfp3SeverityLowRxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityLowRxPower_val_ptr ) = rowreq_ctx->data.xfp3SeverityLowRxPower;

    return MFD_SUCCESS;
} /* xfp3SeverityLowRxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityHighRxPower
 * xfp3SeverityHighRxPower is subid 11 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.11
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityHighRxPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityHighRxPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityHighRxPower_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityHighRxPower_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityHighRxPower_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighRxPower_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityHighRxPower data.
 * copy (* xfp3SeverityHighRxPower_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityHighRxPower_val_ptr ) = rowreq_ctx->data.xfp3SeverityHighRxPower;

    return MFD_SUCCESS;
} /* xfp3SeverityHighRxPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityRxCdrLossOfLock
 * xfp3SeverityRxCdrLossOfLock is subid 12 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.12
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityRxCdrLossOfLock data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityRxCdrLossOfLock_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityRxCdrLossOfLock_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityRxCdrLossOfLock_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityRxCdrLossOfLock_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxCdrLossOfLock_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityRxCdrLossOfLock data.
 * copy (* xfp3SeverityRxCdrLossOfLock_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityRxCdrLossOfLock_val_ptr ) = rowreq_ctx->data.xfp3SeverityRxCdrLossOfLock;

    return MFD_SUCCESS;
} /* xfp3SeverityRxCdrLossOfLock_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityTxCdrLossOfLock
 * xfp3SeverityTxCdrLossOfLock is subid 13 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.13
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityTxCdrLossOfLock data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityTxCdrLossOfLock_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityTxCdrLossOfLock_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityTxCdrLossOfLock_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityTxCdrLossOfLock_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxCdrLossOfLock_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityTxCdrLossOfLock data.
 * copy (* xfp3SeverityTxCdrLossOfLock_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityTxCdrLossOfLock_val_ptr ) = rowreq_ctx->data.xfp3SeverityTxCdrLossOfLock;

    return MFD_SUCCESS;
} /* xfp3SeverityTxCdrLossOfLock_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityLaserFault
 * xfp3SeverityLaserFault is subid 14 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.14
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the xfp3SeverityLaserFault data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityLaserFault_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int
xfp3SeverityLaserFault_get( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long * xfp3SeverityLaserFault_val_ptr )
{
   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != xfp3SeverityLaserFault_val_ptr );


    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLaserFault_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3SeverityLaserFault data.
 * copy (* xfp3SeverityLaserFault_val_ptr ) from rowreq_ctx->data
 */
    (* xfp3SeverityLaserFault_val_ptr ) = rowreq_ctx->data.xfp3SeverityLaserFault;

    return MFD_SUCCESS;
} /* xfp3SeverityLaserFault_get */



/** @} */
