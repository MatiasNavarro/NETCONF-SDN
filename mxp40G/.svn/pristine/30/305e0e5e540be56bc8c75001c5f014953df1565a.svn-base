/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../txpBandTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement txpBandTable get routines.
 * TODO:240:M: Implement txpBandTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table txpBandTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::txpBandTable is subid 4 of txpMiscellaneous.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.9.2.4, length: 11
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement txpBandTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param txpBandIndex_ptr
 * @param txpBandIndex_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
txpBandTable_indexes_set_tbl_idx(txpBandTable_mib_index *tbl_idx, char *txpBandIndex_val_ptr,  size_t txpBandIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpBandTable:txpBandTable_indexes_set_tbl_idx","called\n"));

    /* txpBandIndex(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->txpBandIndex_len = sizeof(tbl_idx->txpBandIndex)/sizeof(tbl_idx->txpBandIndex[0]); /* max length */
    /*
     * make sure there is enough space for txpBandIndex data
     */
    if ((NULL == tbl_idx->txpBandIndex) ||
        (tbl_idx->txpBandIndex_len <
         (txpBandIndex_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (txpBandIndex_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->txpBandIndex_len = txpBandIndex_val_ptr_len;
    memcpy( tbl_idx->txpBandIndex, txpBandIndex_val_ptr, txpBandIndex_val_ptr_len* sizeof(txpBandIndex_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* txpBandTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
txpBandTable_indexes_set(txpBandTable_rowreq_ctx *rowreq_ctx, char *txpBandIndex_val_ptr,  size_t txpBandIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpBandTable:txpBandTable_indexes_set","called\n"));

    if(MFD_SUCCESS != txpBandTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , txpBandIndex_val_ptr, txpBandIndex_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != txpBandTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* txpBandTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::txpBandEntry.txpTxLaserITUBand
 * txpTxLaserITUBand is subid 2 of txpBandEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.2.4.1.2
 * Description:
txp40G Tx laser ITU Band.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpTxLaserITUBand data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpTxLaserITUBand_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpTxLaserITUBand_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpTxLaserITUBand.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpTxLaserITUBand_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpTxLaserITUBand_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpTxLaserITUBand_get( txpBandTable_rowreq_ctx *rowreq_ctx, char **txpTxLaserITUBand_val_ptr_ptr, size_t *txpTxLaserITUBand_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpTxLaserITUBand_val_ptr_ptr) && (NULL != *txpTxLaserITUBand_val_ptr_ptr));
   netsnmp_assert( NULL != txpTxLaserITUBand_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpBandTable:txpTxLaserITUBand_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpTxLaserITUBand data.
 * copy (* txpTxLaserITUBand_val_ptr_ptr ) data and (* txpTxLaserITUBand_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpTxLaserITUBand data
     */
    if ((NULL == (* txpTxLaserITUBand_val_ptr_ptr )) ||
        ((* txpTxLaserITUBand_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpTxLaserITUBand_len* sizeof(rowreq_ctx->data.txpTxLaserITUBand[0])))) {
        /*
         * allocate space for txpTxLaserITUBand data
         */
        (* txpTxLaserITUBand_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpTxLaserITUBand_len* sizeof(rowreq_ctx->data.txpTxLaserITUBand[0]));
        if(NULL == (* txpTxLaserITUBand_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpTxLaserITUBand)\n");
            return MFD_ERROR;
        }
    }
    (* txpTxLaserITUBand_val_ptr_len_ptr ) = rowreq_ctx->data.txpTxLaserITUBand_len* sizeof(rowreq_ctx->data.txpTxLaserITUBand[0]);
    memcpy( (* txpTxLaserITUBand_val_ptr_ptr ), rowreq_ctx->data.txpTxLaserITUBand, rowreq_ctx->data.txpTxLaserITUBand_len* sizeof(rowreq_ctx->data.txpTxLaserITUBand[0]) );

    return MFD_SUCCESS;
} /* txpTxLaserITUBand_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpBandEntry.txpRxLaserITUBand
 * txpRxLaserITUBand is subid 3 of txpBandEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.2.4.1.3
 * Description:
txp40G Rx laser ITU Band.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpRxLaserITUBand data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpRxLaserITUBand_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpRxLaserITUBand_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpRxLaserITUBand.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpRxLaserITUBand_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpRxLaserITUBand_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpRxLaserITUBand_get( txpBandTable_rowreq_ctx *rowreq_ctx, char **txpRxLaserITUBand_val_ptr_ptr, size_t *txpRxLaserITUBand_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpRxLaserITUBand_val_ptr_ptr) && (NULL != *txpRxLaserITUBand_val_ptr_ptr));
   netsnmp_assert( NULL != txpRxLaserITUBand_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpBandTable:txpRxLaserITUBand_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpRxLaserITUBand data.
 * copy (* txpRxLaserITUBand_val_ptr_ptr ) data and (* txpRxLaserITUBand_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpRxLaserITUBand data
     */
    if ((NULL == (* txpRxLaserITUBand_val_ptr_ptr )) ||
        ((* txpRxLaserITUBand_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpRxLaserITUBand_len* sizeof(rowreq_ctx->data.txpRxLaserITUBand[0])))) {
        /*
         * allocate space for txpRxLaserITUBand data
         */
        (* txpRxLaserITUBand_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpRxLaserITUBand_len* sizeof(rowreq_ctx->data.txpRxLaserITUBand[0]));
        if(NULL == (* txpRxLaserITUBand_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpRxLaserITUBand)\n");
            return MFD_ERROR;
        }
    }
    (* txpRxLaserITUBand_val_ptr_len_ptr ) = rowreq_ctx->data.txpRxLaserITUBand_len* sizeof(rowreq_ctx->data.txpRxLaserITUBand[0]);
    memcpy( (* txpRxLaserITUBand_val_ptr_ptr ), rowreq_ctx->data.txpRxLaserITUBand, rowreq_ctx->data.txpRxLaserITUBand_len* sizeof(rowreq_ctx->data.txpRxLaserITUBand[0]) );

    return MFD_SUCCESS;
} /* txpRxLaserITUBand_get */



/** @} */
