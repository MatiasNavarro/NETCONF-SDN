/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 *
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "tpClient3SeverityTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>
#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @defgroup data_set data_set: Routines to set data
 *
 * These routines are used to set the value for individual objects. The
 * row context is passed, along with the new value.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table tpClient3SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::tpClient3SeverityTable is subid 4 of tpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4, length: 12
*/
    /*
     * NOTE: if you update this chart, please update the versions in
     *       local/mib2c-conf.d/parent-set.m2i
     *       agent/mibgroup/helpers/baby_steps.c
     * while you're at it.
     */
    /*
     ***********************************************************************
     * Baby Steps Flow Chart (2004.06.05)                                  *
     *                                                                     *
     * +--------------+    +================+    U = unconditional path    *
     * |optional state|    ||required state||    S = path for success      *
     * +--------------+    +================+    E = path for error        *
     ***********************************************************************
     *
     *                        +--------------+
     *                        |     pre      |
     *                        |   request    |
     *                        +--------------+
     *                               | U
     *                        +==============+
     *       +----------------||  object    ||
     *       |              E ||  lookup    ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |              E ||   check    ||
     *       |<---------------||   values   ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |       +<-------||   undo     ||
     *       |       |      E ||   setup    ||
     *       |       |        +==============+
     *       |       |               | S
     *       |       |        +==============+
     *       |       |        ||    set     ||-------------------------->+
     *       |       |        ||   value    || E                         |
     *       |       |        +==============+                           |
     *       |       |               | S                                 |
     *       |       |        +--------------+                           |
     *       |       |        |    check     |-------------------------->|
     *       |       |        |  consistency | E                         |
     *       |       |        +--------------+                           |
     *       |       |               | S                                 |
     *       |       |        +==============+         +==============+  |
     *       |       |        ||   commit   ||-------->||     undo   ||  |
     *       |       |        ||            || E       ||    commit  ||  |
     *       |       |        +==============+         +==============+  |
     *       |       |               | S                     U |<--------+
     *       |       |        +--------------+         +==============+
     *       |       |        | irreversible |         ||    undo    ||
     *       |       |        |    commit    |         ||     set    ||
     *       |       |        +--------------+         +==============+
     *       |       |               | U                     U |
     *       |       +-------------->|<------------------------+
     *       |                +==============+
     *       |                ||   undo     ||
     *       |                ||  cleanup   ||
     *       |                +==============+
     *       +---------------------->| U
     *                        +--------------+
     *                        |    post      |
     *                        |   request    |
     *                        +--------------+
     *
     */

/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 *
 * Note that the undo context has been allocated with
 * tpClient3SeverityTable_allocate_data(), but may need extra
 * initialization similar to what you may have done in
 * tpClient3SeverityTable_rowreq_ctx_init().
 * Note that an individual node's undo_setup function will only be called
 * if that node is being set to a new value.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in the node's undo_setup
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
tpClient3SeverityTable_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityTable_undo_setup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> Setup tpClient3SeverityTable undo.
     * set up tpClient3SeverityTable undo information, in preparation for a set.
     * Undo storage is in (* tpClient3SeveritySecmonLom_val_ptr )*
     */

    return rc;
} /* tpClient3SeverityTable_undo_setup */

/**
 * Undo a set request.
 *
 * This function will be called before the individual node undo
 * functions are called. If you need to do any undo that is not
 * related to a specific column, you can do it here.
 *
 * Note that an individual node's undo function will only be called
 * if that node is being set to a new value.
 *
 * If there is anything  specific to a particular column (e.g. releasing
 * memory for a string), you should do that setup in the node's undo
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
tpClient3SeverityTable_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityTable_undo","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> tpClient3SeverityTable undo.
     * tpClient3SeverityTable undo information, in response to a failed set.
     * Undo storage is in (* tpClient3SeveritySecmonLom_val_ptr )*
     */

    return rc;
} /* tpClient3SeverityTable_undo_setup */

/**
 * Cleanup up context undo information.
 *
 * This function will be called after set/commit processing. If you
 * allocated any resources in undo_setup, this is the place to release
 * those resources.
 *
 * This function is called regardless of the success or failure of the set
 * request. If you need to perform different steps for cleanup depending
 * on success or failure, you can add a flag to the rowreq_ctx.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
tpClient3SeverityTable_undo_cleanup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityTable_undo_cleanup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:452:M: |-> Cleanup tpClient3SeverityTable undo.
     * Undo storage is in (* tpClient3SeveritySecmonLom_val_ptr )*
     */

    return rc;
} /* tpClient3SeverityTable_undo_cleanup */

/**
 * commit new values.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * tpClient3SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param tpClient3SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
tpClient3SeverityTable_commit( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;
    int             save_flags;

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityTable_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * save flags, then clear until we actually do something
     */
    save_flags = rowreq_ctx->column_set_flags;
    rowreq_ctx->column_set_flags = 0;

    /*
     * commit tpClient3SeverityTable data
     * 1) check the column's flag in save_flags to see if it was set.
     * 2) clear the flag when you handle that column
     * 3) set the column's flag in column_set_flags if it needs undo
     *    processing in case of a failure.
     */
    if (save_flags & COLUMN_TPCLIENT3SEVERITYFRAMERFSMMS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYFRAMERFSMMS_FLAG; /* clear tpClient3SeverityFramerFsmms */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityFramerFsmms.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityFramerFsmms commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityFramerFsmms
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYFRAMERFSMMS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYFRAMERFSSUSTS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYFRAMERFSSUSTS_FLAG; /* clear tpClient3SeverityFramerFssusts */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityFramerFssusts.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityFramerFssusts commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityFramerFssusts
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYFRAMERFSSUSTS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYFRAMERSOOF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYFRAMERSOOF_FLAG; /* clear tpClient3SeverityFramerSoof */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityFramerSoof.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityFramerSoof commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityFramerSoof
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYFRAMERSOOF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYFRAMERSLOF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYFRAMERSLOF_FLAG; /* clear tpClient3SeverityFramerSlof */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityFramerSlof.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityFramerSlof commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityFramerSlof
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYFRAMERSLOF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYFRAMERSIF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYFRAMERSIF_FLAG; /* clear tpClient3SeverityFramerSif */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityFramerSif.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityFramerSif commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityFramerSif
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYFRAMERSIF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYFRAMERFST_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYFRAMERFST_FLAG; /* clear tpClient3SeverityFramerFst */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityFramerFst.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityFramerFst commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityFramerFst
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYFRAMERFST_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYLOSSTATLOSF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYLOSSTATLOSF_FLAG; /* clear tpClient3SeverityLosstatLosf */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityLosstatLosf.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityLosstatLosf commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityLosstatLosf
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYLOSSTATLOSF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYPATHMONACCSTAT_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYPATHMONACCSTAT_FLAG; /* clear tpClient3SeverityPathmonAccstat */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityPathmonAccstat.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityPathmonAccstat commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityPathmonAccstat
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYPATHMONACCSTAT_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYPATHMONDAIS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYPATHMONDAIS_FLAG; /* clear tpClient3SeverityPathmonDais */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityPathmonDais.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityPathmonDais commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityPathmonDais
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYPATHMONDAIS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYPATHMONDBDI_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYPATHMONDBDI_FLAG; /* clear tpClient3SeverityPathmonDbdi */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityPathmonDbdi.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityPathmonDbdi commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityPathmonDbdi
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYPATHMONDBDI_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYPATHMONDLCK_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYPATHMONDLCK_FLAG; /* clear tpClient3SeverityPathmonDlck */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityPathmonDlck.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityPathmonDlck commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityPathmonDlck
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYPATHMONDLCK_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYPATHMONMSIUNST_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYPATHMONMSIUNST_FLAG; /* clear tpClient3SeverityPathmonMsiunst */
       /*
        * TODO:482:o: |-> commit column tpClient3SeverityPathmonMsiunst.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeverityPathmonMsiunst commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeverityPathmonMsiunst
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYPATHMONMSIUNST_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYSECMONBIPSFS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYSECMONBIPSFS_FLAG; /* clear tpClient3SeveritySecmonBipsfs */
       /*
        * TODO:482:o: |-> commit column tpClient3SeveritySecmonBipsfs.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeveritySecmonBipsfs commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeveritySecmonBipsfs
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYSECMONBIPSFS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYSECMONDBDI_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYSECMONDBDI_FLAG; /* clear tpClient3SeveritySecmonDbdi */
       /*
        * TODO:482:o: |-> commit column tpClient3SeveritySecmonDbdi.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeveritySecmonDbdi commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeveritySecmonDbdi
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYSECMONDBDI_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYSECMONDIAE_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYSECMONDIAE_FLAG; /* clear tpClient3SeveritySecmonDiae */
       /*
        * TODO:482:o: |-> commit column tpClient3SeveritySecmonDiae.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeveritySecmonDiae commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeveritySecmonDiae
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYSECMONDIAE_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYSECMONFLOM_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYSECMONFLOM_FLAG; /* clear tpClient3SeveritySecmonFlom */
       /*
        * TODO:482:o: |-> commit column tpClient3SeveritySecmonFlom.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeveritySecmonFlom commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeveritySecmonFlom
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYSECMONFLOM_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT3SEVERITYSECMONLOM_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT3SEVERITYSECMONLOM_FLAG; /* clear tpClient3SeveritySecmonLom */
       /*
        * TODO:482:o: |-> commit column tpClient3SeveritySecmonLom.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient3SeverityTable column tpClient3SeveritySecmonLom commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient3SeveritySecmonLom
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT3SEVERITYSECMONLOM_FLAG;
       }
    }

    /*
     * if we successfully commited this row, set the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags |= MFD_ROW_DIRTY;
    }

    if (save_flags) {
       snmp_log(LOG_ERR, "unhandled columns (0x%x) in commit\n", save_flags);
       return MFD_ERROR;
    }

    return rc;
} /* tpClient3SeverityTable_commit */

/**
 * undo commit new values.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * tpClient3SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param tpClient3SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
tpClient3SeverityTable_undo_commit( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityTable_undo_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:485:M: |-> Undo tpClient3SeverityTable commit.
     * check the column's flag in rowreq_ctx->column_set_flags to see
     * if it was set during commit, then undo it.
     *
     * eg: if (rowreq_ctx->column_set_flags & COLUMN__FLAG) {}
     */

    
    /*
     * if we successfully un-commited this row, clear the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags &= ~MFD_ROW_DIRTY;
    }

    return rc;
} /* tpClient3SeverityTable_undo_commit */

/*
 * TODO:440:M: Implement tpClient3SeverityTable node value checks.
 * TODO:450:M: Implement tpClient3SeverityTable undo functions.
 * TODO:460:M: Implement tpClient3SeverityTable set functions.
 * TODO:480:M: Implement tpClient3SeverityTable commit functions.
 */
/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityFramerFsmms
 * tpClient3SeverityFramerFsmms is subid 2 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityFramerFsmms_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityFramerFsmms_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerFsmms_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFsmms_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityFramerFsmms value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityFramerFsmms value not illegal */
} /* tpClient3SeverityFramerFsmms_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityFramerFsmms_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFsmms_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityFramerFsmms undo.
     */
    /*
     * copy tpClient3SeverityFramerFsmms data
     * set rowreq_ctx->undo->tpClient3SeverityFramerFsmms from rowreq_ctx->data.tpClient3SeverityFramerFsmms
     */
    rowreq_ctx->undo->tpClient3SeverityFramerFsmms = rowreq_ctx->data.tpClient3SeverityFramerFsmms;


    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFsmms_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityFramerFsmms_val
 *        A long containing the new value.
 */
int
tpClient3SeverityFramerFsmms_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerFsmms_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFsmms_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityFramerFsmms value.
     * set tpClient3SeverityFramerFsmms value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityFramerFsmms = tpClient3SeverityFramerFsmms_val;

    // Set severity on shared memory
    setTpClient3Severity("FramerFsmms", tpClient3SeverityFramerFsmms_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFsmms_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityFramerFsmms_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFsmms_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityFramerFsmms undo.
     */
    /*
     * copy tpClient3SeverityFramerFsmms data
     * set rowreq_ctx->data.tpClient3SeverityFramerFsmms from rowreq_ctx->undo->tpClient3SeverityFramerFsmms
     */
    rowreq_ctx->data.tpClient3SeverityFramerFsmms = rowreq_ctx->undo->tpClient3SeverityFramerFsmms;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFsmms_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityFramerFssusts
 * tpClient3SeverityFramerFssusts is subid 3 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityFramerFssusts_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityFramerFssusts_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerFssusts_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFssusts_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityFramerFssusts value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityFramerFssusts value not illegal */
} /* tpClient3SeverityFramerFssusts_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityFramerFssusts_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFssusts_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityFramerFssusts undo.
     */
    /*
     * copy tpClient3SeverityFramerFssusts data
     * set rowreq_ctx->undo->tpClient3SeverityFramerFssusts from rowreq_ctx->data.tpClient3SeverityFramerFssusts
     */
    rowreq_ctx->undo->tpClient3SeverityFramerFssusts = rowreq_ctx->data.tpClient3SeverityFramerFssusts;


    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFssusts_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityFramerFssusts_val
 *        A long containing the new value.
 */
int
tpClient3SeverityFramerFssusts_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerFssusts_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFssusts_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityFramerFssusts value.
     * set tpClient3SeverityFramerFssusts value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityFramerFssusts = tpClient3SeverityFramerFssusts_val;

    // Set severity on shared memory
    setTpClient3Severity("FramerFssusts", tpClient3SeverityFramerFssusts_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFssusts_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityFramerFssusts_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFssusts_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityFramerFssusts undo.
     */
    /*
     * copy tpClient3SeverityFramerFssusts data
     * set rowreq_ctx->data.tpClient3SeverityFramerFssusts from rowreq_ctx->undo->tpClient3SeverityFramerFssusts
     */
    rowreq_ctx->data.tpClient3SeverityFramerFssusts = rowreq_ctx->undo->tpClient3SeverityFramerFssusts;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFssusts_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityFramerSoof
 * tpClient3SeverityFramerSoof is subid 4 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityFramerSoof_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityFramerSoof_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerSoof_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSoof_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityFramerSoof value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityFramerSoof value not illegal */
} /* tpClient3SeverityFramerSoof_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityFramerSoof_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSoof_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityFramerSoof undo.
     */
    /*
     * copy tpClient3SeverityFramerSoof data
     * set rowreq_ctx->undo->tpClient3SeverityFramerSoof from rowreq_ctx->data.tpClient3SeverityFramerSoof
     */
    rowreq_ctx->undo->tpClient3SeverityFramerSoof = rowreq_ctx->data.tpClient3SeverityFramerSoof;


    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSoof_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityFramerSoof_val
 *        A long containing the new value.
 */
int
tpClient3SeverityFramerSoof_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerSoof_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSoof_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityFramerSoof value.
     * set tpClient3SeverityFramerSoof value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityFramerSoof = tpClient3SeverityFramerSoof_val;

    // Set severity on shared memory
    setTpClient3Severity("FramerSoof", tpClient3SeverityFramerSoof_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSoof_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityFramerSoof_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSoof_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityFramerSoof undo.
     */
    /*
     * copy tpClient3SeverityFramerSoof data
     * set rowreq_ctx->data.tpClient3SeverityFramerSoof from rowreq_ctx->undo->tpClient3SeverityFramerSoof
     */
    rowreq_ctx->data.tpClient3SeverityFramerSoof = rowreq_ctx->undo->tpClient3SeverityFramerSoof;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSoof_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityFramerSlof
 * tpClient3SeverityFramerSlof is subid 5 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityFramerSlof_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityFramerSlof_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerSlof_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSlof_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityFramerSlof value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityFramerSlof value not illegal */
} /* tpClient3SeverityFramerSlof_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityFramerSlof_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSlof_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityFramerSlof undo.
     */
    /*
     * copy tpClient3SeverityFramerSlof data
     * set rowreq_ctx->undo->tpClient3SeverityFramerSlof from rowreq_ctx->data.tpClient3SeverityFramerSlof
     */
    rowreq_ctx->undo->tpClient3SeverityFramerSlof = rowreq_ctx->data.tpClient3SeverityFramerSlof;


    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSlof_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityFramerSlof_val
 *        A long containing the new value.
 */
int
tpClient3SeverityFramerSlof_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerSlof_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSlof_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityFramerSlof value.
     * set tpClient3SeverityFramerSlof value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityFramerSlof = tpClient3SeverityFramerSlof_val;

    // Set severity on shared memory
    setTpClient3Severity("FramerSlof", tpClient3SeverityFramerSlof_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSlof_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityFramerSlof_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSlof_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityFramerSlof undo.
     */
    /*
     * copy tpClient3SeverityFramerSlof data
     * set rowreq_ctx->data.tpClient3SeverityFramerSlof from rowreq_ctx->undo->tpClient3SeverityFramerSlof
     */
    rowreq_ctx->data.tpClient3SeverityFramerSlof = rowreq_ctx->undo->tpClient3SeverityFramerSlof;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSlof_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityFramerSif
 * tpClient3SeverityFramerSif is subid 6 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityFramerSif_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityFramerSif_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerSif_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSif_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityFramerSif value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityFramerSif value not illegal */
} /* tpClient3SeverityFramerSif_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityFramerSif_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSif_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityFramerSif undo.
     */
    /*
     * copy tpClient3SeverityFramerSif data
     * set rowreq_ctx->undo->tpClient3SeverityFramerSif from rowreq_ctx->data.tpClient3SeverityFramerSif
     */
    rowreq_ctx->undo->tpClient3SeverityFramerSif = rowreq_ctx->data.tpClient3SeverityFramerSif;


    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSif_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityFramerSif_val
 *        A long containing the new value.
 */
int
tpClient3SeverityFramerSif_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerSif_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSif_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityFramerSif value.
     * set tpClient3SeverityFramerSif value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityFramerSif = tpClient3SeverityFramerSif_val;

    // Set severity on shared memory
    setTpClient3Severity("FramerSif", tpClient3SeverityFramerSif_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSif_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityFramerSif_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerSif_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityFramerSif undo.
     */
    /*
     * copy tpClient3SeverityFramerSif data
     * set rowreq_ctx->data.tpClient3SeverityFramerSif from rowreq_ctx->undo->tpClient3SeverityFramerSif
     */
    rowreq_ctx->data.tpClient3SeverityFramerSif = rowreq_ctx->undo->tpClient3SeverityFramerSif;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityFramerSif_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityFramerFst
 * tpClient3SeverityFramerFst is subid 7 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityFramerFst_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityFramerFst_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerFst_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFst_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityFramerFst value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityFramerFst value not illegal */
} /* tpClient3SeverityFramerFst_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityFramerFst_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFst_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityFramerFst undo.
     */
    /*
     * copy tpClient3SeverityFramerFst data
     * set rowreq_ctx->undo->tpClient3SeverityFramerFst from rowreq_ctx->data.tpClient3SeverityFramerFst
     */
    rowreq_ctx->undo->tpClient3SeverityFramerFst = rowreq_ctx->data.tpClient3SeverityFramerFst;


    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFst_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityFramerFst_val
 *        A long containing the new value.
 */
int
tpClient3SeverityFramerFst_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityFramerFst_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFst_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityFramerFst value.
     * set tpClient3SeverityFramerFst value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityFramerFst = tpClient3SeverityFramerFst_val;

    // Set severity on shared memory
    setTpClient3Severity("FramerFst", tpClient3SeverityFramerFst_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFst_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityFramerFst_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityFramerFst_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityFramerFst undo.
     */
    /*
     * copy tpClient3SeverityFramerFst data
     * set rowreq_ctx->data.tpClient3SeverityFramerFst from rowreq_ctx->undo->tpClient3SeverityFramerFst
     */
    rowreq_ctx->data.tpClient3SeverityFramerFst = rowreq_ctx->undo->tpClient3SeverityFramerFst;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityFramerFst_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityLosstatLosf
 * tpClient3SeverityLosstatLosf is subid 8 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.8
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityLosstatLosf_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityLosstatLosf_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityLosstatLosf_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityLosstatLosf_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityLosstatLosf value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityLosstatLosf value not illegal */
} /* tpClient3SeverityLosstatLosf_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityLosstatLosf_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityLosstatLosf_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityLosstatLosf undo.
     */
    /*
     * copy tpClient3SeverityLosstatLosf data
     * set rowreq_ctx->undo->tpClient3SeverityLosstatLosf from rowreq_ctx->data.tpClient3SeverityLosstatLosf
     */
    rowreq_ctx->undo->tpClient3SeverityLosstatLosf = rowreq_ctx->data.tpClient3SeverityLosstatLosf;


    return MFD_SUCCESS;
} /* tpClient3SeverityLosstatLosf_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityLosstatLosf_val
 *        A long containing the new value.
 */
int
tpClient3SeverityLosstatLosf_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityLosstatLosf_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityLosstatLosf_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityLosstatLosf value.
     * set tpClient3SeverityLosstatLosf value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityLosstatLosf = tpClient3SeverityLosstatLosf_val;

    // Set severity on shared memory
    setTpClient3Severity("LosstatLosf", tpClient3SeverityLosstatLosf_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityLosstatLosf_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityLosstatLosf_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityLosstatLosf_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityLosstatLosf undo.
     */
    /*
     * copy tpClient3SeverityLosstatLosf data
     * set rowreq_ctx->data.tpClient3SeverityLosstatLosf from rowreq_ctx->undo->tpClient3SeverityLosstatLosf
     */
    rowreq_ctx->data.tpClient3SeverityLosstatLosf = rowreq_ctx->undo->tpClient3SeverityLosstatLosf;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityLosstatLosf_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityPathmonAccstat
 * tpClient3SeverityPathmonAccstat is subid 9 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.9
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityPathmonAccstat_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityPathmonAccstat_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonAccstat_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonAccstat_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityPathmonAccstat value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityPathmonAccstat value not illegal */
} /* tpClient3SeverityPathmonAccstat_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityPathmonAccstat_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonAccstat_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityPathmonAccstat undo.
     */
    /*
     * copy tpClient3SeverityPathmonAccstat data
     * set rowreq_ctx->undo->tpClient3SeverityPathmonAccstat from rowreq_ctx->data.tpClient3SeverityPathmonAccstat
     */
    rowreq_ctx->undo->tpClient3SeverityPathmonAccstat = rowreq_ctx->data.tpClient3SeverityPathmonAccstat;


    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonAccstat_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityPathmonAccstat_val
 *        A long containing the new value.
 */
int
tpClient3SeverityPathmonAccstat_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonAccstat_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonAccstat_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityPathmonAccstat value.
     * set tpClient3SeverityPathmonAccstat value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityPathmonAccstat = tpClient3SeverityPathmonAccstat_val;

    // Set severity on shared memory
    setTpClient3Severity("PathmonAccstat", tpClient3SeverityPathmonAccstat_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonAccstat_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityPathmonAccstat_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonAccstat_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityPathmonAccstat undo.
     */
    /*
     * copy tpClient3SeverityPathmonAccstat data
     * set rowreq_ctx->data.tpClient3SeverityPathmonAccstat from rowreq_ctx->undo->tpClient3SeverityPathmonAccstat
     */
    rowreq_ctx->data.tpClient3SeverityPathmonAccstat = rowreq_ctx->undo->tpClient3SeverityPathmonAccstat;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonAccstat_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityPathmonDais
 * tpClient3SeverityPathmonDais is subid 10 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.10
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityPathmonDais_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityPathmonDais_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonDais_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDais_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityPathmonDais value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityPathmonDais value not illegal */
} /* tpClient3SeverityPathmonDais_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityPathmonDais_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDais_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityPathmonDais undo.
     */
    /*
     * copy tpClient3SeverityPathmonDais data
     * set rowreq_ctx->undo->tpClient3SeverityPathmonDais from rowreq_ctx->data.tpClient3SeverityPathmonDais
     */
    rowreq_ctx->undo->tpClient3SeverityPathmonDais = rowreq_ctx->data.tpClient3SeverityPathmonDais;


    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDais_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityPathmonDais_val
 *        A long containing the new value.
 */
int
tpClient3SeverityPathmonDais_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonDais_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDais_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityPathmonDais value.
     * set tpClient3SeverityPathmonDais value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityPathmonDais = tpClient3SeverityPathmonDais_val;

    // Set severity on shared memory
    setTpClient3Severity("PathmonDais", tpClient3SeverityPathmonDais_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDais_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityPathmonDais_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDais_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityPathmonDais undo.
     */
    /*
     * copy tpClient3SeverityPathmonDais data
     * set rowreq_ctx->data.tpClient3SeverityPathmonDais from rowreq_ctx->undo->tpClient3SeverityPathmonDais
     */
    rowreq_ctx->data.tpClient3SeverityPathmonDais = rowreq_ctx->undo->tpClient3SeverityPathmonDais;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDais_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityPathmonDbdi
 * tpClient3SeverityPathmonDbdi is subid 11 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.11
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityPathmonDbdi_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityPathmonDbdi_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonDbdi_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDbdi_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityPathmonDbdi value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityPathmonDbdi value not illegal */
} /* tpClient3SeverityPathmonDbdi_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityPathmonDbdi_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDbdi_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityPathmonDbdi undo.
     */
    /*
     * copy tpClient3SeverityPathmonDbdi data
     * set rowreq_ctx->undo->tpClient3SeverityPathmonDbdi from rowreq_ctx->data.tpClient3SeverityPathmonDbdi
     */
    rowreq_ctx->undo->tpClient3SeverityPathmonDbdi = rowreq_ctx->data.tpClient3SeverityPathmonDbdi;


    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDbdi_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityPathmonDbdi_val
 *        A long containing the new value.
 */
int
tpClient3SeverityPathmonDbdi_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonDbdi_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDbdi_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityPathmonDbdi value.
     * set tpClient3SeverityPathmonDbdi value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityPathmonDbdi = tpClient3SeverityPathmonDbdi_val;

    // Set severity on shared memory
    setTpClient3Severity("PathmonDbdi", tpClient3SeverityPathmonDbdi_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDbdi_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityPathmonDbdi_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDbdi_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityPathmonDbdi undo.
     */
    /*
     * copy tpClient3SeverityPathmonDbdi data
     * set rowreq_ctx->data.tpClient3SeverityPathmonDbdi from rowreq_ctx->undo->tpClient3SeverityPathmonDbdi
     */
    rowreq_ctx->data.tpClient3SeverityPathmonDbdi = rowreq_ctx->undo->tpClient3SeverityPathmonDbdi;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDbdi_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityPathmonDlck
 * tpClient3SeverityPathmonDlck is subid 12 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.12
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityPathmonDlck_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityPathmonDlck_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonDlck_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDlck_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityPathmonDlck value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityPathmonDlck value not illegal */
} /* tpClient3SeverityPathmonDlck_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityPathmonDlck_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDlck_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityPathmonDlck undo.
     */
    /*
     * copy tpClient3SeverityPathmonDlck data
     * set rowreq_ctx->undo->tpClient3SeverityPathmonDlck from rowreq_ctx->data.tpClient3SeverityPathmonDlck
     */
    rowreq_ctx->undo->tpClient3SeverityPathmonDlck = rowreq_ctx->data.tpClient3SeverityPathmonDlck;


    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDlck_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityPathmonDlck_val
 *        A long containing the new value.
 */
int
tpClient3SeverityPathmonDlck_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonDlck_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDlck_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityPathmonDlck value.
     * set tpClient3SeverityPathmonDlck value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityPathmonDlck = tpClient3SeverityPathmonDlck_val;

    // Set severity on shared memory
    setTpClient3Severity("PathmonDlck", tpClient3SeverityPathmonDlck_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDlck_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityPathmonDlck_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonDlck_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityPathmonDlck undo.
     */
    /*
     * copy tpClient3SeverityPathmonDlck data
     * set rowreq_ctx->data.tpClient3SeverityPathmonDlck from rowreq_ctx->undo->tpClient3SeverityPathmonDlck
     */
    rowreq_ctx->data.tpClient3SeverityPathmonDlck = rowreq_ctx->undo->tpClient3SeverityPathmonDlck;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonDlck_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeverityPathmonMsiunst
 * tpClient3SeverityPathmonMsiunst is subid 13 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.13
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeverityPathmonMsiunst_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeverityPathmonMsiunst_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonMsiunst_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonMsiunst_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeverityPathmonMsiunst value.
     */

    return MFD_SUCCESS; /* tpClient3SeverityPathmonMsiunst value not illegal */
} /* tpClient3SeverityPathmonMsiunst_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeverityPathmonMsiunst_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonMsiunst_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeverityPathmonMsiunst undo.
     */
    /*
     * copy tpClient3SeverityPathmonMsiunst data
     * set rowreq_ctx->undo->tpClient3SeverityPathmonMsiunst from rowreq_ctx->data.tpClient3SeverityPathmonMsiunst
     */
    rowreq_ctx->undo->tpClient3SeverityPathmonMsiunst = rowreq_ctx->data.tpClient3SeverityPathmonMsiunst;


    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonMsiunst_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeverityPathmonMsiunst_val
 *        A long containing the new value.
 */
int
tpClient3SeverityPathmonMsiunst_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeverityPathmonMsiunst_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonMsiunst_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeverityPathmonMsiunst value.
     * set tpClient3SeverityPathmonMsiunst value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeverityPathmonMsiunst = tpClient3SeverityPathmonMsiunst_val;

    // Set severity on shared memory
    setTpClient3Severity("PathmonMsiunst", tpClient3SeverityPathmonMsiunst_val);

    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonMsiunst_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeverityPathmonMsiunst_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeverityPathmonMsiunst_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeverityPathmonMsiunst undo.
     */
    /*
     * copy tpClient3SeverityPathmonMsiunst data
     * set rowreq_ctx->data.tpClient3SeverityPathmonMsiunst from rowreq_ctx->undo->tpClient3SeverityPathmonMsiunst
     */
    rowreq_ctx->data.tpClient3SeverityPathmonMsiunst = rowreq_ctx->undo->tpClient3SeverityPathmonMsiunst;

    
    return MFD_SUCCESS;
} /* tpClient3SeverityPathmonMsiunst_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeveritySecmonBipsfs
 * tpClient3SeveritySecmonBipsfs is subid 14 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.14
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeveritySecmonBipsfs_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeveritySecmonBipsfs_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonBipsfs_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonBipsfs_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeveritySecmonBipsfs value.
     */

    return MFD_SUCCESS; /* tpClient3SeveritySecmonBipsfs value not illegal */
} /* tpClient3SeveritySecmonBipsfs_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeveritySecmonBipsfs_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonBipsfs_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeveritySecmonBipsfs undo.
     */
    /*
     * copy tpClient3SeveritySecmonBipsfs data
     * set rowreq_ctx->undo->tpClient3SeveritySecmonBipsfs from rowreq_ctx->data.tpClient3SeveritySecmonBipsfs
     */
    rowreq_ctx->undo->tpClient3SeveritySecmonBipsfs = rowreq_ctx->data.tpClient3SeveritySecmonBipsfs;


    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonBipsfs_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeveritySecmonBipsfs_val
 *        A long containing the new value.
 */
int
tpClient3SeveritySecmonBipsfs_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonBipsfs_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonBipsfs_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeveritySecmonBipsfs value.
     * set tpClient3SeveritySecmonBipsfs value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeveritySecmonBipsfs = tpClient3SeveritySecmonBipsfs_val;

    // Set severity on shared memory
    setTpClient3Severity("SecmonBipsfs", tpClient3SeveritySecmonBipsfs_val);

    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonBipsfs_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeveritySecmonBipsfs_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonBipsfs_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeveritySecmonBipsfs undo.
     */
    /*
     * copy tpClient3SeveritySecmonBipsfs data
     * set rowreq_ctx->data.tpClient3SeveritySecmonBipsfs from rowreq_ctx->undo->tpClient3SeveritySecmonBipsfs
     */
    rowreq_ctx->data.tpClient3SeveritySecmonBipsfs = rowreq_ctx->undo->tpClient3SeveritySecmonBipsfs;

    
    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonBipsfs_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeveritySecmonDbdi
 * tpClient3SeveritySecmonDbdi is subid 15 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.15
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeveritySecmonDbdi_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeveritySecmonDbdi_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonDbdi_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDbdi_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeveritySecmonDbdi value.
     */

    return MFD_SUCCESS; /* tpClient3SeveritySecmonDbdi value not illegal */
} /* tpClient3SeveritySecmonDbdi_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeveritySecmonDbdi_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDbdi_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeveritySecmonDbdi undo.
     */
    /*
     * copy tpClient3SeveritySecmonDbdi data
     * set rowreq_ctx->undo->tpClient3SeveritySecmonDbdi from rowreq_ctx->data.tpClient3SeveritySecmonDbdi
     */
    rowreq_ctx->undo->tpClient3SeveritySecmonDbdi = rowreq_ctx->data.tpClient3SeveritySecmonDbdi;


    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonDbdi_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeveritySecmonDbdi_val
 *        A long containing the new value.
 */
int
tpClient3SeveritySecmonDbdi_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonDbdi_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDbdi_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeveritySecmonDbdi value.
     * set tpClient3SeveritySecmonDbdi value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeveritySecmonDbdi = tpClient3SeveritySecmonDbdi_val;

    // Set severity on shared memory
    setTpClient3Severity("SecmonDbdi", tpClient3SeveritySecmonDbdi_val);

    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonDbdi_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeveritySecmonDbdi_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDbdi_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeveritySecmonDbdi undo.
     */
    /*
     * copy tpClient3SeveritySecmonDbdi data
     * set rowreq_ctx->data.tpClient3SeveritySecmonDbdi from rowreq_ctx->undo->tpClient3SeveritySecmonDbdi
     */
    rowreq_ctx->data.tpClient3SeveritySecmonDbdi = rowreq_ctx->undo->tpClient3SeveritySecmonDbdi;

    
    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonDbdi_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeveritySecmonDiae
 * tpClient3SeveritySecmonDiae is subid 16 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.16
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeveritySecmonDiae_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeveritySecmonDiae_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonDiae_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDiae_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeveritySecmonDiae value.
     */

    return MFD_SUCCESS; /* tpClient3SeveritySecmonDiae value not illegal */
} /* tpClient3SeveritySecmonDiae_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeveritySecmonDiae_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDiae_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeveritySecmonDiae undo.
     */
    /*
     * copy tpClient3SeveritySecmonDiae data
     * set rowreq_ctx->undo->tpClient3SeveritySecmonDiae from rowreq_ctx->data.tpClient3SeveritySecmonDiae
     */
    rowreq_ctx->undo->tpClient3SeveritySecmonDiae = rowreq_ctx->data.tpClient3SeveritySecmonDiae;


    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonDiae_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeveritySecmonDiae_val
 *        A long containing the new value.
 */
int
tpClient3SeveritySecmonDiae_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonDiae_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDiae_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeveritySecmonDiae value.
     * set tpClient3SeveritySecmonDiae value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeveritySecmonDiae = tpClient3SeveritySecmonDiae_val;

    // Set severity on shared memory
    setTpClient3Severity("SecmonDiae", tpClient3SeveritySecmonDiae_val);

    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonDiae_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeveritySecmonDiae_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonDiae_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeveritySecmonDiae undo.
     */
    /*
     * copy tpClient3SeveritySecmonDiae data
     * set rowreq_ctx->data.tpClient3SeveritySecmonDiae from rowreq_ctx->undo->tpClient3SeveritySecmonDiae
     */
    rowreq_ctx->data.tpClient3SeveritySecmonDiae = rowreq_ctx->undo->tpClient3SeveritySecmonDiae;

    
    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonDiae_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeveritySecmonFlom
 * tpClient3SeveritySecmonFlom is subid 17 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.17
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeveritySecmonFlom_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeveritySecmonFlom_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonFlom_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonFlom_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeveritySecmonFlom value.
     */

    return MFD_SUCCESS; /* tpClient3SeveritySecmonFlom value not illegal */
} /* tpClient3SeveritySecmonFlom_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeveritySecmonFlom_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonFlom_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeveritySecmonFlom undo.
     */
    /*
     * copy tpClient3SeveritySecmonFlom data
     * set rowreq_ctx->undo->tpClient3SeveritySecmonFlom from rowreq_ctx->data.tpClient3SeveritySecmonFlom
     */
    rowreq_ctx->undo->tpClient3SeveritySecmonFlom = rowreq_ctx->data.tpClient3SeveritySecmonFlom;


    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonFlom_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeveritySecmonFlom_val
 *        A long containing the new value.
 */
int
tpClient3SeveritySecmonFlom_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonFlom_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonFlom_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeveritySecmonFlom value.
     * set tpClient3SeveritySecmonFlom value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeveritySecmonFlom = tpClient3SeveritySecmonFlom_val;

    // Set severity on shared memory
    setTpClient3Severity("SecmonFlom", tpClient3SeveritySecmonFlom_val);

    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonFlom_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeveritySecmonFlom_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonFlom_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeveritySecmonFlom undo.
     */
    /*
     * copy tpClient3SeveritySecmonFlom data
     * set rowreq_ctx->data.tpClient3SeveritySecmonFlom from rowreq_ctx->undo->tpClient3SeveritySecmonFlom
     */
    rowreq_ctx->data.tpClient3SeveritySecmonFlom = rowreq_ctx->undo->tpClient3SeveritySecmonFlom;

    
    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonFlom_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient3SeverityEntry.tpClient3SeveritySecmonLom
 * tpClient3SeveritySecmonLom is subid 18 of tpClient3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.4.1.18
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient3SeveritySecmonLom_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient3SeveritySecmonLom_check_value( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonLom_val)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonLom_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient3SeveritySecmonLom value.
     */

    return MFD_SUCCESS; /* tpClient3SeveritySecmonLom value not illegal */
} /* tpClient3SeveritySecmonLom_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient3SeveritySecmonLom_undo_setup( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonLom_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient3SeveritySecmonLom undo.
     */
    /*
     * copy tpClient3SeveritySecmonLom data
     * set rowreq_ctx->undo->tpClient3SeveritySecmonLom from rowreq_ctx->data.tpClient3SeveritySecmonLom
     */
    rowreq_ctx->undo->tpClient3SeveritySecmonLom = rowreq_ctx->data.tpClient3SeveritySecmonLom;


    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonLom_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient3SeveritySecmonLom_val
 *        A long containing the new value.
 */
int
tpClient3SeveritySecmonLom_set( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient3SeveritySecmonLom_val )
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonLom_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient3SeveritySecmonLom value.
     * set tpClient3SeveritySecmonLom value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient3SeveritySecmonLom = tpClient3SeveritySecmonLom_val;

    // Set severity on shared memory
    setTpClient3Severity("SecmonLom", tpClient3SeveritySecmonLom_val);

    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonLom_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient3SeveritySecmonLom_undo( tpClient3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient3SeverityTable:tpClient3SeveritySecmonLom_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient3SeveritySecmonLom undo.
     */
    /*
     * copy tpClient3SeveritySecmonLom data
     * set rowreq_ctx->data.tpClient3SeveritySecmonLom from rowreq_ctx->undo->tpClient3SeveritySecmonLom
     */
    rowreq_ctx->data.tpClient3SeveritySecmonLom = rowreq_ctx->undo->tpClient3SeveritySecmonLom;

    
    return MFD_SUCCESS;
} /* tpClient3SeveritySecmonLom_undo */

void setTpClient3Severity(char *alarm, long severity_value)
{
	DEBUGMSGTL(("verbose:setTpClient3Severity:setTpClient3Severity","called\n"));

	shm_handler_create(pt_monitor_struct);

	if (strcmp(alarm, "FramerFsmms") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].FramerFsmms = severity_value;
	}
	else if (strcmp(alarm, "FramerFssusts") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].FramerFssusts = severity_value;
	}
	else if (strcmp(alarm, "FramerFst") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].FramerFst = severity_value;
	}
	else if (strcmp(alarm, "FramerSif") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].FramerSif = severity_value;
	}
	else if (strcmp(alarm, "FramerSlof") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].FramerSlof = severity_value;
	}
	else if (strcmp(alarm, "FramerSoof") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].FramerSoof = severity_value;
	}
	else if (strcmp(alarm, "LosstatLosf") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].LosstatLosf = severity_value;
	}
	else if (strcmp(alarm, "PathmonAccstat") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].PathmonAccstat = severity_value;
	}
	else if (strcmp(alarm, "PathmonDais") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].PathmonDais = severity_value;
	}
	else if (strcmp(alarm, "PathmonDbdi") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].PathmonDbdi = severity_value;
	}
	else if (strcmp(alarm, "PathmonDlck") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].PathmonDlck = severity_value;
	}
	else if (strcmp(alarm, "PathmonMsiunst") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].PathmonMsiunst = severity_value;
	}
	else if (strcmp(alarm, "SecmonBipsfs") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].SecmonBipsfs = severity_value;
	}
	else if (strcmp(alarm, "SecmonDbdi") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].SecmonDbdi = severity_value;
	}
	else if (strcmp(alarm, "SecmonDiae") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].SecmonDiae = severity_value;
	}
	else if (strcmp(alarm, "SecmonFlom") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].SecmonFlom = severity_value;
	}
	else if (strcmp(alarm, "SecmonLom") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[2].SecmonLom = severity_value;
	}

	// Set dirty flag
	pt_monitor_struct->sev_dirty_flag = 1;
}

/** @} */
