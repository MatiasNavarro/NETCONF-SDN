/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../txpDSPErrorsTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement txpDSPErrorsTable get routines.
 * TODO:240:M: Implement txpDSPErrorsTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table txpDSPErrorsTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::txpDSPErrorsTable is subid 2 of txpDSP.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.9.3.2, length: 11
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement txpDSPErrorsTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param txpDSPErrorsIndex_ptr
 * @param txpDSPErrorsIndex_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
txpDSPErrorsTable_indexes_set_tbl_idx(txpDSPErrorsTable_mib_index *tbl_idx, char *txpDSPErrorsIndex_val_ptr,  size_t txpDSPErrorsIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_indexes_set_tbl_idx","called\n"));

    /* txpDSPErrorsIndex(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->txpDSPErrorsIndex_len = sizeof(tbl_idx->txpDSPErrorsIndex)/sizeof(tbl_idx->txpDSPErrorsIndex[0]); /* max length */
    /*
     * make sure there is enough space for txpDSPErrorsIndex data
     */
    if ((NULL == tbl_idx->txpDSPErrorsIndex) ||
        (tbl_idx->txpDSPErrorsIndex_len <
         (txpDSPErrorsIndex_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (txpDSPErrorsIndex_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->txpDSPErrorsIndex_len = txpDSPErrorsIndex_val_ptr_len;
    memcpy( tbl_idx->txpDSPErrorsIndex, txpDSPErrorsIndex_val_ptr, txpDSPErrorsIndex_val_ptr_len* sizeof(txpDSPErrorsIndex_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* txpDSPErrorsTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
txpDSPErrorsTable_indexes_set(txpDSPErrorsTable_rowreq_ctx *rowreq_ctx, char *txpDSPErrorsIndex_val_ptr,  size_t txpDSPErrorsIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpDSPErrorsTable:txpDSPErrorsTable_indexes_set","called\n"));

    if(MFD_SUCCESS != txpDSPErrorsTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , txpDSPErrorsIndex_val_ptr, txpDSPErrorsIndex_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != txpDSPErrorsTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* txpDSPErrorsTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::txpDSPErrorsEntry.msexi
 * msexi is subid 2 of txpDSPErrorsEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.3.2.1.2
 * Description:
txp40G DSP Mean Squared Error XI channel.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the msexi data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param msexi_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param msexi_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by msexi.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*msexi_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update msexi_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
msexi_get( txpDSPErrorsTable_rowreq_ctx *rowreq_ctx, char **msexi_val_ptr_ptr, size_t *msexi_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != msexi_val_ptr_ptr) && (NULL != *msexi_val_ptr_ptr));
   netsnmp_assert( NULL != msexi_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpDSPErrorsTable:msexi_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the msexi data.
 * copy (* msexi_val_ptr_ptr ) data and (* msexi_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for msexi data
     */
    if ((NULL == (* msexi_val_ptr_ptr )) ||
        ((* msexi_val_ptr_len_ptr ) <
         (rowreq_ctx->data.msexi_len* sizeof(rowreq_ctx->data.msexi[0])))) {
        /*
         * allocate space for msexi data
         */
        (* msexi_val_ptr_ptr ) = malloc(rowreq_ctx->data.msexi_len* sizeof(rowreq_ctx->data.msexi[0]));
        if(NULL == (* msexi_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.msexi)\n");
            return MFD_ERROR;
        }
    }
    (* msexi_val_ptr_len_ptr ) = rowreq_ctx->data.msexi_len* sizeof(rowreq_ctx->data.msexi[0]);
    memcpy( (* msexi_val_ptr_ptr ), rowreq_ctx->data.msexi, rowreq_ctx->data.msexi_len* sizeof(rowreq_ctx->data.msexi[0]) );

    return MFD_SUCCESS;
} /* msexi_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpDSPErrorsEntry.msexq
 * msexq is subid 3 of txpDSPErrorsEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.3.2.1.3
 * Description:
txp40G DSP Mean Squared Error XQ channel.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the msexq data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param msexq_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param msexq_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by msexq.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*msexq_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update msexq_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
msexq_get( txpDSPErrorsTable_rowreq_ctx *rowreq_ctx, char **msexq_val_ptr_ptr, size_t *msexq_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != msexq_val_ptr_ptr) && (NULL != *msexq_val_ptr_ptr));
   netsnmp_assert( NULL != msexq_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpDSPErrorsTable:msexq_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the msexq data.
 * copy (* msexq_val_ptr_ptr ) data and (* msexq_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for msexq data
     */
    if ((NULL == (* msexq_val_ptr_ptr )) ||
        ((* msexq_val_ptr_len_ptr ) <
         (rowreq_ctx->data.msexq_len* sizeof(rowreq_ctx->data.msexq[0])))) {
        /*
         * allocate space for msexq data
         */
        (* msexq_val_ptr_ptr ) = malloc(rowreq_ctx->data.msexq_len* sizeof(rowreq_ctx->data.msexq[0]));
        if(NULL == (* msexq_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.msexq)\n");
            return MFD_ERROR;
        }
    }
    (* msexq_val_ptr_len_ptr ) = rowreq_ctx->data.msexq_len* sizeof(rowreq_ctx->data.msexq[0]);
    memcpy( (* msexq_val_ptr_ptr ), rowreq_ctx->data.msexq, rowreq_ctx->data.msexq_len* sizeof(rowreq_ctx->data.msexq[0]) );

    return MFD_SUCCESS;
} /* msexq_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpDSPErrorsEntry.mseyi
 * mseyi is subid 4 of txpDSPErrorsEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.3.2.1.4
 * Description:
txp40G DSP Mean Squared Error YI channel.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the mseyi data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param mseyi_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param mseyi_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by mseyi.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*mseyi_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update mseyi_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
mseyi_get( txpDSPErrorsTable_rowreq_ctx *rowreq_ctx, char **mseyi_val_ptr_ptr, size_t *mseyi_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != mseyi_val_ptr_ptr) && (NULL != *mseyi_val_ptr_ptr));
   netsnmp_assert( NULL != mseyi_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpDSPErrorsTable:mseyi_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the mseyi data.
 * copy (* mseyi_val_ptr_ptr ) data and (* mseyi_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for mseyi data
     */
    if ((NULL == (* mseyi_val_ptr_ptr )) ||
        ((* mseyi_val_ptr_len_ptr ) <
         (rowreq_ctx->data.mseyi_len* sizeof(rowreq_ctx->data.mseyi[0])))) {
        /*
         * allocate space for mseyi data
         */
        (* mseyi_val_ptr_ptr ) = malloc(rowreq_ctx->data.mseyi_len* sizeof(rowreq_ctx->data.mseyi[0]));
        if(NULL == (* mseyi_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.mseyi)\n");
            return MFD_ERROR;
        }
    }
    (* mseyi_val_ptr_len_ptr ) = rowreq_ctx->data.mseyi_len* sizeof(rowreq_ctx->data.mseyi[0]);
    memcpy( (* mseyi_val_ptr_ptr ), rowreq_ctx->data.mseyi, rowreq_ctx->data.mseyi_len* sizeof(rowreq_ctx->data.mseyi[0]) );

    return MFD_SUCCESS;
} /* mseyi_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpDSPErrorsEntry.mseyq
 * mseyq is subid 5 of txpDSPErrorsEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.3.2.1.5
 * Description:
txp40G DSP Mean Squared Error YQ channel.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the mseyq data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param mseyq_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param mseyq_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by mseyq.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*mseyq_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update mseyq_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
mseyq_get( txpDSPErrorsTable_rowreq_ctx *rowreq_ctx, char **mseyq_val_ptr_ptr, size_t *mseyq_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != mseyq_val_ptr_ptr) && (NULL != *mseyq_val_ptr_ptr));
   netsnmp_assert( NULL != mseyq_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpDSPErrorsTable:mseyq_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the mseyq data.
 * copy (* mseyq_val_ptr_ptr ) data and (* mseyq_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for mseyq data
     */
    if ((NULL == (* mseyq_val_ptr_ptr )) ||
        ((* mseyq_val_ptr_len_ptr ) <
         (rowreq_ctx->data.mseyq_len* sizeof(rowreq_ctx->data.mseyq[0])))) {
        /*
         * allocate space for mseyq data
         */
        (* mseyq_val_ptr_ptr ) = malloc(rowreq_ctx->data.mseyq_len* sizeof(rowreq_ctx->data.mseyq[0]));
        if(NULL == (* mseyq_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.mseyq)\n");
            return MFD_ERROR;
        }
    }
    (* mseyq_val_ptr_len_ptr ) = rowreq_ctx->data.mseyq_len* sizeof(rowreq_ctx->data.mseyq[0]);
    memcpy( (* mseyq_val_ptr_ptr ), rowreq_ctx->data.mseyq, rowreq_ctx->data.mseyq_len* sizeof(rowreq_ctx->data.mseyq[0]) );

    return MFD_SUCCESS;
} /* mseyq_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpDSPErrorsEntry.berestimate
 * berestimate is subid 6 of txpDSPErrorsEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.3.2.1.6
 * Description:
txp40G DSP BER Estimate.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the berestimate data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param berestimate_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param berestimate_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by berestimate.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*berestimate_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update berestimate_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
berestimate_get( txpDSPErrorsTable_rowreq_ctx *rowreq_ctx, char **berestimate_val_ptr_ptr, size_t *berestimate_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != berestimate_val_ptr_ptr) && (NULL != *berestimate_val_ptr_ptr));
   netsnmp_assert( NULL != berestimate_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpDSPErrorsTable:berestimate_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the berestimate data.
 * copy (* berestimate_val_ptr_ptr ) data and (* berestimate_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for berestimate data
     */
    if ((NULL == (* berestimate_val_ptr_ptr )) ||
        ((* berestimate_val_ptr_len_ptr ) <
         (rowreq_ctx->data.berestimate_len* sizeof(rowreq_ctx->data.berestimate[0])))) {
        /*
         * allocate space for berestimate data
         */
        (* berestimate_val_ptr_ptr ) = malloc(rowreq_ctx->data.berestimate_len* sizeof(rowreq_ctx->data.berestimate[0]));
        if(NULL == (* berestimate_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.berestimate)\n");
            return MFD_ERROR;
        }
    }
    (* berestimate_val_ptr_len_ptr ) = rowreq_ctx->data.berestimate_len* sizeof(rowreq_ctx->data.berestimate[0]);
    memcpy( (* berestimate_val_ptr_ptr ), rowreq_ctx->data.berestimate, rowreq_ctx->data.berestimate_len* sizeof(rowreq_ctx->data.berestimate[0]) );

    return MFD_SUCCESS;
} /* berestimate_get */



/** @} */
