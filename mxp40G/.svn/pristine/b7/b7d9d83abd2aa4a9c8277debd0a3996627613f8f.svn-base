/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef TXPSEVERITYTABLE_H
#define TXPSEVERITYTABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(FTNC-MIB)
config_require(FTNC-MIB/txpSeverityTable/txpSeverityTable_interface)
config_require(FTNC-MIB/txpSeverityTable/txpSeverityTable_data_access)
config_require(FTNC-MIB/txpSeverityTable/txpSeverityTable_data_get)
config_require(FTNC-MIB/txpSeverityTable/txpSeverityTable_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for txpSeverityTable */
#include "FTNC-MIB/txpSeverityTable/txpSeverityTable_oids.h"

/* enum definions */
#include "FTNC-MIB/txpSeverityTable/txpSeverityTable_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_txpSeverityTable(void);
void shutdown_txpSeverityTable(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table txpSeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::txpSeverityTable is subid 1 of txpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.4.1, length: 12
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review txpSeverityTable registration context.
     */
typedef netsnmp_data_list txpSeverityTable_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review txpSeverityTable data context structure.
 * This structure is used to represent the data for txpSeverityTable.
 */
/*
 * This structure contains storage for all the columns defined in the
 * txpSeverityTable.
 */
typedef struct txpSeverityTable_data_s {
    
        /*
         * txpSeverityEol(2)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityEol;
    
        /*
         * txpSeverityModTemp(3)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityModTemp;
    
        /*
         * txpSeverityTxooa(4)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityTxooa;
    
        /*
         * txpSeverityTxLof(5)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityTxLof;
    
        /*
         * txpSeverityTxDsc(6)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityTxDsc;
    
        /*
         * txpSeverityLsWav(7)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityLsWav;
    
        /*
         * txpSeverityLsBias(8)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityLsBias;
    
        /*
         * txpSeverityLsTemp(9)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityLsTemp;
    
        /*
         * txpSeverityTxLock(10)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityTxLock;
    
        /*
         * txpSeverityLsPow(11)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityLsPow;
    
        /*
         * txpSeverityModBias(12)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityModBias;
    
        /*
         * txpSeverityLatchedTxFifo(13)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityLatchedTxFifo;
    
        /*
         * txpSeverityRxPow(14)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityRxPow;
    
        /*
         * txpSeverityRxLos(15)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityRxLos;
    
        /*
         * txpSeverityRxLock(16)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityRxLock;
    
        /*
         * txpSeverityRxs(17)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityRxs;
    
        /*
         * txpSeverityPrbsErr(18)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityPrbsErr;
    
        /*
         * txpSeverityPsummary(19)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityPsummary;
    
        /*
         * txpSeverityP5vAnalog(20)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityP5vAnalog;
    
        /*
         * txpSeverityN5v2Analog(21)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityN5v2Analog;
    
        /*
         * txpSeverityP3p3vAnalog(22)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityP3p3vAnalog;
    
        /*
         * txpSeverityP3p3vDigital(23)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityP3p3vDigital;
    
        /*
         * txpSeverityLvDigital(24)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityLvDigital;
    
        /*
         * txpSeverityN5p2vDigital(25)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
         */
   long   txpSeverityN5p2vDigital;
    
} txpSeverityTable_data;


/* *********************************************************************
 * TODO:115:o: |-> Review txpSeverityTable undo context.
 * We're just going to use the same data structure for our
 * undo_context. If you want to do something more efficent,
 * define your typedef here.
 */
typedef txpSeverityTable_data txpSeverityTable_undo_data;

/*
 * TODO:120:r: |-> Review txpSeverityTable mib index.
 * This structure is used to represent the index for txpSeverityTable.
 */
typedef struct txpSeverityTable_mib_index_s {

        /*
         * txpSeverityIndex(1)/INTEGER32/ASN_INTEGER/long(long)//l/a/w/e/R/d/h
         */
   long   txpSeverityIndex;


} txpSeverityTable_mib_index;

    /*
     * TODO:121:r: |   |-> Review txpSeverityTable max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
*/
#define MAX_txpSeverityTable_IDX_LEN     1


/* *********************************************************************
 * TODO:130:o: |-> Review txpSeverityTable Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * txpSeverityTable_rowreq_ctx pointer.
 */
typedef struct txpSeverityTable_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_txpSeverityTable_IDX_LEN];
    
    txpSeverityTable_mib_index        tbl_idx;
    
    txpSeverityTable_data              data;
    txpSeverityTable_undo_data       * undo;
    unsigned int                column_set_flags; /* flags for set columns */


    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to txpSeverityTable rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *txpSeverityTable_data_list;

} txpSeverityTable_rowreq_ctx;

typedef struct txpSeverityTable_ref_rowreq_ctx_s {
    txpSeverityTable_rowreq_ctx *rowreq_ctx;
} txpSeverityTable_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int txpSeverityTable_pre_request(txpSeverityTable_registration * user_context);
    int txpSeverityTable_post_request(txpSeverityTable_registration * user_context,
        int rc);

    int txpSeverityTable_rowreq_ctx_init(txpSeverityTable_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void txpSeverityTable_rowreq_ctx_cleanup(txpSeverityTable_rowreq_ctx *rowreq_ctx);

    int txpSeverityTable_commit(txpSeverityTable_rowreq_ctx * rowreq_ctx);

    txpSeverityTable_rowreq_ctx *
                  txpSeverityTable_row_find_by_mib_index(txpSeverityTable_mib_index *mib_idx);

extern const oid txpSeverityTable_oid[];
extern const int txpSeverityTable_oid_size;


#include "FTNC-MIB/txpSeverityTable/txpSeverityTable_interface.h"
#include "FTNC-MIB/txpSeverityTable/txpSeverityTable_data_access.h"
#include "FTNC-MIB/txpSeverityTable/txpSeverityTable_data_get.h"
#include "FTNC-MIB/txpSeverityTable/txpSeverityTable_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* TXPSEVERITYTABLE_H */
/** @} */
