/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../txpDSPStatusTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>

#include "txpDSPStatusTable_data_access.h"

#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table txpDSPStatusTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::txpDSPStatusTable is subid 1 of txpDSP.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.9.3.1, length: 11
*/

/**
 * initialization for txpDSPStatusTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param txpDSPStatusTable_reg
 *        Pointer to txpDSPStatusTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int
txpDSPStatusTable_init_data(txpDSPStatusTable_registration * txpDSPStatusTable_reg)
{
    DEBUGMSGTL(("verbose:txpDSPStatusTable:txpDSPStatusTable_init_data","called\n"));

    /*
     * TODO:303:o: Initialize txpDSPStatusTable data.
     */
    /*
    ***************************************************
    ***             START EXAMPLE CODE              ***
    ***---------------------------------------------***/
    /*
     * if you are the sole writer for the file, you could
     * open it here. However, as stated earlier, we are assuming
     * the worst case, which in this case means that the file is
     * written to by someone else, and might not even exist when
     * we start up. So we can't do anything here.
     */
    /*
    ***---------------------------------------------***
    ***              END  EXAMPLE CODE              ***
    ***************************************************/

    return MFD_SUCCESS;
} /* txpDSPStatusTable_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 * @param  cache A pointer to a cache structure. You can set the timeout
 *         and other cache flags using this pointer.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 *  This is also the place to set up cache behavior. The default, to
 *  simply set the cache timeout, will work well with the default
 *  container. If you are using a custom container, you may want to
 *  look at the cache helper documentation to see if there are any
 *  flags you want to set.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void
txpDSPStatusTable_container_init(netsnmp_container **container_ptr_ptr,
                             netsnmp_cache *cache)
{
    DEBUGMSGTL(("verbose:txpDSPStatusTable:txpDSPStatusTable_container_init","called\n"));
    
    if (NULL == container_ptr_ptr) {
        snmp_log(LOG_ERR,"bad container param to txpDSPStatusTable_container_init\n");
        return;
    }

    /*
     * For advanced users, you can use a custom container. If you
     * do not create one, one will be created for you.
     */
    *container_ptr_ptr = NULL;

    if (NULL == cache) {
        snmp_log(LOG_ERR,"bad cache param to txpDSPStatusTable_container_init\n");
        return;
    }

    /*
     * TODO:345:A: Set up txpDSPStatusTable cache properties.
     *
     * Also for advanced users, you can set parameters for the
     * cache. Do not change the magic pointer, as it is used
     * by the MFD helper. To completely disable caching, set
     * cache->enabled to 0.
     */
    cache->timeout = TXPDSPSTATUSTABLE_CACHE_TIMEOUT; /* seconds */
} /* txpDSPStatusTable_container_init */

/**
 * container shutdown
 *
 * @param container_ptr A pointer to the container.
 *
 *  This function is called at shutdown to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases.
 *
 *  This function is called before txpDSPStatusTable_container_free().
 *
 * @remark
 *  This would also be a good place to do any cleanup needed
 *  for you data source. For example, closing a connection to another
 *  process that supplied the data, closing a database, etc.
 */
void
txpDSPStatusTable_container_shutdown(netsnmp_container *container_ptr)
{
    DEBUGMSGTL(("verbose:txpDSPStatusTable:txpDSPStatusTable_container_shutdown","called\n"));
    
    if (NULL == container_ptr) {
        snmp_log(LOG_ERR,"bad params to txpDSPStatusTable_container_shutdown\n");
        return;
    }

} /* txpDSPStatusTable_container_shutdown */

/**
 * load initial data
 *
 * TODO:350:M: Implement txpDSPStatusTable data load
 * This function will also be called by the cache helper to load
 * the container again (after the container free function has been
 * called to free the previous contents).
 *
 * @param container container to which items should be inserted
 *
 * @retval MFD_SUCCESS              : success.
 * @retval MFD_RESOURCE_UNAVAILABLE : Can't access data source
 * @retval MFD_ERROR                : other error.
 *
 *  This function is called to load the index(es) (and data, optionally)
 *  for the every row in the data set.
 *
 * @remark
 *  While loading the data, the only important thing is the indexes.
 *  If access to your data is cheap/fast (e.g. you have a pointer to a
 *  structure in memory), it would make sense to update the data here.
 *  If, however, the accessing the data invovles more work (e.g. parsing
 *  some other existing data, or peforming calculations to derive the data),
 *  then you can limit yourself to setting the indexes and saving any
 *  information you will need later. Then use the saved information in
 *  txpDSPStatusTable_row_prep() for populating data.
 *
 * @note
 *  If you need consistency between rows (like you want statistics
 *  for each row to be from the same time frame), you should set all
 *  data here.
 *
 */
int
txpDSPStatusTable_container_load(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:txpDSPStatusTable:txpDSPStatusTable_container_load","called\n"));

    txpDSPStatusTable_rowreq_ctx *rowreq_ctx;
    size_t                 count = 0;

    /*
     * temporary storage for index values
     */
        /*
         * txpDSPStatusIndex(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h
         */
   
    char txpDSPStatusIndex[32];
    strcpy (txpDSPStatusIndex, "txpDSPStatusIndex");
    size_t txpDSPStatusIndex_len = strlen(txpDSPStatusIndex);

    shm_handler_create(pt_monitor_struct);

        /*
         * TODO:352:M: |   |-> set indexes in new txpDSPStatusTable rowreq context.
         * data context will be set from the param (unless NULL,
         *      in which case a new data context will be allocated)
         */
        rowreq_ctx = txpDSPStatusTable_allocate_rowreq_ctx(NULL);
        if (NULL == rowreq_ctx) {
            snmp_log(LOG_ERR, "memory allocation failed\n");
            return MFD_RESOURCE_UNAVAILABLE;
        }
        if(MFD_SUCCESS != txpDSPStatusTable_indexes_set(rowreq_ctx
                               , txpDSPStatusIndex, txpDSPStatusIndex_len
               )) {
            snmp_log(LOG_ERR,"error setting index while loading "
                     "txpDSPStatusTable data.\n");
            txpDSPStatusTable_release_rowreq_ctx(rowreq_ctx);
         }

        /*
         * TODO:352:r: |   |-> populate txpDSPStatusTable data context.
         * Populate data context here. (optionally, delay until row prep)
         */
    /*
     * TRANSIENT or semi-TRANSIENT data:
     * copy data or save any info needed to do it in row_prep.
     */
    /*
     * setup/save data for dsprunning
     * dsprunning(2)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for dsprunning data
     */
    
    char dsprunning[65535];
	strcpy (dsprunning, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.GO]);
	size_t dsprunning_len = strlen(dsprunning);
    
    rowreq_ctx->data.dsprunning_len = dsprunning_len* sizeof(dsprunning[0]);
    if ((NULL == rowreq_ctx->data.dsprunning) ||
        (rowreq_ctx->data.dsprunning_len <
         (dsprunning_len* sizeof(dsprunning[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (dsprunning)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.dsprunning, dsprunning, dsprunning_len* sizeof(dsprunning[0]) );
    
    /*
     * setup/save data for converged
     * converged(3)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for converged data
     */
    
    char converged[65535];
	strcpy (converged, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.CONVERGED]);
	size_t converged_len = strlen(converged);
    
    rowreq_ctx->data.converged_len = converged_len* sizeof(converged[0]);
    if ((NULL == rowreq_ctx->data.converged) ||
        (rowreq_ctx->data.converged_len <
         (converged_len* sizeof(converged[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (converged)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.converged, converged, converged_len* sizeof(converged[0]) );
    
    /*
     * setup/save data for msebelowThreshold
     * msebelowThreshold(4)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for msebelowThreshold data
     */
    
    char msebelowThreshold[65535];
	strcpy (msebelowThreshold, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.MSEBLTHR]);
	size_t msebelowThreshold_len = strlen(msebelowThreshold);
    
    rowreq_ctx->data.msebelowThreshold_len = msebelowThreshold_len* sizeof(msebelowThreshold[0]);
    if ((NULL == rowreq_ctx->data.msebelowThreshold) ||
        (rowreq_ctx->data.msebelowThreshold_len <
         (msebelowThreshold_len* sizeof(msebelowThreshold[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (msebelowThreshold)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.msebelowThreshold, msebelowThreshold, msebelowThreshold_len* sizeof(msebelowThreshold[0]) );
    
    /*
     * setup/save data for bcdEnable
     * bcdEnable(5)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for bcdEnable data
     */
    
    char bcdEnable[65535];
	strcpy (bcdEnable, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.BCDEN]);
	size_t bcdEnable_len = strlen(bcdEnable);
    
    rowreq_ctx->data.bcdEnable_len = bcdEnable_len* sizeof(bcdEnable[0]);
    if ((NULL == rowreq_ctx->data.bcdEnable) ||
        (rowreq_ctx->data.bcdEnable_len <
         (bcdEnable_len* sizeof(bcdEnable[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (bcdEnable)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.bcdEnable, bcdEnable, bcdEnable_len* sizeof(bcdEnable[0]) );
    
    /*
     * setup/save data for coarseCarrierLock
     * coarseCarrierLock(6)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for coarseCarrierLock data
     */
     
    char coarseCarrierLock[65535];
	strcpy (coarseCarrierLock, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.LOCK]);
	size_t coarseCarrierLock_len = strlen(coarseCarrierLock);
     
    rowreq_ctx->data.coarseCarrierLock_len = coarseCarrierLock_len* sizeof(coarseCarrierLock[0]);
    if ((NULL == rowreq_ctx->data.coarseCarrierLock) ||
        (rowreq_ctx->data.coarseCarrierLock_len <
         (coarseCarrierLock_len* sizeof(coarseCarrierLock[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (coarseCarrierLock)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.coarseCarrierLock, coarseCarrierLock, coarseCarrierLock_len* sizeof(coarseCarrierLock[0]) );
    
    /*
     * setup/save data for collision
     * collision(7)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for collision data
     */
     
    char collision[65535];
	strcpy (collision, general_status_yes_no[pt_monitor_struct->txp_struct.txp_dspstat.fields.COLLISION]);
	size_t collision_len = strlen(collision);
     
    rowreq_ctx->data.collision_len = collision_len* sizeof(collision[0]);
    if ((NULL == rowreq_ctx->data.collision) ||
        (rowreq_ctx->data.collision_len <
         (collision_len* sizeof(collision[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (collision)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.collision, collision, collision_len* sizeof(collision[0]) );
    
    /*
     * setup/save data for dspInitialized
     * dspInitialized(8)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for dspInitialized data
     */
     
    char dspInitialized[65535];
	strcpy (dspInitialized, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.DSPINIT]);
	size_t dspInitialized_len = strlen(dspInitialized);
     
    rowreq_ctx->data.dspInitialized_len = dspInitialized_len* sizeof(dspInitialized[0]);
    if ((NULL == rowreq_ctx->data.dspInitialized) ||
        (rowreq_ctx->data.dspInitialized_len <
         (dspInitialized_len* sizeof(dspInitialized[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (dspInitialized)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.dspInitialized, dspInitialized, dspInitialized_len* sizeof(dspInitialized[0]) );
    
    /*
     * setup/save data for presenceOfLight
     * presenceOfLight(9)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for presenceOfLight data
     */
     
    char presenceOfLight[65535];
	strcpy (presenceOfLight, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.POL]);
	size_t presenceOfLight_len = strlen(presenceOfLight);
     
    rowreq_ctx->data.presenceOfLight_len = presenceOfLight_len* sizeof(presenceOfLight[0]);
    if ((NULL == rowreq_ctx->data.presenceOfLight) ||
        (rowreq_ctx->data.presenceOfLight_len <
         (presenceOfLight_len* sizeof(presenceOfLight[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (presenceOfLight)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.presenceOfLight, presenceOfLight, presenceOfLight_len* sizeof(presenceOfLight[0]) );
    
    /*
     * setup/save data for localOscillatorRunning
     * localOscillatorRunning(10)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for localOscillatorRunning data
     */

    char localOscillatorRunning[65535];
	strcpy (localOscillatorRunning, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.OSC]);
	size_t localOscillatorRunning_len = strlen(localOscillatorRunning);

    rowreq_ctx->data.localOscillatorRunning_len = localOscillatorRunning_len* sizeof(localOscillatorRunning[0]);
    if ((NULL == rowreq_ctx->data.localOscillatorRunning) ||
        (rowreq_ctx->data.localOscillatorRunning_len <
         (localOscillatorRunning_len* sizeof(localOscillatorRunning[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (localOscillatorRunning)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.localOscillatorRunning, localOscillatorRunning, localOscillatorRunning_len* sizeof(localOscillatorRunning[0]) );
    
    /*
     * setup/save data for transmitLaserRunning
     * transmitLaserRunning(11)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
     */
    /** no mapping */
    /*
     * make sure there is enough space for transmitLaserRunning data
     */
     
    char transmitLaserRunning[65535];
	strcpy (transmitLaserRunning, general_status_yes_no[!pt_monitor_struct->txp_struct.txp_dspstat.fields.TXLASER]);
	size_t transmitLaserRunning_len = strlen(transmitLaserRunning);
     
    rowreq_ctx->data.transmitLaserRunning_len = transmitLaserRunning_len* sizeof(transmitLaserRunning[0]);
    if ((NULL == rowreq_ctx->data.transmitLaserRunning) ||
        (rowreq_ctx->data.transmitLaserRunning_len <
         (transmitLaserRunning_len* sizeof(transmitLaserRunning[0])))) {
        snmp_log(LOG_ERR,"not enough space for value (transmitLaserRunning)\n");
        return MFD_ERROR;
    }
    memcpy( rowreq_ctx->data.transmitLaserRunning, transmitLaserRunning, transmitLaserRunning_len* sizeof(transmitLaserRunning[0]) );

        /*
         * insert into table container
         */
        CONTAINER_INSERT(container, rowreq_ctx);
        ++count;

    DEBUGMSGT(("verbose:txpDSPStatusTable:txpDSPStatusTable_container_load",
               "inserted %d records\n", count));

    return MFD_SUCCESS;
} /* txpDSPStatusTable_container_load */

/**
 * container clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void
txpDSPStatusTable_container_free(netsnmp_container *container)
{
    DEBUGMSGTL(("verbose:txpDSPStatusTable:txpDSPStatusTable_container_free","called\n"));

    /*
     * TODO:380:M: Free txpDSPStatusTable container data.
     */
} /* txpDSPStatusTable_container_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int
txpDSPStatusTable_row_prep( txpDSPStatusTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:txpDSPStatusTable:txpDSPStatusTable_row_prep","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:390:o: Prepare row for request.
     * If populating row data was delayed, this is the place to
     * fill in the row for this request.
     */

    return MFD_SUCCESS;
} /* txpDSPStatusTable_row_prep */

/** @} */
