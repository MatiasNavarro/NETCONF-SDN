/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../txpPowSupplyAlrmTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement txpPowSupplyAlrmTable get routines.
 * TODO:240:M: Implement txpPowSupplyAlrmTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table txpPowSupplyAlrmTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::txpPowSupplyAlrmTable is subid 3 of txpAlrm.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3, length: 11
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement txpPowSupplyAlrmTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param txpPowSupplyAlrmIndex_ptr
 * @param txpPowSupplyAlrmIndex_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
txpPowSupplyAlrmTable_indexes_set_tbl_idx(txpPowSupplyAlrmTable_mib_index *tbl_idx, char *txpPowSupplyAlrmIndex_val_ptr,  size_t txpPowSupplyAlrmIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpPowSupplyAlrmTable_indexes_set_tbl_idx","called\n"));

    /* txpPowSupplyAlrmIndex(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->txpPowSupplyAlrmIndex_len = sizeof(tbl_idx->txpPowSupplyAlrmIndex)/sizeof(tbl_idx->txpPowSupplyAlrmIndex[0]); /* max length */
    /*
     * make sure there is enough space for txpPowSupplyAlrmIndex data
     */
    if ((NULL == tbl_idx->txpPowSupplyAlrmIndex) ||
        (tbl_idx->txpPowSupplyAlrmIndex_len <
         (txpPowSupplyAlrmIndex_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (txpPowSupplyAlrmIndex_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->txpPowSupplyAlrmIndex_len = txpPowSupplyAlrmIndex_val_ptr_len;
    memcpy( tbl_idx->txpPowSupplyAlrmIndex, txpPowSupplyAlrmIndex_val_ptr, txpPowSupplyAlrmIndex_val_ptr_len* sizeof(txpPowSupplyAlrmIndex_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* txpPowSupplyAlrmTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
txpPowSupplyAlrmTable_indexes_set(txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char *txpPowSupplyAlrmIndex_val_ptr,  size_t txpPowSupplyAlrmIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpPowSupplyAlrmTable_indexes_set","called\n"));

    if(MFD_SUCCESS != txpPowSupplyAlrmTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , txpPowSupplyAlrmIndex_val_ptr, txpPowSupplyAlrmIndex_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != txpPowSupplyAlrmTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* txpPowSupplyAlrmTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::txpPowSupplyAlrmEntry.txpPSUMMARY
 * txpPSUMMARY is subid 2 of txpPowSupplyAlrmEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3.1.2
 * Description:
txp40G Power summary alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpPSUMMARY data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpPSUMMARY_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpPSUMMARY_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpPSUMMARY.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpPSUMMARY_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpPSUMMARY_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpPSUMMARY_get( txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char **txpPSUMMARY_val_ptr_ptr, size_t *txpPSUMMARY_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpPSUMMARY_val_ptr_ptr) && (NULL != *txpPSUMMARY_val_ptr_ptr));
   netsnmp_assert( NULL != txpPSUMMARY_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpPSUMMARY_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpPSUMMARY data.
 * copy (* txpPSUMMARY_val_ptr_ptr ) data and (* txpPSUMMARY_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpPSUMMARY data
     */
    if ((NULL == (* txpPSUMMARY_val_ptr_ptr )) ||
        ((* txpPSUMMARY_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpPSUMMARY_len* sizeof(rowreq_ctx->data.txpPSUMMARY[0])))) {
        /*
         * allocate space for txpPSUMMARY data
         */
        (* txpPSUMMARY_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpPSUMMARY_len* sizeof(rowreq_ctx->data.txpPSUMMARY[0]));
        if(NULL == (* txpPSUMMARY_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpPSUMMARY)\n");
            return MFD_ERROR;
        }
    }
    (* txpPSUMMARY_val_ptr_len_ptr ) = rowreq_ctx->data.txpPSUMMARY_len* sizeof(rowreq_ctx->data.txpPSUMMARY[0]);
    memcpy( (* txpPSUMMARY_val_ptr_ptr ), rowreq_ctx->data.txpPSUMMARY, rowreq_ctx->data.txpPSUMMARY_len* sizeof(rowreq_ctx->data.txpPSUMMARY[0]) );

    return MFD_SUCCESS;
} /* txpPSUMMARY_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpPowSupplyAlrmEntry.txpP5VANALOG
 * txpP5VANALOG is subid 3 of txpPowSupplyAlrmEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3.1.3
 * Description:
txp40G +5V analog alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpP5VANALOG data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpP5VANALOG_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpP5VANALOG_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpP5VANALOG.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpP5VANALOG_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpP5VANALOG_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpP5VANALOG_get( txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char **txpP5VANALOG_val_ptr_ptr, size_t *txpP5VANALOG_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpP5VANALOG_val_ptr_ptr) && (NULL != *txpP5VANALOG_val_ptr_ptr));
   netsnmp_assert( NULL != txpP5VANALOG_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpP5VANALOG_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpP5VANALOG data.
 * copy (* txpP5VANALOG_val_ptr_ptr ) data and (* txpP5VANALOG_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpP5VANALOG data
     */
    if ((NULL == (* txpP5VANALOG_val_ptr_ptr )) ||
        ((* txpP5VANALOG_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpP5VANALOG_len* sizeof(rowreq_ctx->data.txpP5VANALOG[0])))) {
        /*
         * allocate space for txpP5VANALOG data
         */
        (* txpP5VANALOG_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpP5VANALOG_len* sizeof(rowreq_ctx->data.txpP5VANALOG[0]));
        if(NULL == (* txpP5VANALOG_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpP5VANALOG)\n");
            return MFD_ERROR;
        }
    }
    (* txpP5VANALOG_val_ptr_len_ptr ) = rowreq_ctx->data.txpP5VANALOG_len* sizeof(rowreq_ctx->data.txpP5VANALOG[0]);
    memcpy( (* txpP5VANALOG_val_ptr_ptr ), rowreq_ctx->data.txpP5VANALOG, rowreq_ctx->data.txpP5VANALOG_len* sizeof(rowreq_ctx->data.txpP5VANALOG[0]) );

    return MFD_SUCCESS;
} /* txpP5VANALOG_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpPowSupplyAlrmEntry.txpN5V2ANALOG
 * txpN5V2ANALOG is subid 4 of txpPowSupplyAlrmEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3.1.4
 * Description:
txp40G -5,2V analog alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpN5V2ANALOG data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpN5V2ANALOG_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpN5V2ANALOG_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpN5V2ANALOG.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpN5V2ANALOG_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpN5V2ANALOG_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpN5V2ANALOG_get( txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char **txpN5V2ANALOG_val_ptr_ptr, size_t *txpN5V2ANALOG_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpN5V2ANALOG_val_ptr_ptr) && (NULL != *txpN5V2ANALOG_val_ptr_ptr));
   netsnmp_assert( NULL != txpN5V2ANALOG_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpN5V2ANALOG_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpN5V2ANALOG data.
 * copy (* txpN5V2ANALOG_val_ptr_ptr ) data and (* txpN5V2ANALOG_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpN5V2ANALOG data
     */
    if ((NULL == (* txpN5V2ANALOG_val_ptr_ptr )) ||
        ((* txpN5V2ANALOG_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpN5V2ANALOG_len* sizeof(rowreq_ctx->data.txpN5V2ANALOG[0])))) {
        /*
         * allocate space for txpN5V2ANALOG data
         */
        (* txpN5V2ANALOG_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpN5V2ANALOG_len* sizeof(rowreq_ctx->data.txpN5V2ANALOG[0]));
        if(NULL == (* txpN5V2ANALOG_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpN5V2ANALOG)\n");
            return MFD_ERROR;
        }
    }
    (* txpN5V2ANALOG_val_ptr_len_ptr ) = rowreq_ctx->data.txpN5V2ANALOG_len* sizeof(rowreq_ctx->data.txpN5V2ANALOG[0]);
    memcpy( (* txpN5V2ANALOG_val_ptr_ptr ), rowreq_ctx->data.txpN5V2ANALOG, rowreq_ctx->data.txpN5V2ANALOG_len* sizeof(rowreq_ctx->data.txpN5V2ANALOG[0]) );

    return MFD_SUCCESS;
} /* txpN5V2ANALOG_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpPowSupplyAlrmEntry.txpP3P3VANALOG
 * txpP3P3VANALOG is subid 5 of txpPowSupplyAlrmEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3.1.5
 * Description:
Txp40G +3,3V analog alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpP3P3VANALOG data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpP3P3VANALOG_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpP3P3VANALOG_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpP3P3VANALOG.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpP3P3VANALOG_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpP3P3VANALOG_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpP3P3VANALOG_get( txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char **txpP3P3VANALOG_val_ptr_ptr, size_t *txpP3P3VANALOG_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpP3P3VANALOG_val_ptr_ptr) && (NULL != *txpP3P3VANALOG_val_ptr_ptr));
   netsnmp_assert( NULL != txpP3P3VANALOG_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpP3P3VANALOG_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpP3P3VANALOG data.
 * copy (* txpP3P3VANALOG_val_ptr_ptr ) data and (* txpP3P3VANALOG_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpP3P3VANALOG data
     */
    if ((NULL == (* txpP3P3VANALOG_val_ptr_ptr )) ||
        ((* txpP3P3VANALOG_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpP3P3VANALOG_len* sizeof(rowreq_ctx->data.txpP3P3VANALOG[0])))) {
        /*
         * allocate space for txpP3P3VANALOG data
         */
        (* txpP3P3VANALOG_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpP3P3VANALOG_len* sizeof(rowreq_ctx->data.txpP3P3VANALOG[0]));
        if(NULL == (* txpP3P3VANALOG_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpP3P3VANALOG)\n");
            return MFD_ERROR;
        }
    }
    (* txpP3P3VANALOG_val_ptr_len_ptr ) = rowreq_ctx->data.txpP3P3VANALOG_len* sizeof(rowreq_ctx->data.txpP3P3VANALOG[0]);
    memcpy( (* txpP3P3VANALOG_val_ptr_ptr ), rowreq_ctx->data.txpP3P3VANALOG, rowreq_ctx->data.txpP3P3VANALOG_len* sizeof(rowreq_ctx->data.txpP3P3VANALOG[0]) );

    return MFD_SUCCESS;
} /* txpP3P3VANALOG_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpPowSupplyAlrmEntry.txpP3P3VDIGITAL
 * txpP3P3VDIGITAL is subid 6 of txpPowSupplyAlrmEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3.1.6
 * Description:
Txp40G +3,3V analog alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpP3P3VDIGITAL data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpP3P3VDIGITAL_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpP3P3VDIGITAL_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpP3P3VDIGITAL.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpP3P3VDIGITAL_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpP3P3VDIGITAL_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpP3P3VDIGITAL_get( txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char **txpP3P3VDIGITAL_val_ptr_ptr, size_t *txpP3P3VDIGITAL_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpP3P3VDIGITAL_val_ptr_ptr) && (NULL != *txpP3P3VDIGITAL_val_ptr_ptr));
   netsnmp_assert( NULL != txpP3P3VDIGITAL_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpP3P3VDIGITAL_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpP3P3VDIGITAL data.
 * copy (* txpP3P3VDIGITAL_val_ptr_ptr ) data and (* txpP3P3VDIGITAL_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpP3P3VDIGITAL data
     */
    if ((NULL == (* txpP3P3VDIGITAL_val_ptr_ptr )) ||
        ((* txpP3P3VDIGITAL_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpP3P3VDIGITAL_len* sizeof(rowreq_ctx->data.txpP3P3VDIGITAL[0])))) {
        /*
         * allocate space for txpP3P3VDIGITAL data
         */
        (* txpP3P3VDIGITAL_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpP3P3VDIGITAL_len* sizeof(rowreq_ctx->data.txpP3P3VDIGITAL[0]));
        if(NULL == (* txpP3P3VDIGITAL_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpP3P3VDIGITAL)\n");
            return MFD_ERROR;
        }
    }
    (* txpP3P3VDIGITAL_val_ptr_len_ptr ) = rowreq_ctx->data.txpP3P3VDIGITAL_len* sizeof(rowreq_ctx->data.txpP3P3VDIGITAL[0]);
    memcpy( (* txpP3P3VDIGITAL_val_ptr_ptr ), rowreq_ctx->data.txpP3P3VDIGITAL, rowreq_ctx->data.txpP3P3VDIGITAL_len* sizeof(rowreq_ctx->data.txpP3P3VDIGITAL[0]) );

    return MFD_SUCCESS;
} /* txpP3P3VDIGITAL_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpPowSupplyAlrmEntry.txpLVDIGITAL
 * txpLVDIGITAL is subid 7 of txpPowSupplyAlrmEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3.1.7
 * Description:
txp40G low voltage digital.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpLVDIGITAL data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpLVDIGITAL_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpLVDIGITAL_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpLVDIGITAL.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpLVDIGITAL_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpLVDIGITAL_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpLVDIGITAL_get( txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char **txpLVDIGITAL_val_ptr_ptr, size_t *txpLVDIGITAL_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpLVDIGITAL_val_ptr_ptr) && (NULL != *txpLVDIGITAL_val_ptr_ptr));
   netsnmp_assert( NULL != txpLVDIGITAL_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpLVDIGITAL_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpLVDIGITAL data.
 * copy (* txpLVDIGITAL_val_ptr_ptr ) data and (* txpLVDIGITAL_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpLVDIGITAL data
     */
    if ((NULL == (* txpLVDIGITAL_val_ptr_ptr )) ||
        ((* txpLVDIGITAL_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpLVDIGITAL_len* sizeof(rowreq_ctx->data.txpLVDIGITAL[0])))) {
        /*
         * allocate space for txpLVDIGITAL data
         */
        (* txpLVDIGITAL_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpLVDIGITAL_len* sizeof(rowreq_ctx->data.txpLVDIGITAL[0]));
        if(NULL == (* txpLVDIGITAL_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpLVDIGITAL)\n");
            return MFD_ERROR;
        }
    }
    (* txpLVDIGITAL_val_ptr_len_ptr ) = rowreq_ctx->data.txpLVDIGITAL_len* sizeof(rowreq_ctx->data.txpLVDIGITAL[0]);
    memcpy( (* txpLVDIGITAL_val_ptr_ptr ), rowreq_ctx->data.txpLVDIGITAL, rowreq_ctx->data.txpLVDIGITAL_len* sizeof(rowreq_ctx->data.txpLVDIGITAL[0]) );

    return MFD_SUCCESS;
} /* txpLVDIGITAL_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpPowSupplyAlrmEntry.txpN5P2VDIGITAL
 * txpN5P2VDIGITAL is subid 8 of txpPowSupplyAlrmEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.3.1.8
 * Description:
txp40G -5,2V digital alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpN5P2VDIGITAL data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpN5P2VDIGITAL_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpN5P2VDIGITAL_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpN5P2VDIGITAL.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpN5P2VDIGITAL_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpN5P2VDIGITAL_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpN5P2VDIGITAL_get( txpPowSupplyAlrmTable_rowreq_ctx *rowreq_ctx, char **txpN5P2VDIGITAL_val_ptr_ptr, size_t *txpN5P2VDIGITAL_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpN5P2VDIGITAL_val_ptr_ptr) && (NULL != *txpN5P2VDIGITAL_val_ptr_ptr));
   netsnmp_assert( NULL != txpN5P2VDIGITAL_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpPowSupplyAlrmTable:txpN5P2VDIGITAL_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpN5P2VDIGITAL data.
 * copy (* txpN5P2VDIGITAL_val_ptr_ptr ) data and (* txpN5P2VDIGITAL_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpN5P2VDIGITAL data
     */
    if ((NULL == (* txpN5P2VDIGITAL_val_ptr_ptr )) ||
        ((* txpN5P2VDIGITAL_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpN5P2VDIGITAL_len* sizeof(rowreq_ctx->data.txpN5P2VDIGITAL[0])))) {
        /*
         * allocate space for txpN5P2VDIGITAL data
         */
        (* txpN5P2VDIGITAL_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpN5P2VDIGITAL_len* sizeof(rowreq_ctx->data.txpN5P2VDIGITAL[0]));
        if(NULL == (* txpN5P2VDIGITAL_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpN5P2VDIGITAL)\n");
            return MFD_ERROR;
        }
    }
    (* txpN5P2VDIGITAL_val_ptr_len_ptr ) = rowreq_ctx->data.txpN5P2VDIGITAL_len* sizeof(rowreq_ctx->data.txpN5P2VDIGITAL[0]);
    memcpy( (* txpN5P2VDIGITAL_val_ptr_ptr ), rowreq_ctx->data.txpN5P2VDIGITAL, rowreq_ctx->data.txpN5P2VDIGITAL_len* sizeof(rowreq_ctx->data.txpN5P2VDIGITAL[0]) );

    return MFD_SUCCESS;
} /* txpN5P2VDIGITAL_get */



/** @} */
