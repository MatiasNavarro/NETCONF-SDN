/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 */
#ifndef XFP4TABLE_H
#define XFP4TABLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup misc misc: Miscellaneous routines
 *
 * @{
 */
#include <net-snmp/library/asn1.h>

/* other required module components */
    /* *INDENT-OFF*  */
config_add_mib(FTNC-MIB)
config_require(FTNC-MIB/xfp4Table/xfp4Table_interface)
config_require(FTNC-MIB/xfp4Table/xfp4Table_data_access)
config_require(FTNC-MIB/xfp4Table/xfp4Table_data_get)
config_require(FTNC-MIB/xfp4Table/xfp4Table_data_set)
    /* *INDENT-ON*  */

/* OID and column number definitions for xfp4Table */
#include "FTNC-MIB/xfp4Table/xfp4Table_oids.h"

/* enum definions */
#include "FTNC-MIB/xfp4Table/xfp4Table_enums.h"

/* *********************************************************************
 * function declarations
 */
void init_xfp4Table(void);
void shutdown_xfp4Table(void);

/* *********************************************************************
 * Table declarations
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp4Table
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp4Table is subid 6 of mxpMIBObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.6, length: 9
*/
/* *********************************************************************
 * When you register your mib, you get to provide a generic
 * pointer that will be passed back to you for most of the
 * functions calls.
 *
 * TODO:100:r: Review all context structures
 */
    /*
     * TODO:101:o: |-> Review xfp4Table registration context.
     */
typedef netsnmp_data_list xfp4Table_registration;

/**********************************************************************/
/*
 * TODO:110:r: |-> Review xfp4Table data context structure.
 * This structure is used to represent the data for xfp4Table.
 */
/*
 * This structure contains storage for all the columns defined in the
 * xfp4Table.
 */
typedef struct xfp4Table_data_s {
    
        /*
         * xfp4Pres(2)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4Pres[65535];
size_t      xfp4Pres_len; /* # of char elements, not bytes */
    
        /*
         * xfp4Loss(3)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4Loss[65535];
size_t      xfp4Loss_len; /* # of char elements, not bytes */
    
        /*
         * xfp4Rdy(4)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4Rdy[65535];
size_t      xfp4Rdy_len; /* # of char elements, not bytes */
    
        /*
         * xfp4Int(5)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4Int[65535];
size_t      xfp4Int_len; /* # of char elements, not bytes */
    
        /*
         * xfp4TxPow(6)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4TxPow[65535];
size_t      xfp4TxPow_len; /* # of char elements, not bytes */
    
        /*
         * xfp4RxPow(7)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4RxPow[65535];
size_t      xfp4RxPow_len; /* # of char elements, not bytes */
    
        /*
         * xfp4Temp(8)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4Temp[65535];
size_t      xfp4Temp_len; /* # of char elements, not bytes */
    
        /*
         * xfp4LowTxPow(9)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4LowTxPow[65535];
size_t      xfp4LowTxPow_len; /* # of char elements, not bytes */
    
        /*
         * xfp4HighTxPow(10)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4HighTxPow[65535];
size_t      xfp4HighTxPow_len; /* # of char elements, not bytes */
    
        /*
         * xfp4LowRxPow(11)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4LowRxPow[65535];
size_t      xfp4LowRxPow_len; /* # of char elements, not bytes */
    
        /*
         * xfp4HighRxPow(12)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4HighRxPow[65535];
size_t      xfp4HighRxPow_len; /* # of char elements, not bytes */
    
        /*
         * xfp4RxCdrLol(13)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4RxCdrLol[65535];
size_t      xfp4RxCdrLol_len; /* # of char elements, not bytes */
    
        /*
         * xfp4TxCdrLol(14)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4TxCdrLol[65535];
size_t      xfp4TxCdrLol_len; /* # of char elements, not bytes */
    
        /*
         * xfp4LasFault(15)/OCTETSTR/ASN_OCTET_STR/char(char)//L/A/w/e/r/d/h
         */
   char   xfp4LasFault[65535];
size_t      xfp4LasFault_len; /* # of char elements, not bytes */
    
} xfp4Table_data;


/*
 * TODO:120:r: |-> Review xfp4Table mib index.
 * This structure is used to represent the index for xfp4Table.
 */
typedef struct xfp4Table_mib_index_s {

        /*
         * xfp4Index(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h
         */
   char   xfp4Index[32];
   size_t      xfp4Index_len;


} xfp4Table_mib_index;

    /*
     * TODO:121:r: |   |-> Review xfp4Table max index length.
     * If you KNOW that your indexes will never exceed a certain
     * length, update this macro to that length.
     *
     * BE VERY CAREFUL TO TAKE INTO ACCOUNT THE MAXIMUM
     * POSSIBLE LENGHT FOR EVERY VARIABLE LENGTH INDEX!
     * Guessing 128 - col/entry(2)  - oid len(9)
*/
#define MAX_xfp4Table_IDX_LEN     33


/* *********************************************************************
 * TODO:130:o: |-> Review xfp4Table Row request (rowreq) context.
 * When your functions are called, you will be passed a
 * xfp4Table_rowreq_ctx pointer.
 */
typedef struct xfp4Table_rowreq_ctx_s {

    /** this must be first for container compare to work */
    netsnmp_index        oid_idx;
    oid                  oid_tmp[MAX_xfp4Table_IDX_LEN];
    
    xfp4Table_mib_index        tbl_idx;
    
    xfp4Table_data              data;

    /*
     * flags per row. Currently, the first (lower) 8 bits are reserved
     * for the user. See mfd.h for other flags.
     */
    u_int                       rowreq_flags;

    /*
     * TODO:131:o: |   |-> Add useful data to xfp4Table rowreq context.
     */
    
    /*
     * storage for future expansion
     */
    netsnmp_data_list             *xfp4Table_data_list;

} xfp4Table_rowreq_ctx;

typedef struct xfp4Table_ref_rowreq_ctx_s {
    xfp4Table_rowreq_ctx *rowreq_ctx;
} xfp4Table_ref_rowreq_ctx;

/* *********************************************************************
 * function prototypes
 */
    int xfp4Table_pre_request(xfp4Table_registration * user_context);
    int xfp4Table_post_request(xfp4Table_registration * user_context,
        int rc);

    int xfp4Table_rowreq_ctx_init(xfp4Table_rowreq_ctx *rowreq_ctx,
                                   void *user_init_ctx);
    void xfp4Table_rowreq_ctx_cleanup(xfp4Table_rowreq_ctx *rowreq_ctx);


    xfp4Table_rowreq_ctx *
                  xfp4Table_row_find_by_mib_index(xfp4Table_mib_index *mib_idx);

extern const oid xfp4Table_oid[];
extern const int xfp4Table_oid_size;


#include "FTNC-MIB/xfp4Table/xfp4Table_interface.h"
#include "FTNC-MIB/xfp4Table/xfp4Table_data_access.h"
#include "FTNC-MIB/xfp4Table/xfp4Table_data_get.h"
#include "FTNC-MIB/xfp4Table/xfp4Table_data_set.h"

/*
 * DUMMY markers, ignore
 *
 * TODO:099:x: *************************************************************
 * TODO:199:x: *************************************************************
 * TODO:299:x: *************************************************************
 * TODO:399:x: *************************************************************
 * TODO:499:x: *************************************************************
 */

#ifdef __cplusplus
}
#endif

#endif /* XFP4TABLE_H */
/** @} */
