/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../txpAlrmTxTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement txpAlrmTxTable get routines.
 * TODO:240:M: Implement txpAlrmTxTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table txpAlrmTxTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::txpAlrmTxTable is subid 1 of txpAlrm.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1, length: 11
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement txpAlrmTxTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param txpAlrmTxIndex_ptr
 * @param txpAlrmTxIndex_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
txpAlrmTxTable_indexes_set_tbl_idx(txpAlrmTxTable_mib_index *tbl_idx, char *txpAlrmTxIndex_val_ptr,  size_t txpAlrmTxIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpAlrmTxTable_indexes_set_tbl_idx","called\n"));

    /* txpAlrmTxIndex(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->txpAlrmTxIndex_len = sizeof(tbl_idx->txpAlrmTxIndex)/sizeof(tbl_idx->txpAlrmTxIndex[0]); /* max length */
    /*
     * make sure there is enough space for txpAlrmTxIndex data
     */
    if ((NULL == tbl_idx->txpAlrmTxIndex) ||
        (tbl_idx->txpAlrmTxIndex_len <
         (txpAlrmTxIndex_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (txpAlrmTxIndex_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->txpAlrmTxIndex_len = txpAlrmTxIndex_val_ptr_len;
    memcpy( tbl_idx->txpAlrmTxIndex, txpAlrmTxIndex_val_ptr, txpAlrmTxIndex_val_ptr_len* sizeof(txpAlrmTxIndex_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* txpAlrmTxTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
txpAlrmTxTable_indexes_set(txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char *txpAlrmTxIndex_val_ptr,  size_t txpAlrmTxIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpAlrmTxTable_indexes_set","called\n"));

    if(MFD_SUCCESS != txpAlrmTxTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , txpAlrmTxIndex_val_ptr, txpAlrmTxIndex_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != txpAlrmTxTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* txpAlrmTxTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpEOLALM
 * txpEOLALM is subid 2 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.2
 * Description:
Line transmiter laser end of life alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpEOLALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpEOLALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpEOLALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpEOLALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpEOLALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpEOLALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpEOLALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpEOLALM_val_ptr_ptr, size_t *txpEOLALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpEOLALM_val_ptr_ptr) && (NULL != *txpEOLALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpEOLALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpEOLALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpEOLALM data.
 * copy (* txpEOLALM_val_ptr_ptr ) data and (* txpEOLALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpEOLALM data
     */
    if ((NULL == (* txpEOLALM_val_ptr_ptr )) ||
        ((* txpEOLALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpEOLALM_len* sizeof(rowreq_ctx->data.txpEOLALM[0])))) {
        /*
         * allocate space for txpEOLALM data
         */
        (* txpEOLALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpEOLALM_len* sizeof(rowreq_ctx->data.txpEOLALM[0]));
        if(NULL == (* txpEOLALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpEOLALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpEOLALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpEOLALM_len* sizeof(rowreq_ctx->data.txpEOLALM[0]);
    memcpy( (* txpEOLALM_val_ptr_ptr ), rowreq_ctx->data.txpEOLALM, rowreq_ctx->data.txpEOLALM_len* sizeof(rowreq_ctx->data.txpEOLALM[0]) );

    return MFD_SUCCESS;
} /* txpEOLALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpModTEMPALM
 * txpModTEMPALM is subid 3 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.3
 * Description:
Line transmiter modulator Temperature Alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpModTEMPALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpModTEMPALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpModTEMPALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpModTEMPALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpModTEMPALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpModTEMPALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpModTEMPALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpModTEMPALM_val_ptr_ptr, size_t *txpModTEMPALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpModTEMPALM_val_ptr_ptr) && (NULL != *txpModTEMPALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpModTEMPALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpModTEMPALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpModTEMPALM data.
 * copy (* txpModTEMPALM_val_ptr_ptr ) data and (* txpModTEMPALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpModTEMPALM data
     */
    if ((NULL == (* txpModTEMPALM_val_ptr_ptr )) ||
        ((* txpModTEMPALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpModTEMPALM_len* sizeof(rowreq_ctx->data.txpModTEMPALM[0])))) {
        /*
         * allocate space for txpModTEMPALM data
         */
        (* txpModTEMPALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpModTEMPALM_len* sizeof(rowreq_ctx->data.txpModTEMPALM[0]));
        if(NULL == (* txpModTEMPALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpModTEMPALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpModTEMPALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpModTEMPALM_len* sizeof(rowreq_ctx->data.txpModTEMPALM[0]);
    memcpy( (* txpModTEMPALM_val_ptr_ptr ), rowreq_ctx->data.txpModTEMPALM, rowreq_ctx->data.txpModTEMPALM_len* sizeof(rowreq_ctx->data.txpModTEMPALM[0]) );

    return MFD_SUCCESS;
} /* txpModTEMPALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpTxOOA
 * txpTxOOA is subid 4 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.4
 * Description:
Line transmiter SFI-5 Deskew alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpTxOOA data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpTxOOA_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpTxOOA_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpTxOOA.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpTxOOA_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpTxOOA_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpTxOOA_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpTxOOA_val_ptr_ptr, size_t *txpTxOOA_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpTxOOA_val_ptr_ptr) && (NULL != *txpTxOOA_val_ptr_ptr));
   netsnmp_assert( NULL != txpTxOOA_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpTxOOA_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpTxOOA data.
 * copy (* txpTxOOA_val_ptr_ptr ) data and (* txpTxOOA_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpTxOOA data
     */
    if ((NULL == (* txpTxOOA_val_ptr_ptr )) ||
        ((* txpTxOOA_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpTxOOA_len* sizeof(rowreq_ctx->data.txpTxOOA[0])))) {
        /*
         * allocate space for txpTxOOA data
         */
        (* txpTxOOA_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpTxOOA_len* sizeof(rowreq_ctx->data.txpTxOOA[0]));
        if(NULL == (* txpTxOOA_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpTxOOA)\n");
            return MFD_ERROR;
        }
    }
    (* txpTxOOA_val_ptr_len_ptr ) = rowreq_ctx->data.txpTxOOA_len* sizeof(rowreq_ctx->data.txpTxOOA[0]);
    memcpy( (* txpTxOOA_val_ptr_ptr ), rowreq_ctx->data.txpTxOOA, rowreq_ctx->data.txpTxOOA_len* sizeof(rowreq_ctx->data.txpTxOOA[0]) );

    return MFD_SUCCESS;
} /* txpTxOOA_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpTxLOFALM
 * txpTxLOFALM is subid 5 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.5
 * Description:
Line transmiter loss of Frame alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpTxLOFALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpTxLOFALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpTxLOFALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpTxLOFALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpTxLOFALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpTxLOFALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpTxLOFALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpTxLOFALM_val_ptr_ptr, size_t *txpTxLOFALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpTxLOFALM_val_ptr_ptr) && (NULL != *txpTxLOFALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpTxLOFALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpTxLOFALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpTxLOFALM data.
 * copy (* txpTxLOFALM_val_ptr_ptr ) data and (* txpTxLOFALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpTxLOFALM data
     */
    if ((NULL == (* txpTxLOFALM_val_ptr_ptr )) ||
        ((* txpTxLOFALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpTxLOFALM_len* sizeof(rowreq_ctx->data.txpTxLOFALM[0])))) {
        /*
         * allocate space for txpTxLOFALM data
         */
        (* txpTxLOFALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpTxLOFALM_len* sizeof(rowreq_ctx->data.txpTxLOFALM[0]));
        if(NULL == (* txpTxLOFALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpTxLOFALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpTxLOFALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpTxLOFALM_len* sizeof(rowreq_ctx->data.txpTxLOFALM[0]);
    memcpy( (* txpTxLOFALM_val_ptr_ptr ), rowreq_ctx->data.txpTxLOFALM, rowreq_ctx->data.txpTxLOFALM_len* sizeof(rowreq_ctx->data.txpTxLOFALM[0]) );

    return MFD_SUCCESS;
} /* txpTxLOFALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpTxDSCERR
 * txpTxDSCERR is subid 6 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.6
 * Description:
Line transmiter latching SFI-5 DESKEW Channel error.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpTxDSCERR data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpTxDSCERR_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpTxDSCERR_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpTxDSCERR.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpTxDSCERR_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpTxDSCERR_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpTxDSCERR_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpTxDSCERR_val_ptr_ptr, size_t *txpTxDSCERR_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpTxDSCERR_val_ptr_ptr) && (NULL != *txpTxDSCERR_val_ptr_ptr));
   netsnmp_assert( NULL != txpTxDSCERR_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpTxDSCERR_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpTxDSCERR data.
 * copy (* txpTxDSCERR_val_ptr_ptr ) data and (* txpTxDSCERR_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpTxDSCERR data
     */
    if ((NULL == (* txpTxDSCERR_val_ptr_ptr )) ||
        ((* txpTxDSCERR_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpTxDSCERR_len* sizeof(rowreq_ctx->data.txpTxDSCERR[0])))) {
        /*
         * allocate space for txpTxDSCERR data
         */
        (* txpTxDSCERR_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpTxDSCERR_len* sizeof(rowreq_ctx->data.txpTxDSCERR[0]));
        if(NULL == (* txpTxDSCERR_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpTxDSCERR)\n");
            return MFD_ERROR;
        }
    }
    (* txpTxDSCERR_val_ptr_len_ptr ) = rowreq_ctx->data.txpTxDSCERR_len* sizeof(rowreq_ctx->data.txpTxDSCERR[0]);
    memcpy( (* txpTxDSCERR_val_ptr_ptr ), rowreq_ctx->data.txpTxDSCERR, rowreq_ctx->data.txpTxDSCERR_len* sizeof(rowreq_ctx->data.txpTxDSCERR[0]) );

    return MFD_SUCCESS;
} /* txpTxDSCERR_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpLsWAVALM
 * txpLsWAVALM is subid 7 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.7
 * Description:
Line transmiter laser Wavelength Alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpLsWAVALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpLsWAVALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpLsWAVALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpLsWAVALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpLsWAVALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpLsWAVALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpLsWAVALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpLsWAVALM_val_ptr_ptr, size_t *txpLsWAVALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpLsWAVALM_val_ptr_ptr) && (NULL != *txpLsWAVALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpLsWAVALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpLsWAVALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpLsWAVALM data.
 * copy (* txpLsWAVALM_val_ptr_ptr ) data and (* txpLsWAVALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpLsWAVALM data
     */
    if ((NULL == (* txpLsWAVALM_val_ptr_ptr )) ||
        ((* txpLsWAVALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpLsWAVALM_len* sizeof(rowreq_ctx->data.txpLsWAVALM[0])))) {
        /*
         * allocate space for txpLsWAVALM data
         */
        (* txpLsWAVALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpLsWAVALM_len* sizeof(rowreq_ctx->data.txpLsWAVALM[0]));
        if(NULL == (* txpLsWAVALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpLsWAVALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpLsWAVALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpLsWAVALM_len* sizeof(rowreq_ctx->data.txpLsWAVALM[0]);
    memcpy( (* txpLsWAVALM_val_ptr_ptr ), rowreq_ctx->data.txpLsWAVALM, rowreq_ctx->data.txpLsWAVALM_len* sizeof(rowreq_ctx->data.txpLsWAVALM[0]) );

    return MFD_SUCCESS;
} /* txpLsWAVALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpTxALMINT
 * txpTxALMINT is subid 8 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.8
 * Description:
Line transmiter Tx summary alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpTxALMINT data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpTxALMINT_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpTxALMINT_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpTxALMINT.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpTxALMINT_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpTxALMINT_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpTxALMINT_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpTxALMINT_val_ptr_ptr, size_t *txpTxALMINT_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpTxALMINT_val_ptr_ptr) && (NULL != *txpTxALMINT_val_ptr_ptr));
   netsnmp_assert( NULL != txpTxALMINT_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpTxALMINT_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpTxALMINT data.
 * copy (* txpTxALMINT_val_ptr_ptr ) data and (* txpTxALMINT_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpTxALMINT data
     */
    if ((NULL == (* txpTxALMINT_val_ptr_ptr )) ||
        ((* txpTxALMINT_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpTxALMINT_len* sizeof(rowreq_ctx->data.txpTxALMINT[0])))) {
        /*
         * allocate space for txpTxALMINT data
         */
        (* txpTxALMINT_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpTxALMINT_len* sizeof(rowreq_ctx->data.txpTxALMINT[0]));
        if(NULL == (* txpTxALMINT_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpTxALMINT)\n");
            return MFD_ERROR;
        }
    }
    (* txpTxALMINT_val_ptr_len_ptr ) = rowreq_ctx->data.txpTxALMINT_len* sizeof(rowreq_ctx->data.txpTxALMINT[0]);
    memcpy( (* txpTxALMINT_val_ptr_ptr ), rowreq_ctx->data.txpTxALMINT, rowreq_ctx->data.txpTxALMINT_len* sizeof(rowreq_ctx->data.txpTxALMINT[0]) );

    return MFD_SUCCESS;
} /* txpTxALMINT_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpLsBIASALM
 * txpLsBIASALM is subid 9 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.9
 * Description:
Line transmiter laser bias current alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpLsBIASALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpLsBIASALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpLsBIASALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpLsBIASALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpLsBIASALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpLsBIASALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpLsBIASALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpLsBIASALM_val_ptr_ptr, size_t *txpLsBIASALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpLsBIASALM_val_ptr_ptr) && (NULL != *txpLsBIASALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpLsBIASALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpLsBIASALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpLsBIASALM data.
 * copy (* txpLsBIASALM_val_ptr_ptr ) data and (* txpLsBIASALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpLsBIASALM data
     */
    if ((NULL == (* txpLsBIASALM_val_ptr_ptr )) ||
        ((* txpLsBIASALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpLsBIASALM_len* sizeof(rowreq_ctx->data.txpLsBIASALM[0])))) {
        /*
         * allocate space for txpLsBIASALM data
         */
        (* txpLsBIASALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpLsBIASALM_len* sizeof(rowreq_ctx->data.txpLsBIASALM[0]));
        if(NULL == (* txpLsBIASALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpLsBIASALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpLsBIASALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpLsBIASALM_len* sizeof(rowreq_ctx->data.txpLsBIASALM[0]);
    memcpy( (* txpLsBIASALM_val_ptr_ptr ), rowreq_ctx->data.txpLsBIASALM, rowreq_ctx->data.txpLsBIASALM_len* sizeof(rowreq_ctx->data.txpLsBIASALM[0]) );

    return MFD_SUCCESS;
} /* txpLsBIASALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpLsTEMPALM
 * txpLsTEMPALM is subid 10 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.10
 * Description:
Line transmiter laser Temperature alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpLsTEMPALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpLsTEMPALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpLsTEMPALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpLsTEMPALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpLsTEMPALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpLsTEMPALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpLsTEMPALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpLsTEMPALM_val_ptr_ptr, size_t *txpLsTEMPALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpLsTEMPALM_val_ptr_ptr) && (NULL != *txpLsTEMPALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpLsTEMPALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpLsTEMPALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpLsTEMPALM data.
 * copy (* txpLsTEMPALM_val_ptr_ptr ) data and (* txpLsTEMPALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpLsTEMPALM data
     */
    if ((NULL == (* txpLsTEMPALM_val_ptr_ptr )) ||
        ((* txpLsTEMPALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpLsTEMPALM_len* sizeof(rowreq_ctx->data.txpLsTEMPALM[0])))) {
        /*
         * allocate space for txpLsTEMPALM data
         */
        (* txpLsTEMPALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpLsTEMPALM_len* sizeof(rowreq_ctx->data.txpLsTEMPALM[0]));
        if(NULL == (* txpLsTEMPALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpLsTEMPALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpLsTEMPALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpLsTEMPALM_len* sizeof(rowreq_ctx->data.txpLsTEMPALM[0]);
    memcpy( (* txpLsTEMPALM_val_ptr_ptr ), rowreq_ctx->data.txpLsTEMPALM, rowreq_ctx->data.txpLsTEMPALM_len* sizeof(rowreq_ctx->data.txpLsTEMPALM[0]) );

    return MFD_SUCCESS;
} /* txpLsTEMPALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpTxLOCKERR
 * txpTxLOCKERR is subid 11 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.11
 * Description:
Line transmiter loss of TxPLL lock indicator.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpTxLOCKERR data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpTxLOCKERR_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpTxLOCKERR_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpTxLOCKERR.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpTxLOCKERR_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpTxLOCKERR_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpTxLOCKERR_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpTxLOCKERR_val_ptr_ptr, size_t *txpTxLOCKERR_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpTxLOCKERR_val_ptr_ptr) && (NULL != *txpTxLOCKERR_val_ptr_ptr));
   netsnmp_assert( NULL != txpTxLOCKERR_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpTxLOCKERR_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpTxLOCKERR data.
 * copy (* txpTxLOCKERR_val_ptr_ptr ) data and (* txpTxLOCKERR_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpTxLOCKERR data
     */
    if ((NULL == (* txpTxLOCKERR_val_ptr_ptr )) ||
        ((* txpTxLOCKERR_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpTxLOCKERR_len* sizeof(rowreq_ctx->data.txpTxLOCKERR[0])))) {
        /*
         * allocate space for txpTxLOCKERR data
         */
        (* txpTxLOCKERR_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpTxLOCKERR_len* sizeof(rowreq_ctx->data.txpTxLOCKERR[0]));
        if(NULL == (* txpTxLOCKERR_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpTxLOCKERR)\n");
            return MFD_ERROR;
        }
    }
    (* txpTxLOCKERR_val_ptr_len_ptr ) = rowreq_ctx->data.txpTxLOCKERR_len* sizeof(rowreq_ctx->data.txpTxLOCKERR[0]);
    memcpy( (* txpTxLOCKERR_val_ptr_ptr ), rowreq_ctx->data.txpTxLOCKERR, rowreq_ctx->data.txpTxLOCKERR_len* sizeof(rowreq_ctx->data.txpTxLOCKERR[0]) );

    return MFD_SUCCESS;
} /* txpTxLOCKERR_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpLsPOWALM
 * txpLsPOWALM is subid 12 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.12
 * Description:
Line transmiter laser power alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpLsPOWALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpLsPOWALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpLsPOWALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpLsPOWALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpLsPOWALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpLsPOWALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpLsPOWALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpLsPOWALM_val_ptr_ptr, size_t *txpLsPOWALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpLsPOWALM_val_ptr_ptr) && (NULL != *txpLsPOWALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpLsPOWALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpLsPOWALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpLsPOWALM data.
 * copy (* txpLsPOWALM_val_ptr_ptr ) data and (* txpLsPOWALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpLsPOWALM data
     */
    if ((NULL == (* txpLsPOWALM_val_ptr_ptr )) ||
        ((* txpLsPOWALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpLsPOWALM_len* sizeof(rowreq_ctx->data.txpLsPOWALM[0])))) {
        /*
         * allocate space for txpLsPOWALM data
         */
        (* txpLsPOWALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpLsPOWALM_len* sizeof(rowreq_ctx->data.txpLsPOWALM[0]));
        if(NULL == (* txpLsPOWALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpLsPOWALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpLsPOWALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpLsPOWALM_len* sizeof(rowreq_ctx->data.txpLsPOWALM[0]);
    memcpy( (* txpLsPOWALM_val_ptr_ptr ), rowreq_ctx->data.txpLsPOWALM, rowreq_ctx->data.txpLsPOWALM_len* sizeof(rowreq_ctx->data.txpLsPOWALM[0]) );

    return MFD_SUCCESS;
} /* txpLsPOWALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpModBIASALM
 * txpModBIASALM is subid 13 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.13
 * Description:
Line transmiter modulator bias alarm.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpModBIASALM data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpModBIASALM_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpModBIASALM_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpModBIASALM.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpModBIASALM_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpModBIASALM_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpModBIASALM_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpModBIASALM_val_ptr_ptr, size_t *txpModBIASALM_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpModBIASALM_val_ptr_ptr) && (NULL != *txpModBIASALM_val_ptr_ptr));
   netsnmp_assert( NULL != txpModBIASALM_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpModBIASALM_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpModBIASALM data.
 * copy (* txpModBIASALM_val_ptr_ptr ) data and (* txpModBIASALM_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpModBIASALM data
     */
    if ((NULL == (* txpModBIASALM_val_ptr_ptr )) ||
        ((* txpModBIASALM_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpModBIASALM_len* sizeof(rowreq_ctx->data.txpModBIASALM[0])))) {
        /*
         * allocate space for txpModBIASALM data
         */
        (* txpModBIASALM_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpModBIASALM_len* sizeof(rowreq_ctx->data.txpModBIASALM[0]));
        if(NULL == (* txpModBIASALM_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpModBIASALM)\n");
            return MFD_ERROR;
        }
    }
    (* txpModBIASALM_val_ptr_len_ptr ) = rowreq_ctx->data.txpModBIASALM_len* sizeof(rowreq_ctx->data.txpModBIASALM[0]);
    memcpy( (* txpModBIASALM_val_ptr_ptr ), rowreq_ctx->data.txpModBIASALM, rowreq_ctx->data.txpModBIASALM_len* sizeof(rowreq_ctx->data.txpModBIASALM[0]) );

    return MFD_SUCCESS;
} /* txpModBIASALM_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::txpAlrmTxEntry.txpLATCHEDTxFIFOERR
 * txpLATCHEDTxFIFOERR is subid 14 of txpAlrmTxEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.9.1.1.1.14
 * Description:
Line transmiter historical Mux FIFO error indicator.
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the txpLATCHEDTxFIFOERR data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param txpLATCHEDTxFIFOERR_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param txpLATCHEDTxFIFOERR_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by txpLATCHEDTxFIFOERR.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*txpLATCHEDTxFIFOERR_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update txpLATCHEDTxFIFOERR_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
txpLATCHEDTxFIFOERR_get( txpAlrmTxTable_rowreq_ctx *rowreq_ctx, char **txpLATCHEDTxFIFOERR_val_ptr_ptr, size_t *txpLATCHEDTxFIFOERR_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != txpLATCHEDTxFIFOERR_val_ptr_ptr) && (NULL != *txpLATCHEDTxFIFOERR_val_ptr_ptr));
   netsnmp_assert( NULL != txpLATCHEDTxFIFOERR_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:txpAlrmTxTable:txpLATCHEDTxFIFOERR_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the txpLATCHEDTxFIFOERR data.
 * copy (* txpLATCHEDTxFIFOERR_val_ptr_ptr ) data and (* txpLATCHEDTxFIFOERR_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for txpLATCHEDTxFIFOERR data
     */
    if ((NULL == (* txpLATCHEDTxFIFOERR_val_ptr_ptr )) ||
        ((* txpLATCHEDTxFIFOERR_val_ptr_len_ptr ) <
         (rowreq_ctx->data.txpLATCHEDTxFIFOERR_len* sizeof(rowreq_ctx->data.txpLATCHEDTxFIFOERR[0])))) {
        /*
         * allocate space for txpLATCHEDTxFIFOERR data
         */
        (* txpLATCHEDTxFIFOERR_val_ptr_ptr ) = malloc(rowreq_ctx->data.txpLATCHEDTxFIFOERR_len* sizeof(rowreq_ctx->data.txpLATCHEDTxFIFOERR[0]));
        if(NULL == (* txpLATCHEDTxFIFOERR_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.txpLATCHEDTxFIFOERR)\n");
            return MFD_ERROR;
        }
    }
    (* txpLATCHEDTxFIFOERR_val_ptr_len_ptr ) = rowreq_ctx->data.txpLATCHEDTxFIFOERR_len* sizeof(rowreq_ctx->data.txpLATCHEDTxFIFOERR[0]);
    memcpy( (* txpLATCHEDTxFIFOERR_val_ptr_ptr ), rowreq_ctx->data.txpLATCHEDTxFIFOERR, rowreq_ctx->data.txpLATCHEDTxFIFOERR_len* sizeof(rowreq_ctx->data.txpLATCHEDTxFIFOERR[0]) );

    return MFD_SUCCESS;
} /* txpLATCHEDTxFIFOERR_get */



/** @} */
