/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../edfaSeverityTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement edfaSeverityTable get routines.
 * TODO:240:M: Implement edfaSeverityTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table edfaSeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::edfaSeverityTable is subid 1 of edfaAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1, length: 12
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement edfaSeverityTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param edfaSeverityIndex_val
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int edfaSeverityTable_indexes_set_tbl_idx(edfaSeverityTable_mib_index *tbl_idx, long edfaSeverityIndex_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTable_indexes_set_tbl_idx","called\n"));

    /* edfaSeverityIndex(1)/INTEGER32/ASN_INTEGER/long(long)//l/a/w/e/R/d/h */
    tbl_idx->edfaSeverityIndex = edfaSeverityIndex_val;
    

    return MFD_SUCCESS;
} /* edfaSeverityTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int edfaSeverityTable_indexes_set(edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityIndex_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTable_indexes_set","called\n"));

    if(MFD_SUCCESS != edfaSeverityTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , edfaSeverityIndex_val
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != edfaSeverityTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* edfaSeverityTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityAmpStatus
 * edfaSeverityAmpStatus is subid 2 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the edfaSeverityAmpStatus data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityAmpStatus_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int edfaSeverityAmpStatus_get( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long * edfaSeverityAmpStatus_val_ptr )
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityAmpStatus_get","called\n"));

   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != edfaSeverityAmpStatus_val_ptr );

   netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the edfaSeverityAmpStatus data.
 * copy (* edfaSeverityAmpStatus_val_ptr ) from rowreq_ctx->data
 */
    (* edfaSeverityAmpStatus_val_ptr ) = rowreq_ctx->data.edfaSeverityAmpStatus;

    return MFD_SUCCESS;
} /* edfaSeverityAmpStatus_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityInputPower
 * edfaSeverityInputPower is subid 3 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the edfaSeverityInputPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityInputPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int edfaSeverityInputPower_get( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long * edfaSeverityInputPower_val_ptr )
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityInputPower_get","called\n"));

   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != edfaSeverityInputPower_val_ptr );

   netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the edfaSeverityInputPower data.
 * copy (* edfaSeverityInputPower_val_ptr ) from rowreq_ctx->data
 */
    (* edfaSeverityInputPower_val_ptr ) = rowreq_ctx->data.edfaSeverityInputPower;

    return MFD_SUCCESS;
} /* edfaSeverityInputPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityLop
 * edfaSeverityLop is subid 4 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the edfaSeverityLop data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityLop_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int edfaSeverityLop_get( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long * edfaSeverityLop_val_ptr )
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLop_get","called\n"));

   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != edfaSeverityLop_val_ptr );

   netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the edfaSeverityLop data.
 * copy (* edfaSeverityLop_val_ptr ) from rowreq_ctx->data
 */
    (* edfaSeverityLop_val_ptr ) = rowreq_ctx->data.edfaSeverityLop;

    return MFD_SUCCESS;
} /* edfaSeverityLop_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityLos
 * edfaSeverityLos is subid 5 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the edfaSeverityLos data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityLos_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int edfaSeverityLos_get( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long * edfaSeverityLos_val_ptr )
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLos_get","called\n"));

   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != edfaSeverityLos_val_ptr );

   netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the edfaSeverityLos data.
 * copy (* edfaSeverityLos_val_ptr ) from rowreq_ctx->data
 */
    (* edfaSeverityLos_val_ptr ) = rowreq_ctx->data.edfaSeverityLos;

    return MFD_SUCCESS;
} /* edfaSeverityLos_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityOutputPower
 * edfaSeverityOutputPower is subid 6 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the edfaSeverityOutputPower data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityOutputPower_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int edfaSeverityOutputPower_get( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long * edfaSeverityOutputPower_val_ptr )
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityOutputPower_get","called\n"));

   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != edfaSeverityOutputPower_val_ptr );

   netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the edfaSeverityOutputPower data.
 * copy (* edfaSeverityOutputPower_val_ptr ) from rowreq_ctx->data
 */
    (* edfaSeverityOutputPower_val_ptr ) = rowreq_ctx->data.edfaSeverityOutputPower;

    return MFD_SUCCESS;
} /* edfaSeverityOutputPower_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityTemperature
 * edfaSeverityTemperature is subid 7 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Extract the current value of the edfaSeverityTemperature data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityTemperature_val_ptr
 *        Pointer to storage for a long variable
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
 */
int edfaSeverityTemperature_get( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long * edfaSeverityTemperature_val_ptr )
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTemperature_get","called\n"));

   /** we should have a non-NULL pointer */
   netsnmp_assert( NULL != edfaSeverityTemperature_val_ptr );

   netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the edfaSeverityTemperature data.
 * copy (* edfaSeverityTemperature_val_ptr ) from rowreq_ctx->data
 */
    (* edfaSeverityTemperature_val_ptr ) = rowreq_ctx->data.edfaSeverityTemperature;

    return MFD_SUCCESS;
} /* edfaSeverityTemperature_get */

/** @} */
