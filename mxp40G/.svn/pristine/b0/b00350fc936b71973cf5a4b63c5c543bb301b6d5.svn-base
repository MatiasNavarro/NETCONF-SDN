/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp1SeverityTable.h"

#include "xfp1SeverityTable_data_access.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>

#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @ingroup interface
 * @addtogroup data_access data_access: Routines to access data
 *
 * These routines are used to locate the data used to satisfy
 * requests.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp1SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp1SeverityTable is subid 1 of xfpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.1, length: 12
 */

/**
 * initialization for xfp1SeverityTable data access
 *
 * This function is called during startup to allow you to
 * allocate any resources you need for the data table.
 *
 * @param xfp1SeverityTable_reg
 *        Pointer to xfp1SeverityTable_registration
 *
 * @retval MFD_SUCCESS : success.
 * @retval MFD_ERROR   : unrecoverable error.
 */
int xfp1SeverityTable_init_data(xfp1SeverityTable_registration * xfp1SeverityTable_reg)
{
	DEBUGMSGTL(("verbose:xfp1SeverityTable:xfp1SeverityTable_init_data","called\n"));

	/*
	 * TODO:303:o: Initialize xfp1SeverityTable data.
	 */
	/*
	 ***************************************************
	 ***             START EXAMPLE CODE              ***
	 ***---------------------------------------------***/
	/*
	 * if you are the sole writer for the file, you could
	 * open it here. However, as stated earlier, we are assuming
	 * the worst case, which in this case means that the file is
	 * written to by someone else, and might not even exist when
	 * we start up. So we can't do anything here.
	 */
	/*
	 ***---------------------------------------------***
	 ***              END  EXAMPLE CODE              ***
	 ***************************************************/

	return MFD_SUCCESS;
} /* xfp1SeverityTable_init_data */

/**
 * container overview
 *
 */

/**
 * container initialization
 *
 * @param container_ptr_ptr A pointer to a container pointer. If you
 *        create a custom container, use this parameter to return it
 *        to the MFD helper. If set to NULL, the MFD helper will
 *        allocate a container for you.
 * @param  cache A pointer to a cache structure. You can set the timeout
 *         and other cache flags using this pointer.
 *
 *  This function is called at startup to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases. If no custom
 *  container is allocated, the MFD code will create one for your.
 *
 *  This is also the place to set up cache behavior. The default, to
 *  simply set the cache timeout, will work well with the default
 *  container. If you are using a custom container, you may want to
 *  look at the cache helper documentation to see if there are any
 *  flags you want to set.
 *
 * @remark
 *  This would also be a good place to do any initialization needed
 *  for you data source. For example, opening a connection to another
 *  process that will supply the data, opening a database, etc.
 */
void xfp1SeverityTable_container_init(netsnmp_container **container_ptr_ptr, netsnmp_cache *cache)
{
	DEBUGMSGTL(("verbose:xfp1SeverityTable:xfp1SeverityTable_container_init","called\n"));

	if (NULL == container_ptr_ptr)
	{
		snmp_log(LOG_ERR, "bad container param to xfp1SeverityTable_container_init\n");
		return;
	}

	/*
	 * For advanced users, you can use a custom container. If you
	 * do not create one, one will be created for you.
	 */
	*container_ptr_ptr = NULL;

	if (NULL == cache)
	{
		snmp_log(LOG_ERR, "bad cache param to xfp1SeverityTable_container_init\n");
		return;
	}

	/*
	 * TODO:345:A: Set up xfp1SeverityTable cache properties.
	 *
	 * Also for advanced users, you can set parameters for the
	 * cache. Do not change the magic pointer, as it is used
	 * by the MFD helper. To completely disable caching, set
	 * cache->enabled to 0.
	 */
	cache->timeout = XFP1SEVERITYTABLE_CACHE_TIMEOUT; /* seconds */
} /* xfp1SeverityTable_container_init */

/**
 * container shutdown
 *
 * @param container_ptr A pointer to the container.
 *
 *  This function is called at shutdown to allow you to customize certain
 *  aspects of the access method. For the most part, it is for advanced
 *  users. The default code should suffice for most cases.
 *
 *  This function is called before xfp1SeverityTable_container_free().
 *
 * @remark
 *  This would also be a good place to do any cleanup needed
 *  for you data source. For example, closing a connection to another
 *  process that supplied the data, closing a database, etc.
 */
void xfp1SeverityTable_container_shutdown(netsnmp_container *container_ptr)
{
	DEBUGMSGTL(("verbose:xfp1SeverityTable:xfp1SeverityTable_container_shutdown","called\n"));

	if (NULL == container_ptr)
	{
		snmp_log(LOG_ERR, "bad params to xfp1SeverityTable_container_shutdown\n");
		return;
	}

} /* xfp1SeverityTable_container_shutdown */

/**
 * load initial data
 *
 * TODO:350:M: Implement xfp1SeverityTable data load
 * This function will also be called by the cache helper to load
 * the container again (after the container free function has been
 * called to free the previous contents).
 *
 * @param container container to which items should be inserted
 *
 * @retval MFD_SUCCESS              : success.
 * @retval MFD_RESOURCE_UNAVAILABLE : Can't access data source
 * @retval MFD_ERROR                : other error.
 *
 *  This function is called to load the index(es) (and data, optionally)
 *  for the every row in the data set.
 *
 * @remark
 *  While loading the data, the only important thing is the indexes.
 *  If access to your data is cheap/fast (e.g. you have a pointer to a
 *  structure in memory), it would make sense to update the data here.
 *  If, however, the accessing the data invovles more work (e.g. parsing
 *  some other existing data, or peforming calculations to derive the data),
 *  then you can limit yourself to setting the indexes and saving any
 *  information you will need later. Then use the saved information in
 *  xfp1SeverityTable_row_prep() for populating data.
 *
 * @note
 *  If you need consistency between rows (like you want statistics
 *  for each row to be from the same time frame), you should set all
 *  data here.
 *
 */
int xfp1SeverityTable_container_load(netsnmp_container *container)
{
	DEBUGMSGTL(("verbose:xfp1SeverityTable:xfp1SeverityTable_container_load","called\n"));

	xfp1SeverityTable_rowreq_ctx *rowreq_ctx;
	size_t count = 0;

	/*
	 * temporary storage for index values
	 */
	/*
	 * xfp1SeverityIndex(1)/INTEGER32/ASN_INTEGER/long(long)//l/a/w/e/R/d/h
	 */
	long xfp1SeverityIndex = 1;

	/*
	 * this example code is based on a data source that is a
	 * text file to be read and parsed.
	 */

	/*
	 * TODO:352:M: |   |-> set indexes in new xfp1SeverityTable rowreq context.
	 * data context will be set from the param (unless NULL,
	 *      in which case a new data context will be allocated)
	 */
	rowreq_ctx = xfp1SeverityTable_allocate_rowreq_ctx(NULL);
	if (NULL == rowreq_ctx)
	{
		snmp_log(LOG_ERR, "memory allocation failed\n");
		return MFD_RESOURCE_UNAVAILABLE;
	}
	if (MFD_SUCCESS != xfp1SeverityTable_indexes_set(rowreq_ctx, xfp1SeverityIndex))
	{
		snmp_log(LOG_ERR, "error setting index while loading "
				"xfp1SeverityTable data.\n");
		xfp1SeverityTable_release_rowreq_ctx(rowreq_ctx);
	}

	shm_handler_create(pt_monitor_struct);

	/*
	 * TODO:352:r: |   |-> populate xfp1SeverityTable data context.
	 * Populate data context here. (optionally, delay until row prep)
	 */
	/*
	 * TRANSIENT or semi-TRANSIENT data:
	 * copy data or save any info needed to do it in row_prep.
	 */
	/*
	 * setup/save data for xfp1SeverityPresence
	 * xfp1SeverityPresence(2)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityPresence = pt_monitor_struct->xfp_struct.severity[0].presence;

	/*
	 * setup/save data for xfp1SeverityRxLoss
	 * xfp1SeverityRxLoss(3)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityRxLoss = pt_monitor_struct->xfp_struct.severity[0].rx_loss;

	/*
	 * setup/save data for xfp1SeverityReady
	 * xfp1SeverityReady(4)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityReady = pt_monitor_struct->xfp_struct.severity[0].ready;

	/*
	 * setup/save data for xfp1SeverityTxPower
	 * xfp1SeverityTxPower(5)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityTxPower = pt_monitor_struct->xfp_struct.severity[0].tx_power;

	/*
	 * setup/save data for xfp1SeverityRxPower
	 * xfp1SeverityRxPower(6)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityRxPower = pt_monitor_struct->xfp_struct.severity[0].rx_power;

	/*
	 * setup/save data for xfp1SeverityTemperature
	 * xfp1SeverityTemperature(7)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityTemperature = pt_monitor_struct->xfp_struct.severity[0].temperature;

	/*
	 * setup/save data for xfp1SeverityLowTxPower
	 * xfp1SeverityLowTxPower(8)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityLowTxPower = pt_monitor_struct->xfp_struct.severity[0].low_tx_power;

	/*
	 * setup/save data for xfp1SeverityHighTxPower
	 * xfp1SeverityHighTxPower(9)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityHighTxPower = pt_monitor_struct->xfp_struct.severity[0].high_tx_power;

	/*
	 * setup/save data for xfp1SeverityLowRxPower
	 * xfp1SeverityLowRxPower(10)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityLowRxPower = pt_monitor_struct->xfp_struct.severity[0].low_rx_power;

	/*
	 * setup/save data for xfp1SeverityHighRxPower
	 * xfp1SeverityHighRxPower(11)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityHighRxPower = pt_monitor_struct->xfp_struct.severity[0].high_rx_power;

	/*
	 * setup/save data for xfp1SeverityRxCdrLossOfLock
	 * xfp1SeverityRxCdrLossOfLock(12)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityRxCdrLossOfLock = pt_monitor_struct->xfp_struct.severity[0].rx_cdr_loss_of_lock;

	/*
	 * setup/save data for xfp1SeverityTxCdrLossOfLock
	 * xfp1SeverityTxCdrLossOfLock(13)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityTxCdrLossOfLock = pt_monitor_struct->xfp_struct.severity[0].tx_cdr_loss_of_lock;

	/*
	 * setup/save data for xfp1SeverityLaserFault
	 * xfp1SeverityLaserFault(14)/INTEGER32/ASN_INTEGER/long(long)//l/A/W/e/r/d/h
	 */
	/** no mapping */
	rowreq_ctx->data.xfp1SeverityLaserFault = pt_monitor_struct->xfp_struct.severity[0].laser_fault;

	/*
	 * insert into table container
	 */
	CONTAINER_INSERT(container, rowreq_ctx);

	DEBUGMSGT(("verbose:xfp1SeverityTable:xfp1SeverityTable_container_load", "inserted %d records\n", count));

	return MFD_SUCCESS;
} /* xfp1SeverityTable_container_load */

/**
 * container clean up
 *
 * @param container container with all current items
 *
 *  This optional callback is called prior to all
 *  item's being removed from the container. If you
 *  need to do any processing before that, do it here.
 *
 * @note
 *  The MFD helper will take care of releasing all the row contexts.
 *
 */
void xfp1SeverityTable_container_free(netsnmp_container *container)
{
	DEBUGMSGTL(("verbose:xfp1SeverityTable:xfp1SeverityTable_container_free","called\n"));

	/*
	 * TODO:380:M: Free xfp1SeverityTable container data.
	 */
} /* xfp1SeverityTable_container_free */

/**
 * prepare row for processing.
 *
 *  When the agent has located the row for a request, this function is
 *  called to prepare the row for processing. If you fully populated
 *  the data context during the index setup phase, you may not need to
 *  do anything.
 *
 * @param rowreq_ctx pointer to a context.
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 */
int xfp1SeverityTable_row_prep(xfp1SeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:xfp1SeverityTable:xfp1SeverityTable_row_prep","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:390:o: Prepare row for request.
	 * If populating row data was delayed, this is the place to
	 * fill in the row for this request.
	 */

	return MFD_SUCCESS;
} /* xfp1SeverityTable_row_prep */

/** @} */
