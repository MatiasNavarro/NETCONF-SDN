/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../fanTable.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement fanTable get routines.
 * TODO:240:M: Implement fanTable mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table fanTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::fanTable is subid 2 of mxpMIBObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.2, length: 9
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement fanTable data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param fanIndex_ptr
 * @param fanIndex_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
fanTable_indexes_set_tbl_idx(fanTable_mib_index *tbl_idx, char *fanIndex_val_ptr,  size_t fanIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:fanTable:fanTable_indexes_set_tbl_idx","called\n"));

    /* fanIndex(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->fanIndex_len = sizeof(tbl_idx->fanIndex)/sizeof(tbl_idx->fanIndex[0]); /* max length */
    /*
     * make sure there is enough space for fanIndex data
     */
    if ((NULL == tbl_idx->fanIndex) ||
        (tbl_idx->fanIndex_len <
         (fanIndex_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (fanIndex_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->fanIndex_len = fanIndex_val_ptr_len;
    memcpy( tbl_idx->fanIndex, fanIndex_val_ptr, fanIndex_val_ptr_len* sizeof(fanIndex_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* fanTable_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
fanTable_indexes_set(fanTable_rowreq_ctx *rowreq_ctx, char *fanIndex_val_ptr,  size_t fanIndex_val_ptr_len)
{
    DEBUGMSGTL(("verbose:fanTable:fanTable_indexes_set","called\n"));

    if(MFD_SUCCESS != fanTable_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , fanIndex_val_ptr, fanIndex_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != fanTable_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* fanTable_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::fanEntry.fan1
 * fan1 is subid 2 of fanEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.2.1.2
 * Description:
Fan 1 status
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the fan1 data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param fan1_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param fan1_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by fan1.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*fan1_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update fan1_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
fan1_get( fanTable_rowreq_ctx *rowreq_ctx, char **fan1_val_ptr_ptr, size_t *fan1_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != fan1_val_ptr_ptr) && (NULL != *fan1_val_ptr_ptr));
   netsnmp_assert( NULL != fan1_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:fanTable:fan1_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the fan1 data.
 * copy (* fan1_val_ptr_ptr ) data and (* fan1_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for fan1 data
     */
    if ((NULL == (* fan1_val_ptr_ptr )) ||
        ((* fan1_val_ptr_len_ptr ) <
         (rowreq_ctx->data.fan1_len* sizeof(rowreq_ctx->data.fan1[0])))) {
        /*
         * allocate space for fan1 data
         */
        (* fan1_val_ptr_ptr ) = malloc(rowreq_ctx->data.fan1_len* sizeof(rowreq_ctx->data.fan1[0]));
        if(NULL == (* fan1_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.fan1)\n");
            return MFD_ERROR;
        }
    }
    (* fan1_val_ptr_len_ptr ) = rowreq_ctx->data.fan1_len* sizeof(rowreq_ctx->data.fan1[0]);
    memcpy( (* fan1_val_ptr_ptr ), rowreq_ctx->data.fan1, rowreq_ctx->data.fan1_len* sizeof(rowreq_ctx->data.fan1[0]) );

    return MFD_SUCCESS;
} /* fan1_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::fanEntry.fan2
 * fan2 is subid 3 of fanEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.2.1.3
 * Description:
Fan 2 status
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the fan2 data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param fan2_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param fan2_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by fan2.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*fan2_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update fan2_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
fan2_get( fanTable_rowreq_ctx *rowreq_ctx, char **fan2_val_ptr_ptr, size_t *fan2_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != fan2_val_ptr_ptr) && (NULL != *fan2_val_ptr_ptr));
   netsnmp_assert( NULL != fan2_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:fanTable:fan2_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the fan2 data.
 * copy (* fan2_val_ptr_ptr ) data and (* fan2_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for fan2 data
     */
    if ((NULL == (* fan2_val_ptr_ptr )) ||
        ((* fan2_val_ptr_len_ptr ) <
         (rowreq_ctx->data.fan2_len* sizeof(rowreq_ctx->data.fan2[0])))) {
        /*
         * allocate space for fan2 data
         */
        (* fan2_val_ptr_ptr ) = malloc(rowreq_ctx->data.fan2_len* sizeof(rowreq_ctx->data.fan2[0]));
        if(NULL == (* fan2_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.fan2)\n");
            return MFD_ERROR;
        }
    }
    (* fan2_val_ptr_len_ptr ) = rowreq_ctx->data.fan2_len* sizeof(rowreq_ctx->data.fan2[0]);
    memcpy( (* fan2_val_ptr_ptr ), rowreq_ctx->data.fan2, rowreq_ctx->data.fan2_len* sizeof(rowreq_ctx->data.fan2[0]) );

    return MFD_SUCCESS;
} /* fan2_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::fanEntry.fan3
 * fan3 is subid 4 of fanEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.2.1.4
 * Description:
Fan 3 status
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the fan3 data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param fan3_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param fan3_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by fan3.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*fan3_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update fan3_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
fan3_get( fanTable_rowreq_ctx *rowreq_ctx, char **fan3_val_ptr_ptr, size_t *fan3_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != fan3_val_ptr_ptr) && (NULL != *fan3_val_ptr_ptr));
   netsnmp_assert( NULL != fan3_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:fanTable:fan3_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the fan3 data.
 * copy (* fan3_val_ptr_ptr ) data and (* fan3_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for fan3 data
     */
    if ((NULL == (* fan3_val_ptr_ptr )) ||
        ((* fan3_val_ptr_len_ptr ) <
         (rowreq_ctx->data.fan3_len* sizeof(rowreq_ctx->data.fan3[0])))) {
        /*
         * allocate space for fan3 data
         */
        (* fan3_val_ptr_ptr ) = malloc(rowreq_ctx->data.fan3_len* sizeof(rowreq_ctx->data.fan3[0]));
        if(NULL == (* fan3_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.fan3)\n");
            return MFD_ERROR;
        }
    }
    (* fan3_val_ptr_len_ptr ) = rowreq_ctx->data.fan3_len* sizeof(rowreq_ctx->data.fan3[0]);
    memcpy( (* fan3_val_ptr_ptr ), rowreq_ctx->data.fan3, rowreq_ctx->data.fan3_len* sizeof(rowreq_ctx->data.fan3[0]) );

    return MFD_SUCCESS;
} /* fan3_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::fanEntry.fan4
 * fan4 is subid 5 of fanEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.2.1.5
 * Description:
Fan 4 status
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the fan4 data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param fan4_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param fan4_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by fan4.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*fan4_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update fan4_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
fan4_get( fanTable_rowreq_ctx *rowreq_ctx, char **fan4_val_ptr_ptr, size_t *fan4_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != fan4_val_ptr_ptr) && (NULL != *fan4_val_ptr_ptr));
   netsnmp_assert( NULL != fan4_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:fanTable:fan4_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the fan4 data.
 * copy (* fan4_val_ptr_ptr ) data and (* fan4_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for fan4 data
     */
    if ((NULL == (* fan4_val_ptr_ptr )) ||
        ((* fan4_val_ptr_len_ptr ) <
         (rowreq_ctx->data.fan4_len* sizeof(rowreq_ctx->data.fan4[0])))) {
        /*
         * allocate space for fan4 data
         */
        (* fan4_val_ptr_ptr ) = malloc(rowreq_ctx->data.fan4_len* sizeof(rowreq_ctx->data.fan4[0]));
        if(NULL == (* fan4_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.fan4)\n");
            return MFD_ERROR;
        }
    }
    (* fan4_val_ptr_len_ptr ) = rowreq_ctx->data.fan4_len* sizeof(rowreq_ctx->data.fan4[0]);
    memcpy( (* fan4_val_ptr_ptr ), rowreq_ctx->data.fan4, rowreq_ctx->data.fan4_len* sizeof(rowreq_ctx->data.fan4[0]) );

    return MFD_SUCCESS;
} /* fan4_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::fanEntry.fan5
 * fan5 is subid 6 of fanEntry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.2.1.6
 * Description:
Fan 5 status
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the fan5 data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param fan5_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param fan5_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by fan5.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*fan5_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update fan5_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
fan5_get( fanTable_rowreq_ctx *rowreq_ctx, char **fan5_val_ptr_ptr, size_t *fan5_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != fan5_val_ptr_ptr) && (NULL != *fan5_val_ptr_ptr));
   netsnmp_assert( NULL != fan5_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:fanTable:fan5_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the fan5 data.
 * copy (* fan5_val_ptr_ptr ) data and (* fan5_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for fan5 data
     */
    if ((NULL == (* fan5_val_ptr_ptr )) ||
        ((* fan5_val_ptr_len_ptr ) <
         (rowreq_ctx->data.fan5_len* sizeof(rowreq_ctx->data.fan5[0])))) {
        /*
         * allocate space for fan5 data
         */
        (* fan5_val_ptr_ptr ) = malloc(rowreq_ctx->data.fan5_len* sizeof(rowreq_ctx->data.fan5[0]));
        if(NULL == (* fan5_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.fan5)\n");
            return MFD_ERROR;
        }
    }
    (* fan5_val_ptr_len_ptr ) = rowreq_ctx->data.fan5_len* sizeof(rowreq_ctx->data.fan5[0]);
    memcpy( (* fan5_val_ptr_ptr ), rowreq_ctx->data.fan5, rowreq_ctx->data.fan5_len* sizeof(rowreq_ctx->data.fan5[0]) );

    return MFD_SUCCESS;
} /* fan5_get */



/** @} */
