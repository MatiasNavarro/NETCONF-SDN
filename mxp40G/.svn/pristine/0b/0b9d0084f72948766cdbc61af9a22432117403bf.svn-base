/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 *
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "tpClient2SeverityTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>
#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @defgroup data_set data_set: Routines to set data
 *
 * These routines are used to set the value for individual objects. The
 * row context is passed, along with the new value.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table tpClient2SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::tpClient2SeverityTable is subid 3 of tpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3, length: 12
*/
    /*
     * NOTE: if you update this chart, please update the versions in
     *       local/mib2c-conf.d/parent-set.m2i
     *       agent/mibgroup/helpers/baby_steps.c
     * while you're at it.
     */
    /*
     ***********************************************************************
     * Baby Steps Flow Chart (2004.06.05)                                  *
     *                                                                     *
     * +--------------+    +================+    U = unconditional path    *
     * |optional state|    ||required state||    S = path for success      *
     * +--------------+    +================+    E = path for error        *
     ***********************************************************************
     *
     *                        +--------------+
     *                        |     pre      |
     *                        |   request    |
     *                        +--------------+
     *                               | U
     *                        +==============+
     *       +----------------||  object    ||
     *       |              E ||  lookup    ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |              E ||   check    ||
     *       |<---------------||   values   ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |       +<-------||   undo     ||
     *       |       |      E ||   setup    ||
     *       |       |        +==============+
     *       |       |               | S
     *       |       |        +==============+
     *       |       |        ||    set     ||-------------------------->+
     *       |       |        ||   value    || E                         |
     *       |       |        +==============+                           |
     *       |       |               | S                                 |
     *       |       |        +--------------+                           |
     *       |       |        |    check     |-------------------------->|
     *       |       |        |  consistency | E                         |
     *       |       |        +--------------+                           |
     *       |       |               | S                                 |
     *       |       |        +==============+         +==============+  |
     *       |       |        ||   commit   ||-------->||     undo   ||  |
     *       |       |        ||            || E       ||    commit  ||  |
     *       |       |        +==============+         +==============+  |
     *       |       |               | S                     U |<--------+
     *       |       |        +--------------+         +==============+
     *       |       |        | irreversible |         ||    undo    ||
     *       |       |        |    commit    |         ||     set    ||
     *       |       |        +--------------+         +==============+
     *       |       |               | U                     U |
     *       |       +-------------->|<------------------------+
     *       |                +==============+
     *       |                ||   undo     ||
     *       |                ||  cleanup   ||
     *       |                +==============+
     *       +---------------------->| U
     *                        +--------------+
     *                        |    post      |
     *                        |   request    |
     *                        +--------------+
     *
     */

/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 *
 * Note that the undo context has been allocated with
 * tpClient2SeverityTable_allocate_data(), but may need extra
 * initialization similar to what you may have done in
 * tpClient2SeverityTable_rowreq_ctx_init().
 * Note that an individual node's undo_setup function will only be called
 * if that node is being set to a new value.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in the node's undo_setup
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
tpClient2SeverityTable_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityTable_undo_setup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> Setup tpClient2SeverityTable undo.
     * set up tpClient2SeverityTable undo information, in preparation for a set.
     * Undo storage is in (* tpClient2SeveritySecmonLom_val_ptr )*
     */

    return rc;
} /* tpClient2SeverityTable_undo_setup */

/**
 * Undo a set request.
 *
 * This function will be called before the individual node undo
 * functions are called. If you need to do any undo that is not
 * related to a specific column, you can do it here.
 *
 * Note that an individual node's undo function will only be called
 * if that node is being set to a new value.
 *
 * If there is anything  specific to a particular column (e.g. releasing
 * memory for a string), you should do that setup in the node's undo
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
tpClient2SeverityTable_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityTable_undo","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> tpClient2SeverityTable undo.
     * tpClient2SeverityTable undo information, in response to a failed set.
     * Undo storage is in (* tpClient2SeveritySecmonLom_val_ptr )*
     */

    return rc;
} /* tpClient2SeverityTable_undo_setup */

/**
 * Cleanup up context undo information.
 *
 * This function will be called after set/commit processing. If you
 * allocated any resources in undo_setup, this is the place to release
 * those resources.
 *
 * This function is called regardless of the success or failure of the set
 * request. If you need to perform different steps for cleanup depending
 * on success or failure, you can add a flag to the rowreq_ctx.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
tpClient2SeverityTable_undo_cleanup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityTable_undo_cleanup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:452:M: |-> Cleanup tpClient2SeverityTable undo.
     * Undo storage is in (* tpClient2SeveritySecmonLom_val_ptr )*
     */

    return rc;
} /* tpClient2SeverityTable_undo_cleanup */

/**
 * commit new values.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * tpClient2SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param tpClient2SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
tpClient2SeverityTable_commit( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;
    int             save_flags;

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityTable_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * save flags, then clear until we actually do something
     */
    save_flags = rowreq_ctx->column_set_flags;
    rowreq_ctx->column_set_flags = 0;

    /*
     * commit tpClient2SeverityTable data
     * 1) check the column's flag in save_flags to see if it was set.
     * 2) clear the flag when you handle that column
     * 3) set the column's flag in column_set_flags if it needs undo
     *    processing in case of a failure.
     */
    if (save_flags & COLUMN_TPCLIENT2SEVERITYFRAMERFSMMS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYFRAMERFSMMS_FLAG; /* clear tpClient2SeverityFramerFsmms */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityFramerFsmms.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityFramerFsmms commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityFramerFsmms
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYFRAMERFSMMS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYFRAMERFSSUSTS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYFRAMERFSSUSTS_FLAG; /* clear tpClient2SeverityFramerFssusts */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityFramerFssusts.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityFramerFssusts commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityFramerFssusts
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYFRAMERFSSUSTS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYFRAMERSOOF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYFRAMERSOOF_FLAG; /* clear tpClient2SeverityFramerSoof */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityFramerSoof.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityFramerSoof commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityFramerSoof
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYFRAMERSOOF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYFRAMERSLOF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYFRAMERSLOF_FLAG; /* clear tpClient2SeverityFramerSlof */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityFramerSlof.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityFramerSlof commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityFramerSlof
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYFRAMERSLOF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYFRAMERSIF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYFRAMERSIF_FLAG; /* clear tpClient2SeverityFramerSif */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityFramerSif.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityFramerSif commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityFramerSif
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYFRAMERSIF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYFRAMERFST_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYFRAMERFST_FLAG; /* clear tpClient2SeverityFramerFst */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityFramerFst.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityFramerFst commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityFramerFst
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYFRAMERFST_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYLOSSTATLOSF_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYLOSSTATLOSF_FLAG; /* clear tpClient2SeverityLosstatLosf */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityLosstatLosf.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityLosstatLosf commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityLosstatLosf
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYLOSSTATLOSF_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYPATHMONACCSTAT_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYPATHMONACCSTAT_FLAG; /* clear tpClient2SeverityPathmonAccstat */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityPathmonAccstat.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityPathmonAccstat commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityPathmonAccstat
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYPATHMONACCSTAT_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYPATHMONDAIS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYPATHMONDAIS_FLAG; /* clear tpClient2SeverityPathmonDais */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityPathmonDais.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityPathmonDais commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityPathmonDais
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYPATHMONDAIS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYPATHMONDBDI_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYPATHMONDBDI_FLAG; /* clear tpClient2SeverityPathmonDbdi */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityPathmonDbdi.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityPathmonDbdi commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityPathmonDbdi
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYPATHMONDBDI_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYPATHMONDLCK_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYPATHMONDLCK_FLAG; /* clear tpClient2SeverityPathmonDlck */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityPathmonDlck.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityPathmonDlck commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityPathmonDlck
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYPATHMONDLCK_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYPATHMONMSIUNST_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYPATHMONMSIUNST_FLAG; /* clear tpClient2SeverityPathmonMsiunst */
       /*
        * TODO:482:o: |-> commit column tpClient2SeverityPathmonMsiunst.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeverityPathmonMsiunst commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeverityPathmonMsiunst
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYPATHMONMSIUNST_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYSECMONBIPSFS_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYSECMONBIPSFS_FLAG; /* clear tpClient2SeveritySecmonBipsfs */
       /*
        * TODO:482:o: |-> commit column tpClient2SeveritySecmonBipsfs.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeveritySecmonBipsfs commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeveritySecmonBipsfs
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYSECMONBIPSFS_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYSECMONDBDI_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYSECMONDBDI_FLAG; /* clear tpClient2SeveritySecmonDbdi */
       /*
        * TODO:482:o: |-> commit column tpClient2SeveritySecmonDbdi.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeveritySecmonDbdi commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeveritySecmonDbdi
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYSECMONDBDI_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYSECMONDIAE_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYSECMONDIAE_FLAG; /* clear tpClient2SeveritySecmonDiae */
       /*
        * TODO:482:o: |-> commit column tpClient2SeveritySecmonDiae.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeveritySecmonDiae commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeveritySecmonDiae
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYSECMONDIAE_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYSECMONFLOM_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYSECMONFLOM_FLAG; /* clear tpClient2SeveritySecmonFlom */
       /*
        * TODO:482:o: |-> commit column tpClient2SeveritySecmonFlom.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeveritySecmonFlom commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeveritySecmonFlom
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYSECMONFLOM_FLAG;
       }
    }

    if (save_flags & COLUMN_TPCLIENT2SEVERITYSECMONLOM_FLAG) {
       save_flags &= ~COLUMN_TPCLIENT2SEVERITYSECMONLOM_FLAG; /* clear tpClient2SeveritySecmonLom */
       /*
        * TODO:482:o: |-> commit column tpClient2SeveritySecmonLom.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"tpClient2SeverityTable column tpClient2SeveritySecmonLom commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo tpClient2SeveritySecmonLom
             */
            rowreq_ctx->column_set_flags |= COLUMN_TPCLIENT2SEVERITYSECMONLOM_FLAG;
       }
    }

    /*
     * if we successfully commited this row, set the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags |= MFD_ROW_DIRTY;
    }

    if (save_flags) {
       snmp_log(LOG_ERR, "unhandled columns (0x%x) in commit\n", save_flags);
       return MFD_ERROR;
    }

    return rc;
} /* tpClient2SeverityTable_commit */

/**
 * undo commit new values.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * tpClient2SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param tpClient2SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
tpClient2SeverityTable_undo_commit( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityTable_undo_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:485:M: |-> Undo tpClient2SeverityTable commit.
     * check the column's flag in rowreq_ctx->column_set_flags to see
     * if it was set during commit, then undo it.
     *
     * eg: if (rowreq_ctx->column_set_flags & COLUMN__FLAG) {}
     */

    
    /*
     * if we successfully un-commited this row, clear the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags &= ~MFD_ROW_DIRTY;
    }

    return rc;
} /* tpClient2SeverityTable_undo_commit */

/*
 * TODO:440:M: Implement tpClient2SeverityTable node value checks.
 * TODO:450:M: Implement tpClient2SeverityTable undo functions.
 * TODO:460:M: Implement tpClient2SeverityTable set functions.
 * TODO:480:M: Implement tpClient2SeverityTable commit functions.
 */
/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityFramerFsmms
 * tpClient2SeverityFramerFsmms is subid 2 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityFramerFsmms_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityFramerFsmms_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerFsmms_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFsmms_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityFramerFsmms value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityFramerFsmms value not illegal */
} /* tpClient2SeverityFramerFsmms_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityFramerFsmms_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFsmms_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityFramerFsmms undo.
     */
    /*
     * copy tpClient2SeverityFramerFsmms data
     * set rowreq_ctx->undo->tpClient2SeverityFramerFsmms from rowreq_ctx->data.tpClient2SeverityFramerFsmms
     */
    rowreq_ctx->undo->tpClient2SeverityFramerFsmms = rowreq_ctx->data.tpClient2SeverityFramerFsmms;


    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFsmms_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityFramerFsmms_val
 *        A long containing the new value.
 */
int
tpClient2SeverityFramerFsmms_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerFsmms_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFsmms_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityFramerFsmms value.
     * set tpClient2SeverityFramerFsmms value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityFramerFsmms = tpClient2SeverityFramerFsmms_val;

    // Set severity on shared memory
    setTpClient2Severity("FramerFsmms", tpClient2SeverityFramerFsmms_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFsmms_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityFramerFsmms_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFsmms_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityFramerFsmms undo.
     */
    /*
     * copy tpClient2SeverityFramerFsmms data
     * set rowreq_ctx->data.tpClient2SeverityFramerFsmms from rowreq_ctx->undo->tpClient2SeverityFramerFsmms
     */
    rowreq_ctx->data.tpClient2SeverityFramerFsmms = rowreq_ctx->undo->tpClient2SeverityFramerFsmms;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFsmms_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityFramerFssusts
 * tpClient2SeverityFramerFssusts is subid 3 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityFramerFssusts_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityFramerFssusts_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerFssusts_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFssusts_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityFramerFssusts value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityFramerFssusts value not illegal */
} /* tpClient2SeverityFramerFssusts_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityFramerFssusts_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFssusts_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityFramerFssusts undo.
     */
    /*
     * copy tpClient2SeverityFramerFssusts data
     * set rowreq_ctx->undo->tpClient2SeverityFramerFssusts from rowreq_ctx->data.tpClient2SeverityFramerFssusts
     */
    rowreq_ctx->undo->tpClient2SeverityFramerFssusts = rowreq_ctx->data.tpClient2SeverityFramerFssusts;


    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFssusts_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityFramerFssusts_val
 *        A long containing the new value.
 */
int
tpClient2SeverityFramerFssusts_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerFssusts_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFssusts_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityFramerFssusts value.
     * set tpClient2SeverityFramerFssusts value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityFramerFssusts = tpClient2SeverityFramerFssusts_val;

    // Set severity on shared memory
    setTpClient2Severity("FramerFssusts", tpClient2SeverityFramerFssusts_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFssusts_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityFramerFssusts_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFssusts_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityFramerFssusts undo.
     */
    /*
     * copy tpClient2SeverityFramerFssusts data
     * set rowreq_ctx->data.tpClient2SeverityFramerFssusts from rowreq_ctx->undo->tpClient2SeverityFramerFssusts
     */
    rowreq_ctx->data.tpClient2SeverityFramerFssusts = rowreq_ctx->undo->tpClient2SeverityFramerFssusts;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFssusts_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityFramerSoof
 * tpClient2SeverityFramerSoof is subid 4 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityFramerSoof_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityFramerSoof_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerSoof_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSoof_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityFramerSoof value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityFramerSoof value not illegal */
} /* tpClient2SeverityFramerSoof_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityFramerSoof_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSoof_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityFramerSoof undo.
     */
    /*
     * copy tpClient2SeverityFramerSoof data
     * set rowreq_ctx->undo->tpClient2SeverityFramerSoof from rowreq_ctx->data.tpClient2SeverityFramerSoof
     */
    rowreq_ctx->undo->tpClient2SeverityFramerSoof = rowreq_ctx->data.tpClient2SeverityFramerSoof;


    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSoof_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityFramerSoof_val
 *        A long containing the new value.
 */
int
tpClient2SeverityFramerSoof_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerSoof_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSoof_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityFramerSoof value.
     * set tpClient2SeverityFramerSoof value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityFramerSoof = tpClient2SeverityFramerSoof_val;

    // Set severity on shared memory
    setTpClient2Severity("FramerSoof", tpClient2SeverityFramerSoof_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSoof_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityFramerSoof_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSoof_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityFramerSoof undo.
     */
    /*
     * copy tpClient2SeverityFramerSoof data
     * set rowreq_ctx->data.tpClient2SeverityFramerSoof from rowreq_ctx->undo->tpClient2SeverityFramerSoof
     */
    rowreq_ctx->data.tpClient2SeverityFramerSoof = rowreq_ctx->undo->tpClient2SeverityFramerSoof;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSoof_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityFramerSlof
 * tpClient2SeverityFramerSlof is subid 5 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityFramerSlof_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityFramerSlof_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerSlof_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSlof_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityFramerSlof value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityFramerSlof value not illegal */
} /* tpClient2SeverityFramerSlof_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityFramerSlof_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSlof_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityFramerSlof undo.
     */
    /*
     * copy tpClient2SeverityFramerSlof data
     * set rowreq_ctx->undo->tpClient2SeverityFramerSlof from rowreq_ctx->data.tpClient2SeverityFramerSlof
     */
    rowreq_ctx->undo->tpClient2SeverityFramerSlof = rowreq_ctx->data.tpClient2SeverityFramerSlof;


    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSlof_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityFramerSlof_val
 *        A long containing the new value.
 */
int
tpClient2SeverityFramerSlof_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerSlof_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSlof_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityFramerSlof value.
     * set tpClient2SeverityFramerSlof value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityFramerSlof = tpClient2SeverityFramerSlof_val;

    // Set severity on shared memory
    setTpClient2Severity("FramerSlof", tpClient2SeverityFramerSlof_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSlof_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityFramerSlof_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSlof_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityFramerSlof undo.
     */
    /*
     * copy tpClient2SeverityFramerSlof data
     * set rowreq_ctx->data.tpClient2SeverityFramerSlof from rowreq_ctx->undo->tpClient2SeverityFramerSlof
     */
    rowreq_ctx->data.tpClient2SeverityFramerSlof = rowreq_ctx->undo->tpClient2SeverityFramerSlof;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSlof_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityFramerSif
 * tpClient2SeverityFramerSif is subid 6 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityFramerSif_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityFramerSif_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerSif_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSif_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityFramerSif value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityFramerSif value not illegal */
} /* tpClient2SeverityFramerSif_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityFramerSif_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSif_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityFramerSif undo.
     */
    /*
     * copy tpClient2SeverityFramerSif data
     * set rowreq_ctx->undo->tpClient2SeverityFramerSif from rowreq_ctx->data.tpClient2SeverityFramerSif
     */
    rowreq_ctx->undo->tpClient2SeverityFramerSif = rowreq_ctx->data.tpClient2SeverityFramerSif;


    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSif_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityFramerSif_val
 *        A long containing the new value.
 */
int
tpClient2SeverityFramerSif_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerSif_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSif_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityFramerSif value.
     * set tpClient2SeverityFramerSif value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityFramerSif = tpClient2SeverityFramerSif_val;

    // Set severity on shared memory
    setTpClient2Severity("FramerSif", tpClient2SeverityFramerSif_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSif_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityFramerSif_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerSif_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityFramerSif undo.
     */
    /*
     * copy tpClient2SeverityFramerSif data
     * set rowreq_ctx->data.tpClient2SeverityFramerSif from rowreq_ctx->undo->tpClient2SeverityFramerSif
     */
    rowreq_ctx->data.tpClient2SeverityFramerSif = rowreq_ctx->undo->tpClient2SeverityFramerSif;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityFramerSif_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityFramerFst
 * tpClient2SeverityFramerFst is subid 7 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityFramerFst_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityFramerFst_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerFst_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFst_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityFramerFst value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityFramerFst value not illegal */
} /* tpClient2SeverityFramerFst_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityFramerFst_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFst_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityFramerFst undo.
     */
    /*
     * copy tpClient2SeverityFramerFst data
     * set rowreq_ctx->undo->tpClient2SeverityFramerFst from rowreq_ctx->data.tpClient2SeverityFramerFst
     */
    rowreq_ctx->undo->tpClient2SeverityFramerFst = rowreq_ctx->data.tpClient2SeverityFramerFst;


    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFst_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityFramerFst_val
 *        A long containing the new value.
 */
int
tpClient2SeverityFramerFst_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityFramerFst_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFst_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityFramerFst value.
     * set tpClient2SeverityFramerFst value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityFramerFst = tpClient2SeverityFramerFst_val;

    // Set severity on shared memory
    setTpClient2Severity("FramerFst", tpClient2SeverityFramerFst_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFst_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityFramerFst_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityFramerFst_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityFramerFst undo.
     */
    /*
     * copy tpClient2SeverityFramerFst data
     * set rowreq_ctx->data.tpClient2SeverityFramerFst from rowreq_ctx->undo->tpClient2SeverityFramerFst
     */
    rowreq_ctx->data.tpClient2SeverityFramerFst = rowreq_ctx->undo->tpClient2SeverityFramerFst;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityFramerFst_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityLosstatLosf
 * tpClient2SeverityLosstatLosf is subid 8 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.8
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityLosstatLosf_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityLosstatLosf_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityLosstatLosf_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityLosstatLosf_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityLosstatLosf value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityLosstatLosf value not illegal */
} /* tpClient2SeverityLosstatLosf_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityLosstatLosf_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityLosstatLosf_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityLosstatLosf undo.
     */
    /*
     * copy tpClient2SeverityLosstatLosf data
     * set rowreq_ctx->undo->tpClient2SeverityLosstatLosf from rowreq_ctx->data.tpClient2SeverityLosstatLosf
     */
    rowreq_ctx->undo->tpClient2SeverityLosstatLosf = rowreq_ctx->data.tpClient2SeverityLosstatLosf;


    return MFD_SUCCESS;
} /* tpClient2SeverityLosstatLosf_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityLosstatLosf_val
 *        A long containing the new value.
 */
int
tpClient2SeverityLosstatLosf_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityLosstatLosf_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityLosstatLosf_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityLosstatLosf value.
     * set tpClient2SeverityLosstatLosf value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityLosstatLosf = tpClient2SeverityLosstatLosf_val;

    // Set severity on shared memory
    setTpClient2Severity("LosstatLosf", tpClient2SeverityLosstatLosf_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityLosstatLosf_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityLosstatLosf_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityLosstatLosf_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityLosstatLosf undo.
     */
    /*
     * copy tpClient2SeverityLosstatLosf data
     * set rowreq_ctx->data.tpClient2SeverityLosstatLosf from rowreq_ctx->undo->tpClient2SeverityLosstatLosf
     */
    rowreq_ctx->data.tpClient2SeverityLosstatLosf = rowreq_ctx->undo->tpClient2SeverityLosstatLosf;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityLosstatLosf_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityPathmonAccstat
 * tpClient2SeverityPathmonAccstat is subid 9 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.9
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityPathmonAccstat_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityPathmonAccstat_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonAccstat_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonAccstat_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityPathmonAccstat value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityPathmonAccstat value not illegal */
} /* tpClient2SeverityPathmonAccstat_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityPathmonAccstat_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonAccstat_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityPathmonAccstat undo.
     */
    /*
     * copy tpClient2SeverityPathmonAccstat data
     * set rowreq_ctx->undo->tpClient2SeverityPathmonAccstat from rowreq_ctx->data.tpClient2SeverityPathmonAccstat
     */
    rowreq_ctx->undo->tpClient2SeverityPathmonAccstat = rowreq_ctx->data.tpClient2SeverityPathmonAccstat;


    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonAccstat_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityPathmonAccstat_val
 *        A long containing the new value.
 */
int
tpClient2SeverityPathmonAccstat_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonAccstat_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonAccstat_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityPathmonAccstat value.
     * set tpClient2SeverityPathmonAccstat value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityPathmonAccstat = tpClient2SeverityPathmonAccstat_val;

    // Set severity on shared memory
    setTpClient2Severity("PathmonAccstat", tpClient2SeverityPathmonAccstat_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonAccstat_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityPathmonAccstat_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonAccstat_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityPathmonAccstat undo.
     */
    /*
     * copy tpClient2SeverityPathmonAccstat data
     * set rowreq_ctx->data.tpClient2SeverityPathmonAccstat from rowreq_ctx->undo->tpClient2SeverityPathmonAccstat
     */
    rowreq_ctx->data.tpClient2SeverityPathmonAccstat = rowreq_ctx->undo->tpClient2SeverityPathmonAccstat;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonAccstat_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityPathmonDais
 * tpClient2SeverityPathmonDais is subid 10 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.10
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityPathmonDais_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityPathmonDais_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonDais_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDais_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityPathmonDais value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityPathmonDais value not illegal */
} /* tpClient2SeverityPathmonDais_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityPathmonDais_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDais_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityPathmonDais undo.
     */
    /*
     * copy tpClient2SeverityPathmonDais data
     * set rowreq_ctx->undo->tpClient2SeverityPathmonDais from rowreq_ctx->data.tpClient2SeverityPathmonDais
     */
    rowreq_ctx->undo->tpClient2SeverityPathmonDais = rowreq_ctx->data.tpClient2SeverityPathmonDais;


    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDais_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityPathmonDais_val
 *        A long containing the new value.
 */
int
tpClient2SeverityPathmonDais_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonDais_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDais_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityPathmonDais value.
     * set tpClient2SeverityPathmonDais value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityPathmonDais = tpClient2SeverityPathmonDais_val;

    // Set severity on shared memory
    setTpClient2Severity("PathmonDais", tpClient2SeverityPathmonDais_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDais_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityPathmonDais_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDais_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityPathmonDais undo.
     */
    /*
     * copy tpClient2SeverityPathmonDais data
     * set rowreq_ctx->data.tpClient2SeverityPathmonDais from rowreq_ctx->undo->tpClient2SeverityPathmonDais
     */
    rowreq_ctx->data.tpClient2SeverityPathmonDais = rowreq_ctx->undo->tpClient2SeverityPathmonDais;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDais_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityPathmonDbdi
 * tpClient2SeverityPathmonDbdi is subid 11 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.11
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityPathmonDbdi_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityPathmonDbdi_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonDbdi_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDbdi_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityPathmonDbdi value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityPathmonDbdi value not illegal */
} /* tpClient2SeverityPathmonDbdi_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityPathmonDbdi_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDbdi_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityPathmonDbdi undo.
     */
    /*
     * copy tpClient2SeverityPathmonDbdi data
     * set rowreq_ctx->undo->tpClient2SeverityPathmonDbdi from rowreq_ctx->data.tpClient2SeverityPathmonDbdi
     */
    rowreq_ctx->undo->tpClient2SeverityPathmonDbdi = rowreq_ctx->data.tpClient2SeverityPathmonDbdi;


    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDbdi_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityPathmonDbdi_val
 *        A long containing the new value.
 */
int
tpClient2SeverityPathmonDbdi_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonDbdi_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDbdi_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityPathmonDbdi value.
     * set tpClient2SeverityPathmonDbdi value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityPathmonDbdi = tpClient2SeverityPathmonDbdi_val;

    // Set severity on shared memory
    setTpClient2Severity("PathmonDbdi", tpClient2SeverityPathmonDbdi_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDbdi_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityPathmonDbdi_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDbdi_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityPathmonDbdi undo.
     */
    /*
     * copy tpClient2SeverityPathmonDbdi data
     * set rowreq_ctx->data.tpClient2SeverityPathmonDbdi from rowreq_ctx->undo->tpClient2SeverityPathmonDbdi
     */
    rowreq_ctx->data.tpClient2SeverityPathmonDbdi = rowreq_ctx->undo->tpClient2SeverityPathmonDbdi;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDbdi_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityPathmonDlck
 * tpClient2SeverityPathmonDlck is subid 12 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.12
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityPathmonDlck_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityPathmonDlck_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonDlck_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDlck_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityPathmonDlck value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityPathmonDlck value not illegal */
} /* tpClient2SeverityPathmonDlck_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityPathmonDlck_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDlck_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityPathmonDlck undo.
     */
    /*
     * copy tpClient2SeverityPathmonDlck data
     * set rowreq_ctx->undo->tpClient2SeverityPathmonDlck from rowreq_ctx->data.tpClient2SeverityPathmonDlck
     */
    rowreq_ctx->undo->tpClient2SeverityPathmonDlck = rowreq_ctx->data.tpClient2SeverityPathmonDlck;


    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDlck_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityPathmonDlck_val
 *        A long containing the new value.
 */
int
tpClient2SeverityPathmonDlck_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonDlck_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDlck_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityPathmonDlck value.
     * set tpClient2SeverityPathmonDlck value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityPathmonDlck = tpClient2SeverityPathmonDlck_val;

    // Set severity on shared memory
    setTpClient2Severity("PathmonDlck", tpClient2SeverityPathmonDlck_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDlck_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityPathmonDlck_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonDlck_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityPathmonDlck undo.
     */
    /*
     * copy tpClient2SeverityPathmonDlck data
     * set rowreq_ctx->data.tpClient2SeverityPathmonDlck from rowreq_ctx->undo->tpClient2SeverityPathmonDlck
     */
    rowreq_ctx->data.tpClient2SeverityPathmonDlck = rowreq_ctx->undo->tpClient2SeverityPathmonDlck;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonDlck_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeverityPathmonMsiunst
 * tpClient2SeverityPathmonMsiunst is subid 13 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.13
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeverityPathmonMsiunst_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeverityPathmonMsiunst_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonMsiunst_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonMsiunst_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeverityPathmonMsiunst value.
     */

    return MFD_SUCCESS; /* tpClient2SeverityPathmonMsiunst value not illegal */
} /* tpClient2SeverityPathmonMsiunst_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeverityPathmonMsiunst_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonMsiunst_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeverityPathmonMsiunst undo.
     */
    /*
     * copy tpClient2SeverityPathmonMsiunst data
     * set rowreq_ctx->undo->tpClient2SeverityPathmonMsiunst from rowreq_ctx->data.tpClient2SeverityPathmonMsiunst
     */
    rowreq_ctx->undo->tpClient2SeverityPathmonMsiunst = rowreq_ctx->data.tpClient2SeverityPathmonMsiunst;


    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonMsiunst_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeverityPathmonMsiunst_val
 *        A long containing the new value.
 */
int
tpClient2SeverityPathmonMsiunst_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeverityPathmonMsiunst_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonMsiunst_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeverityPathmonMsiunst value.
     * set tpClient2SeverityPathmonMsiunst value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeverityPathmonMsiunst = tpClient2SeverityPathmonMsiunst_val;

    // Set severity on shared memory
    setTpClient2Severity("PathmonMsiunst", tpClient2SeverityPathmonMsiunst_val);

    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonMsiunst_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeverityPathmonMsiunst_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeverityPathmonMsiunst_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeverityPathmonMsiunst undo.
     */
    /*
     * copy tpClient2SeverityPathmonMsiunst data
     * set rowreq_ctx->data.tpClient2SeverityPathmonMsiunst from rowreq_ctx->undo->tpClient2SeverityPathmonMsiunst
     */
    rowreq_ctx->data.tpClient2SeverityPathmonMsiunst = rowreq_ctx->undo->tpClient2SeverityPathmonMsiunst;

    
    return MFD_SUCCESS;
} /* tpClient2SeverityPathmonMsiunst_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeveritySecmonBipsfs
 * tpClient2SeveritySecmonBipsfs is subid 14 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.14
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeveritySecmonBipsfs_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeveritySecmonBipsfs_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonBipsfs_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonBipsfs_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeveritySecmonBipsfs value.
     */

    return MFD_SUCCESS; /* tpClient2SeveritySecmonBipsfs value not illegal */
} /* tpClient2SeveritySecmonBipsfs_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeveritySecmonBipsfs_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonBipsfs_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeveritySecmonBipsfs undo.
     */
    /*
     * copy tpClient2SeveritySecmonBipsfs data
     * set rowreq_ctx->undo->tpClient2SeveritySecmonBipsfs from rowreq_ctx->data.tpClient2SeveritySecmonBipsfs
     */
    rowreq_ctx->undo->tpClient2SeveritySecmonBipsfs = rowreq_ctx->data.tpClient2SeveritySecmonBipsfs;


    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonBipsfs_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeveritySecmonBipsfs_val
 *        A long containing the new value.
 */
int
tpClient2SeveritySecmonBipsfs_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonBipsfs_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonBipsfs_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeveritySecmonBipsfs value.
     * set tpClient2SeveritySecmonBipsfs value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeveritySecmonBipsfs = tpClient2SeveritySecmonBipsfs_val;

    // Set severity on shared memory
    setTpClient2Severity("SecmonBipsfs", tpClient2SeveritySecmonBipsfs_val);

    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonBipsfs_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeveritySecmonBipsfs_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonBipsfs_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeveritySecmonBipsfs undo.
     */
    /*
     * copy tpClient2SeveritySecmonBipsfs data
     * set rowreq_ctx->data.tpClient2SeveritySecmonBipsfs from rowreq_ctx->undo->tpClient2SeveritySecmonBipsfs
     */
    rowreq_ctx->data.tpClient2SeveritySecmonBipsfs = rowreq_ctx->undo->tpClient2SeveritySecmonBipsfs;

    
    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonBipsfs_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeveritySecmonDbdi
 * tpClient2SeveritySecmonDbdi is subid 15 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.15
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeveritySecmonDbdi_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeveritySecmonDbdi_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonDbdi_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDbdi_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeveritySecmonDbdi value.
     */

    return MFD_SUCCESS; /* tpClient2SeveritySecmonDbdi value not illegal */
} /* tpClient2SeveritySecmonDbdi_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeveritySecmonDbdi_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDbdi_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeveritySecmonDbdi undo.
     */
    /*
     * copy tpClient2SeveritySecmonDbdi data
     * set rowreq_ctx->undo->tpClient2SeveritySecmonDbdi from rowreq_ctx->data.tpClient2SeveritySecmonDbdi
     */
    rowreq_ctx->undo->tpClient2SeveritySecmonDbdi = rowreq_ctx->data.tpClient2SeveritySecmonDbdi;


    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonDbdi_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeveritySecmonDbdi_val
 *        A long containing the new value.
 */
int
tpClient2SeveritySecmonDbdi_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonDbdi_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDbdi_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeveritySecmonDbdi value.
     * set tpClient2SeveritySecmonDbdi value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeveritySecmonDbdi = tpClient2SeveritySecmonDbdi_val;

    // Set severity on shared memory
    setTpClient2Severity("SecmonDbdi", tpClient2SeveritySecmonDbdi_val);

    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonDbdi_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeveritySecmonDbdi_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDbdi_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeveritySecmonDbdi undo.
     */
    /*
     * copy tpClient2SeveritySecmonDbdi data
     * set rowreq_ctx->data.tpClient2SeveritySecmonDbdi from rowreq_ctx->undo->tpClient2SeveritySecmonDbdi
     */
    rowreq_ctx->data.tpClient2SeveritySecmonDbdi = rowreq_ctx->undo->tpClient2SeveritySecmonDbdi;

    
    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonDbdi_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeveritySecmonDiae
 * tpClient2SeveritySecmonDiae is subid 16 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.16
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeveritySecmonDiae_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeveritySecmonDiae_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonDiae_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDiae_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeveritySecmonDiae value.
     */

    return MFD_SUCCESS; /* tpClient2SeveritySecmonDiae value not illegal */
} /* tpClient2SeveritySecmonDiae_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeveritySecmonDiae_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDiae_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeveritySecmonDiae undo.
     */
    /*
     * copy tpClient2SeveritySecmonDiae data
     * set rowreq_ctx->undo->tpClient2SeveritySecmonDiae from rowreq_ctx->data.tpClient2SeveritySecmonDiae
     */
    rowreq_ctx->undo->tpClient2SeveritySecmonDiae = rowreq_ctx->data.tpClient2SeveritySecmonDiae;


    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonDiae_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeveritySecmonDiae_val
 *        A long containing the new value.
 */
int
tpClient2SeveritySecmonDiae_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonDiae_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDiae_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeveritySecmonDiae value.
     * set tpClient2SeveritySecmonDiae value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeveritySecmonDiae = tpClient2SeveritySecmonDiae_val;

    // Set severity on shared memory
    setTpClient2Severity("SecmonDiae", tpClient2SeveritySecmonDiae_val);

    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonDiae_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeveritySecmonDiae_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonDiae_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeveritySecmonDiae undo.
     */
    /*
     * copy tpClient2SeveritySecmonDiae data
     * set rowreq_ctx->data.tpClient2SeveritySecmonDiae from rowreq_ctx->undo->tpClient2SeveritySecmonDiae
     */
    rowreq_ctx->data.tpClient2SeveritySecmonDiae = rowreq_ctx->undo->tpClient2SeveritySecmonDiae;

    
    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonDiae_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeveritySecmonFlom
 * tpClient2SeveritySecmonFlom is subid 17 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.17
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeveritySecmonFlom_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeveritySecmonFlom_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonFlom_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonFlom_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeveritySecmonFlom value.
     */

    return MFD_SUCCESS; /* tpClient2SeveritySecmonFlom value not illegal */
} /* tpClient2SeveritySecmonFlom_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeveritySecmonFlom_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonFlom_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeveritySecmonFlom undo.
     */
    /*
     * copy tpClient2SeveritySecmonFlom data
     * set rowreq_ctx->undo->tpClient2SeveritySecmonFlom from rowreq_ctx->data.tpClient2SeveritySecmonFlom
     */
    rowreq_ctx->undo->tpClient2SeveritySecmonFlom = rowreq_ctx->data.tpClient2SeveritySecmonFlom;


    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonFlom_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeveritySecmonFlom_val
 *        A long containing the new value.
 */
int
tpClient2SeveritySecmonFlom_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonFlom_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonFlom_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeveritySecmonFlom value.
     * set tpClient2SeveritySecmonFlom value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeveritySecmonFlom = tpClient2SeveritySecmonFlom_val;

    // Set severity on shared memory
    setTpClient2Severity("SecmonFlom", tpClient2SeveritySecmonFlom_val);

    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonFlom_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeveritySecmonFlom_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonFlom_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeveritySecmonFlom undo.
     */
    /*
     * copy tpClient2SeveritySecmonFlom data
     * set rowreq_ctx->data.tpClient2SeveritySecmonFlom from rowreq_ctx->undo->tpClient2SeveritySecmonFlom
     */
    rowreq_ctx->data.tpClient2SeveritySecmonFlom = rowreq_ctx->undo->tpClient2SeveritySecmonFlom;

    
    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonFlom_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpClient2SeverityEntry.tpClient2SeveritySecmonLom
 * tpClient2SeveritySecmonLom is subid 18 of tpClient2SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.3.1.18
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpClient2SeveritySecmonLom_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpClient2SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
tpClient2SeveritySecmonLom_check_value( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonLom_val)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonLom_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid tpClient2SeveritySecmonLom value.
     */

    return MFD_SUCCESS; /* tpClient2SeveritySecmonLom value not illegal */
} /* tpClient2SeveritySecmonLom_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpClient2SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpClient2SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
tpClient2SeveritySecmonLom_undo_setup( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonLom_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup tpClient2SeveritySecmonLom undo.
     */
    /*
     * copy tpClient2SeveritySecmonLom data
     * set rowreq_ctx->undo->tpClient2SeveritySecmonLom from rowreq_ctx->data.tpClient2SeveritySecmonLom
     */
    rowreq_ctx->undo->tpClient2SeveritySecmonLom = rowreq_ctx->data.tpClient2SeveritySecmonLom;


    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonLom_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpClient2SeveritySecmonLom_val
 *        A long containing the new value.
 */
int
tpClient2SeveritySecmonLom_set( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx, long tpClient2SeveritySecmonLom_val )
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonLom_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set tpClient2SeveritySecmonLom value.
     * set tpClient2SeveritySecmonLom value in rowreq_ctx->data
     */
    rowreq_ctx->data.tpClient2SeveritySecmonLom = tpClient2SeveritySecmonLom_val;

    // Set severity on shared memory
    setTpClient2Severity("SecmonLom", tpClient2SeveritySecmonLom_val);

    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonLom_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
tpClient2SeveritySecmonLom_undo( tpClient2SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:tpClient2SeverityTable:tpClient2SeveritySecmonLom_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up tpClient2SeveritySecmonLom undo.
     */
    /*
     * copy tpClient2SeveritySecmonLom data
     * set rowreq_ctx->data.tpClient2SeveritySecmonLom from rowreq_ctx->undo->tpClient2SeveritySecmonLom
     */
    rowreq_ctx->data.tpClient2SeveritySecmonLom = rowreq_ctx->undo->tpClient2SeveritySecmonLom;

    
    return MFD_SUCCESS;
} /* tpClient2SeveritySecmonLom_undo */

void setTpClient2Severity(char *alarm, long severity_value)
{
	DEBUGMSGTL(("verbose:setTpClient2Severity:setTpClient2Severity","called\n"));

	shm_handler_create(pt_monitor_struct);

	if (strcmp(alarm, "FramerFsmms") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].FramerFsmms = severity_value;
	}
	else if (strcmp(alarm, "FramerFssusts") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].FramerFssusts = severity_value;
	}
	else if (strcmp(alarm, "FramerFst") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].FramerFst = severity_value;
	}
	else if (strcmp(alarm, "FramerSif") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].FramerSif = severity_value;
	}
	else if (strcmp(alarm, "FramerSlof") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].FramerSlof = severity_value;
	}
	else if (strcmp(alarm, "FramerSoof") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].FramerSoof = severity_value;
	}
	else if (strcmp(alarm, "LosstatLosf") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].LosstatLosf = severity_value;
	}
	else if (strcmp(alarm, "PathmonAccstat") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].PathmonAccstat = severity_value;
	}
	else if (strcmp(alarm, "PathmonDais") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].PathmonDais = severity_value;
	}
	else if (strcmp(alarm, "PathmonDbdi") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].PathmonDbdi = severity_value;
	}
	else if (strcmp(alarm, "PathmonDlck") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].PathmonDlck = severity_value;
	}
	else if (strcmp(alarm, "PathmonMsiunst") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].PathmonMsiunst = severity_value;
	}
	else if (strcmp(alarm, "SecmonBipsfs") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].SecmonBipsfs = severity_value;
	}
	else if (strcmp(alarm, "SecmonDbdi") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].SecmonDbdi = severity_value;
	}
	else if (strcmp(alarm, "SecmonDiae") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].SecmonDiae = severity_value;
	}
	else if (strcmp(alarm, "SecmonFlom") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].SecmonFlom = severity_value;
	}
	else if (strcmp(alarm, "SecmonLom") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_client[1].SecmonLom = severity_value;
	}

	// Set dirty flag
	pt_monitor_struct->sev_dirty_flag = 1;
}

/** @} */
