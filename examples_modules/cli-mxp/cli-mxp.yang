module cli-mxp {

    namespace "http://fulgor.com/ns/cli-mxp";

    prefix "cli-mxp";

    description
      "CLI para configurar el muxponder de 40G";

    revision "2018-06-24" {
        description
          "Version 0.1.0";
    }

    
    typedef restricted-tipo-trafico {
      type enumeration {
        enum "otu2";
        enum "xge";
        }
    }

    typedef restricted-tipo-fec-linea {
      type enumeration {
        enum "gfec";
        enum "cerofec";
        }
    }

    typedef restricted-tipo-fec-cliente {
      type enumeration {
        enum "gfec_cliente";
        enum "cerofec_cliente";
        enum "nulofec_cliente";
        }
    }


    container mux-config {
        description
          "Parametros de la CLI";

        // @ MUXPONDER: ./muxponder --configuracion --[otu2|xge] --[gfec|cerofec] --[gfec_cliente|cerofec_cliente|nulofec_cliente] --canal "value" --potencia "value" --cd_compensacion "value"
        // ./muxponder --guardar --[otu2|xge] --[gfec|cerofec] --[gfec_cliente|cerofec_cliente|nulofec_cliente] --canal "value" --potencia "value" --cd_compensacion "value"
        
        leaf configuracion { //no implementado en C ni en JAVA
            description
              "para configuración completa en modo muxponder (--configuracion) o guardar configuración en archivo de inicio (--guardar).";
            type string;
        }

        leaf tipo_trafico { // C y JAVA OK
            description
              "[otu2|xge] especifica el tipo de tráfico.";
            type restricted-tipo-trafico;
        }

        leaf tipo_fec_linea { // C y JAVA OK
            description
              "[gfec|cerofec] especifica el uso de fec.";
            type restricted-tipo-fec-linea;
        }

        leaf tipo_fec_cliente { // C y JAVA OK
            description
              "[gfec_cliente|cerofec_cliente|nulofec_cliente] especifica el uso de fec.";
            type restricted-tipo-fec-cliente;
        }

        leaf canal { //no implementado en C ni en JAVA
            description
              "canal especifica el canal óptico del módulo transponder.";
            type string;
        }

        leaf potencia { //no implementado en C ni en JAVA
            description
              "potencia especifica la potencia de salida del amplificador óptico (edfa).";
            type string;
        }

        leaf cd_compensacion {
            description
              "cd_compensacion especifica la compensación de dispersion cromática.";
            type string;
        }

        leaf edfa_output_power_config { // C y JAVA OK
            description
              "Potencia de salida de EDFA.";
            type decimal64 {
                fraction-digits 1;
                range "0 .. 6";
            }
        }

        leaf time_notify_config {
            description
              "Cada cuantos segundos manda notificacion.";
            type int16 {
                range "1 .. 100";
            }
        }

        leaf-list deviceneighbors  { // falta JAVA
         type string;
         description "Lista de vecinos del dispositivo";
        }

    }


    container mux-state {
        description "Representa a datos de estado del dispositivo.";

        config false;

        // float in C
        leaf fpga_temperature_state {
            description "Temperatura de la FPGA";
            type decimal64 {
                fraction-digits 2;
            }
        }

        leaf board_humidity_state {
            description "Humedad de la placa";
            type int16;
        }

        leaf edfa_output_power_state {
            description "Potencia de salida EDFA";
            type decimal64 {
                fraction-digits 1;
            }
        }

        // float in C
        leaf xfp_tx_power {
            description "TX power";
            type decimal64 {
                fraction-digits 2;
            }
        }

        // float in C
        leaf xfp_rx_power {
            description "RX power";
            type decimal64 {
                fraction-digits 2;
            }
        }

        leaf device_manufacturer {
            description "Fabricante del dispositivo";
            type string;
        }

        leaf device_swVersion {
            description "Version del SW";
            type string;
        }

        leaf device_hwVersion {
            description "Version del HW";
            type string;
        }

        leaf device_boardId {
            description "Identificador unico del dispositivo";
            type string;
        }



    }


    container mux-state-misc {
        description "Container para variables de tipo misc en monitor";
        config false;
        
        //txp_struct->txp_temperature[0]
        leaf temp_around {
            description "State de la variable temp_around";
            type string;
        }

        //txp_struct->txp_temperature[1]
        leaf temp_case {
            description "State de la variable temp_case";
            type string;
        }

        //txp_struct->txp_temperature[2]
        leaf temp_tx_laser {
            description "State de la variable temp_tx_laser";
            type string;
        }

        //txp_struct->txp_temperature[3]
        leaf temp_rx_laser {
            description "State de la variable temp_rx_laser";
            type string;
        }

        //txp_struct->txp_loss
        leaf loss {
            description "State de la variable loss";
            type string;
        }

        //txp_struct->txp_interrupt
        leaf interrupt {
            description "State de la variable interrupt";
            type string;
        }

        //ACA LAS OTRAS DOS HAY QUE MOVER

        //txp_struct->txp_tx_laser_itu_channel.fields.band
        leaf tx_laser_itu_band {
            description "State de la variable tx_laser_itu_band";
            type string;
        }

        //txp_struct->txp_tx_laser_itu_channel.fields.channel
        leaf tx_laser_itu_channel {
            description "State de la variable tx_laser_itu_channel";
            type string;
        }

        //txp_struct->txp_rx_laser_itu_channel.fields.band
        leaf rx_laser_itu_band {
            description "State de la variable rx_laser_itu_band";
            type string;
        }

        //txp_struct->txp_rx_laser_itu_channel.fields.channel
        leaf rx_laser_itu_channel {
            description "State de la variable rx_laser_itu_channel";
            type string;
        }

    }

    container mux-state-TX-RX-alarms {
        description "Container para variables de tipo alarmas TX/RX en monitor";
        config false;
        
        leaf EOL_ALM {
            type string;
        }

        leaf MOD_TEMP_ALM {
            type string;
        }

        leaf TX_OOA {
            type string;
        }

        leaf TX_LOF_ALM {
            type string;
        }

        leaf TX_DSC_ERR {
            type string;
        }
        
        leaf LS_WAV_ALM {
            type string;
        }
        
        leaf TX_ALM_INT {
            type string;
        }

        leaf LS_BIAS_ALM {
            type string;
        }

        leaf LS_TEMP_ALM {
            type string;
        }

        leaf TX_LOCK_ERR {
            type string;
        }

        leaf LS_POW_ALM {
            type string;
        }

        leaf MOD_BIAS_ALM {
            type string;
        }

        leaf LATCHED_TXFIFO_ERR {
            type string;
        }

        leaf RXALM_INT {
            type string;
        }

        leaf RXPOW_ALM {
            type string;
        }

        leaf RX_LOS {
            type string;
        }
        
        leaf RX_LOCK_ERR {
            type string;
        }

        leaf RXS {
            type string;
        }

        leaf PRBS_ERR_DET {
            type string;
        }
    }

        container mux-state-power {
            description "Container para variables de tipo power en monitor";
            config false;
        
            //txp_struct->txp_power_alarm.fields.psummary
            leaf PSUMMARY {
                description "State de la variable PSUMMARY";
                type string;
            }

            //txp_struct->txp_power_alarm.fields.p5vanalog
            leaf P5VANALOG {
                description "State de la variable P5VANALOG";
                type string;
            }

            //txp_struct->txp_power_alarm.fields.n5v2analog
            leaf N5V2ANALOG {
                description "State de la variable N5V2ANALOG";
                type string;
            }

            //txp_struct->txp_power_alarm.fields.p3p3vanalog
            leaf P3P3VANALOG {
                description "State de la variable P3P3VANALOG";
                type string;
            }

            //txp_struct->txp_power_alarm.fields.p3p3vdigital
            leaf P3P3VDIGITAL {
                description "State de la variable P3P3VDIGITAL";
                type string;
            }
            
            //txp_struct->txp_power_alarm.fields.lvdigital
            leaf LVDIGITAL {
                description "State de la variable LVDIGITAL";
                type string;
            }

            //txp_struct->txp_power_alarm.fields.n5p2vdigital
            leaf N5P2VDIGITAL {
                description "State de la variable N5P2VDIGITAL";
                type string;
            }
        }

    container mux-optical-line-status {
        description "Para determinar estado del enlace";
        config false;
        
        leaf brctl_showstp_br0 {
            description "Devuelve la respuesta de ejecutar brctl showstp br0";
            type string;
        }
    }

    rpc mux-notify-activate {        
        description "RPC que activa la notificacion";
    }

    rpc mux-notify-deactivate {        
        description "RPC que desactiva la notificacion";
    }

    rpc mux-apply-config {        
        description "RPC que aplica los cambios --configuracion ";
        output {
            leaf respuesta-mux-apply-config {
                type string;
            }
        }
    }

    rpc mux-settings {        
        description "RPC que aplica los cambios --settings ";
        output {
            leaf respuesta-mux-settings {
                type string;
            }
        }
    }


    notification mux-notify {

        leaf INFO {
            type string;
            mandatory "true";
        }
    }

}
