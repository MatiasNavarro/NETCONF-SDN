#ifndef _H_alarma_fulgor
#define _H_alarma_fulgor
/* 
 * Copyright (c) 2008-2012, Andy Bierman, All Rights Reserved.
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 *

*** Generated by yangdump 2.11-0

  Combined SIL header
  module alarma-fulgor
  revision 2018-06-24
  namespace http://helloworld.com/ns/alarma-fulgor

 */

#include <xmlstring.h>

#include "dlq.h"
#include "ncxtypes.h"
#include "op.h"
#include "status.h"
#include "val.h"

#ifdef __cplusplus
extern "C" {
#endif

#define y_alarma_fulgor_M_alarma_fulgor (const xmlChar *)"alarma-fulgor"
#define y_alarma_fulgor_R_alarma_fulgor (const xmlChar *)"2018-06-24"

#define y_alarma_fulgor_N_alarma_fulgor (const xmlChar *)"alarma-fulgor"
#define y_alarma_fulgor_N_alarma_fulgor_activate (const xmlChar *)"alarma-fulgor-activate"
#define y_alarma_fulgor_N_alarma_fulgor_sonido (const xmlChar *)"alarma-fulgor-sonido"
#define y_alarma_fulgor_N_alarma_fulgor_state (const xmlChar *)"alarma-fulgor-state"
#define y_alarma_fulgor_N_comando (const xmlChar *)"comando"
#define y_alarma_fulgor_N_horas (const xmlChar *)"horas"
#define y_alarma_fulgor_N_horasis (const xmlChar *)"horasis"
#define y_alarma_fulgor_N_minutos (const xmlChar *)"minutos"
#define y_alarma_fulgor_N_minutosis (const xmlChar *)"minutosis"
#define y_alarma_fulgor_N_respuesta (const xmlChar *)"respuesta"
#define y_alarma_fulgor_N_ringtone (const xmlChar *)"ringtone"
#define y_alarma_fulgor_N_segundos (const xmlChar *)"segundos"
#define y_alarma_fulgor_N_segundosis (const xmlChar *)"segundosis"
#define y_alarma_fulgor_N_source (const xmlChar *)"source"

/* container /alarma-fulgor */
typedef struct y_alarma_fulgor_T_alarma_fulgor_ {
  uint8 horas;
  uint8 minutos;
  uint8 segundos;
  xmlChar *ringtone;
} y_alarma_fulgor_T_alarma_fulgor;

/* container /alarma-fulgor-state */
typedef struct y_alarma_fulgor_T_alarma_fulgor_state_ {
  uint8 horasis;
  uint8 minutosis;
  uint8 segundosis;
} y_alarma_fulgor_T_alarma_fulgor_state;

/* container /alarma-fulgor-activate/input */
typedef struct y_alarma_fulgor_T_alarma_fulgor_activate_input_ {
  xmlChar *comando;
} y_alarma_fulgor_T_alarma_fulgor_activate_input;

/* container /alarma-fulgor-activate/output */
typedef struct y_alarma_fulgor_T_alarma_fulgor_activate_output_ {
  xmlChar *respuesta;
} y_alarma_fulgor_T_alarma_fulgor_activate_output;

/* rpc /alarma-fulgor-activate */
typedef struct y_alarma_fulgor_T_alarma_fulgor_activate_ {
  y_alarma_fulgor_T_alarma_fulgor_activate_input input;
  y_alarma_fulgor_T_alarma_fulgor_activate_output output;
} y_alarma_fulgor_T_alarma_fulgor_activate;

/* container /alarma-fulgor-sonido/source */
typedef struct y_alarma_fulgor_T_alarma_fulgor_sonido_source_ {
  xmlChar *ringtone;
} y_alarma_fulgor_T_alarma_fulgor_sonido_source;

/* notification /alarma-fulgor-sonido */
typedef struct y_alarma_fulgor_T_alarma_fulgor_sonido_ {
  y_alarma_fulgor_T_alarma_fulgor_sonido_source source;
} y_alarma_fulgor_T_alarma_fulgor_sonido;

/********************************************************************
* FUNCTION y_alarma_fulgor_alarma_fulgor_sonido_send
* 
* Send a y_alarma_fulgor_alarma_fulgor_sonido notification
* Called by your code when notification event occurs
* 
********************************************************************/
extern void y_alarma_fulgor_alarma_fulgor_sonido_send (
  y_alarma_fulgor_T_alarma_fulgor_sonido_source *source);

/********************************************************************
* FUNCTION y_alarma_fulgor_init
* 
* initialize the alarma-fulgor server instrumentation library
* 
* INPUTS:
*    modname == requested module name
*    revision == requested version (NULL for any)
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_alarma_fulgor_init (
  const xmlChar *modname,
  const xmlChar *revision);

/********************************************************************
* FUNCTION y_alarma_fulgor_init2
* 
* SIL init phase 2: non-config data structures
* Called after running config is loaded
* 
* RETURNS:
*     error status
********************************************************************/
extern status_t y_alarma_fulgor_init2 (void);

/********************************************************************
* FUNCTION y_alarma_fulgor_cleanup
*    cleanup the server instrumentation library
* 
********************************************************************/
extern void y_alarma_fulgor_cleanup (void);

#ifdef __cplusplus
} /* end extern 'C' */
#endif

#endif