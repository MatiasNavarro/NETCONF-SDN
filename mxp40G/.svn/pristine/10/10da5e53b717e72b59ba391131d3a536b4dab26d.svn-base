/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 *
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "tpLineSeverityTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>
#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @defgroup data_set data_set: Routines to set data
 *
 * These routines are used to set the value for individual objects. The
 * row context is passed, along with the new value.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table tpLineSeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::tpLineSeverityTable is subid 1 of tpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1, length: 12
 */
/*
 * NOTE: if you update this chart, please update the versions in
 *       local/mib2c-conf.d/parent-set.m2i
 *       agent/mibgroup/helpers/baby_steps.c
 * while you're at it.
 */
/*
 ***********************************************************************
 * Baby Steps Flow Chart (2004.06.05)                                  *
 *                                                                     *
 * +--------------+    +================+    U = unconditional path    *
 * |optional state|    ||required state||    S = path for success      *
 * +--------------+    +================+    E = path for error        *
 ***********************************************************************
 *
 *                        +--------------+
 *                        |     pre      |
 *                        |   request    |
 *                        +--------------+
 *                               | U
 *                        +==============+
 *       +----------------||  object    ||
 *       |              E ||  lookup    ||
 *       |                +==============+
 *       |                       | S
 *       |                +==============+
 *       |              E ||   check    ||
 *       |<---------------||   values   ||
 *       |                +==============+
 *       |                       | S
 *       |                +==============+
 *       |       +<-------||   undo     ||
 *       |       |      E ||   setup    ||
 *       |       |        +==============+
 *       |       |               | S
 *       |       |        +==============+
 *       |       |        ||    set     ||-------------------------->+
 *       |       |        ||   value    || E                         |
 *       |       |        +==============+                           |
 *       |       |               | S                                 |
 *       |       |        +--------------+                           |
 *       |       |        |    check     |-------------------------->|
 *       |       |        |  consistency | E                         |
 *       |       |        +--------------+                           |
 *       |       |               | S                                 |
 *       |       |        +==============+         +==============+  |
 *       |       |        ||   commit   ||-------->||     undo   ||  |
 *       |       |        ||            || E       ||    commit  ||  |
 *       |       |        +==============+         +==============+  |
 *       |       |               | S                     U |<--------+
 *       |       |        +--------------+         +==============+
 *       |       |        | irreversible |         ||    undo    ||
 *       |       |        |    commit    |         ||     set    ||
 *       |       |        +--------------+         +==============+
 *       |       |               | U                     U |
 *       |       +-------------->|<------------------------+
 *       |                +==============+
 *       |                ||   undo     ||
 *       |                ||  cleanup   ||
 *       |                +==============+
 *       +---------------------->| U
 *                        +--------------+
 *                        |    post      |
 *                        |   request    |
 *                        +--------------+
 *
 */

/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 *
 * Note that the undo context has been allocated with
 * tpLineSeverityTable_allocate_data(), but may need extra
 * initialization similar to what you may have done in
 * tpLineSeverityTable_rowreq_ctx_init().
 * Note that an individual node's undo_setup function will only be called
 * if that node is being set to a new value.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in the node's undo_setup
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int tpLineSeverityTable_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	int rc = MFD_SUCCESS;

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityTable_undo_setup","called\n"));

	/** we should have a non-NULL pointer */
	netsnmp_assert( NULL != rowreq_ctx);

	/*
	 * TODO:451:M: |-> Setup tpLineSeverityTable undo.
	 * set up tpLineSeverityTable undo information, in preparation for a set.
	 * Undo storage is in (* tpLineSeveritySecmonLom_val_ptr )*
	 */

	return rc;
} /* tpLineSeverityTable_undo_setup */

/**
 * Undo a set request.
 *
 * This function will be called before the individual node undo
 * functions are called. If you need to do any undo that is not
 * related to a specific column, you can do it here.
 *
 * Note that an individual node's undo function will only be called
 * if that node is being set to a new value.
 *
 * If there is anything  specific to a particular column (e.g. releasing
 * memory for a string), you should do that setup in the node's undo
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int tpLineSeverityTable_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	int rc = MFD_SUCCESS;

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityTable_undo","called\n"));

	/** we should have a non-NULL pointer */
	netsnmp_assert( NULL != rowreq_ctx);

	/*
	 * TODO:451:M: |-> tpLineSeverityTable undo.
	 * tpLineSeverityTable undo information, in response to a failed set.
	 * Undo storage is in (* tpLineSeveritySecmonLom_val_ptr )*
	 */

	return rc;
} /* tpLineSeverityTable_undo_setup */

/**
 * Cleanup up context undo information.
 *
 * This function will be called after set/commit processing. If you
 * allocated any resources in undo_setup, this is the place to release
 * those resources.
 *
 * This function is called regardless of the success or failure of the set
 * request. If you need to perform different steps for cleanup depending
 * on success or failure, you can add a flag to the rowreq_ctx.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int tpLineSeverityTable_undo_cleanup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	int rc = MFD_SUCCESS;

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityTable_undo_cleanup","called\n"));

	/** we should have a non-NULL pointer */
	netsnmp_assert( NULL != rowreq_ctx);

	/*
	 * TODO:452:M: |-> Cleanup tpLineSeverityTable undo.
	 * Undo storage is in (* tpLineSeveritySecmonLom_val_ptr )*
	 */

	return rc;
} /* tpLineSeverityTable_undo_cleanup */

/**
 * commit new values.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * tpLineSeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param tpLineSeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int tpLineSeverityTable_commit(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	int rc = MFD_SUCCESS;
	int save_flags;

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityTable_commit","called\n"));

	/** we should have a non-NULL pointer */
	netsnmp_assert( NULL != rowreq_ctx);

	/*
	 * save flags, then clear until we actually do something
	 */
	save_flags = rowreq_ctx->column_set_flags;
	rowreq_ctx->column_set_flags = 0;

	/*
	 * commit tpLineSeverityTable data
	 * 1) check the column's flag in save_flags to see if it was set.
	 * 2) clear the flag when you handle that column
	 * 3) set the column's flag in column_set_flags if it needs undo
	 *    processing in case of a failure.
	 */
	if (save_flags & COLUMN_TPLINESEVERITYFRAMERFSMMS_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERFSMMS_FLAG; /* clear tpLineSeverityFramerFsmms */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerFsmms.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerFsmms commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerFsmms
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERFSMMS_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYFRAMERFSMMTRB1S_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERFSMMTRB1S_FLAG; /* clear tpLineSeverityFramerFsmmtrb1s */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerFsmmtrb1s.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerFsmmtrb1s commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerFsmmtrb1s
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERFSMMTRB1S_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYFRAMERFSMMTRB2S_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERFSMMTRB2S_FLAG; /* clear tpLineSeverityFramerFsmmtrb2s */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerFsmmtrb2s.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerFsmmtrb2s commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerFsmmtrb2s
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERFSMMTRB2S_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYFRAMERFSMMTRB3S_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERFSMMTRB3S_FLAG; /* clear tpLineSeverityFramerFsmmtrb3s */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerFsmmtrb3s.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerFsmmtrb3s commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerFsmmtrb3s
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERFSMMTRB3S_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYFRAMERSOOF_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERSOOF_FLAG; /* clear tpLineSeverityFramerSoof */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerSoof.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerSoof commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerSoof
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERSOOF_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYFRAMERSLOF_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERSLOF_FLAG; /* clear tpLineSeverityFramerSlof */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerSlof.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerSlof commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerSlof
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERSLOF_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYFRAMERSIF_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERSIF_FLAG; /* clear tpLineSeverityFramerSif */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerSif.
		 */
		// rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerSif commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerSif
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERSIF_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYFRAMERFST_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYFRAMERFST_FLAG; /* clear tpLineSeverityFramerFst */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityFramerFst.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityFramerFst commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityFramerFst
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYFRAMERFST_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYLOSSTATLOSF_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYLOSSTATLOSF_FLAG; /* clear tpLineSeverityLosstatLosf */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityLosstatLosf.
		 */
		// rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityLosstatLosf commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityLosstatLosf
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYLOSSTATLOSF_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYPATHMONACCSTAT_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYPATHMONACCSTAT_FLAG; /* clear tpLineSeverityPathmonAccstat */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityPathmonAccstat.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityPathmonAccstat commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityPathmonAccstat
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYPATHMONACCSTAT_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYPATHMONDAIS_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYPATHMONDAIS_FLAG; /* clear tpLineSeverityPathmonDais */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityPathmonDais.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityPathmonDais commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityPathmonDais
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYPATHMONDAIS_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYPATHMONDBDI_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYPATHMONDBDI_FLAG; /* clear tpLineSeverityPathmonDbdi */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityPathmonDbdi.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityPathmonDbdi commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityPathmonDbdi
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYPATHMONDBDI_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYPATHMONDLCK_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYPATHMONDLCK_FLAG; /* clear tpLineSeverityPathmonDlck */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityPathmonDlck.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityPathmonDlck commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityPathmonDlck
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYPATHMONDLCK_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYPATHMONMSIUNST_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYPATHMONMSIUNST_FLAG; /* clear tpLineSeverityPathmonMsiunst */
		/*
		 * TODO:482:o: |-> commit column tpLineSeverityPathmonMsiunst.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeverityPathmonMsiunst commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeverityPathmonMsiunst
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYPATHMONMSIUNST_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYSECMONBIPSFS_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYSECMONBIPSFS_FLAG; /* clear tpLineSeveritySecmonBipsfs */
		/*
		 * TODO:482:o: |-> commit column tpLineSeveritySecmonBipsfs.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeveritySecmonBipsfs commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeveritySecmonBipsfs
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYSECMONBIPSFS_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYSECMONDBDI_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYSECMONDBDI_FLAG; /* clear tpLineSeveritySecmonDbdi */
		/*
		 * TODO:482:o: |-> commit column tpLineSeveritySecmonDbdi.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeveritySecmonDbdi commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeveritySecmonDbdi
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYSECMONDBDI_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYSECMONDIAE_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYSECMONDIAE_FLAG; /* clear tpLineSeveritySecmonDiae */
		/*
		 * TODO:482:o: |-> commit column tpLineSeveritySecmonDiae.
		 */
		//rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeveritySecmonDiae commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeveritySecmonDiae
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYSECMONDIAE_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYSECMONFLOM_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYSECMONFLOM_FLAG; /* clear tpLineSeveritySecmonFlom */
		/*
		 * TODO:482:o: |-> commit column tpLineSeveritySecmonFlom.
		 */
		// rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeveritySecmonFlom commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeveritySecmonFlom
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYSECMONFLOM_FLAG;
		}
	}

	if (save_flags & COLUMN_TPLINESEVERITYSECMONLOM_FLAG)
	{
		save_flags &= ~COLUMN_TPLINESEVERITYSECMONLOM_FLAG; /* clear tpLineSeveritySecmonLom */
		/*
		 * TODO:482:o: |-> commit column tpLineSeveritySecmonLom.
		 */
		// rc = -1;
		if (-1 == rc)
		{
			snmp_log(LOG_ERR, "tpLineSeverityTable column tpLineSeveritySecmonLom commit failed\n");
		}
		else
		{
			/*
			 * set flag, in case we need to undo tpLineSeveritySecmonLom
			 */
			rowreq_ctx->column_set_flags |= COLUMN_TPLINESEVERITYSECMONLOM_FLAG;
		}
	}

	/*
	 * if we successfully commited this row, set the dirty flag.
	 */
	if (MFD_SUCCESS == rc)
	{
		rowreq_ctx->rowreq_flags |= MFD_ROW_DIRTY;
	}

	if (save_flags)
	{
		snmp_log(LOG_ERR, "unhandled columns (0x%x) in commit\n", save_flags);
		return MFD_ERROR;
	}

	return rc;
} /* tpLineSeverityTable_commit */

/**
 * undo commit new values.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * tpLineSeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param tpLineSeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int tpLineSeverityTable_undo_commit(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	int rc = MFD_SUCCESS;

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityTable_undo_commit","called\n"));

	/** we should have a non-NULL pointer */
	netsnmp_assert( NULL != rowreq_ctx);

	/*
	 * TODO:485:M: |-> Undo tpLineSeverityTable commit.
	 * check the column's flag in rowreq_ctx->column_set_flags to see
	 * if it was set during commit, then undo it.
	 *
	 * eg: if (rowreq_ctx->column_set_flags & COLUMN__FLAG) {}
	 */

	/*
	 * if we successfully un-commited this row, clear the dirty flag.
	 */
	if (MFD_SUCCESS == rc)
	{
		rowreq_ctx->rowreq_flags &= ~MFD_ROW_DIRTY;
	}

	return rc;
} /* tpLineSeverityTable_undo_commit */

/*
 * TODO:440:M: Implement tpLineSeverityTable node value checks.
 * TODO:450:M: Implement tpLineSeverityTable undo functions.
 * TODO:460:M: Implement tpLineSeverityTable set functions.
 * TODO:480:M: Implement tpLineSeverityTable commit functions.
 */
/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerFsmms
 * tpLineSeverityFramerFsmms is subid 2 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.2
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerFsmms_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerFsmms_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmms_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmms_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerFsmms value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerFsmms value not illegal */
} /* tpLineSeverityFramerFsmms_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerFsmms_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmms_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerFsmms undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmms data
	 * set rowreq_ctx->undo->tpLineSeverityFramerFsmms from rowreq_ctx->data.tpLineSeverityFramerFsmms
	 */
	rowreq_ctx->undo->tpLineSeverityFramerFsmms = rowreq_ctx->data.tpLineSeverityFramerFsmms;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmms_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerFsmms_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerFsmms_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmms_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmms_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerFsmms value.
	 * set tpLineSeverityFramerFsmms value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmms = tpLineSeverityFramerFsmms_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerFsmms", tpLineSeverityFramerFsmms_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmms_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerFsmms_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmms_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerFsmms undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmms data
	 * set rowreq_ctx->data.tpLineSeverityFramerFsmms from rowreq_ctx->undo->tpLineSeverityFramerFsmms
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmms = rowreq_ctx->undo->tpLineSeverityFramerFsmms;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmms_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerFsmmtrb1s
 * tpLineSeverityFramerFsmmtrb1s is subid 3 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.3
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerFsmmtrb1s_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerFsmmtrb1s_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmmtrb1s_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb1s_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerFsmmtrb1s value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerFsmmtrb1s value not illegal */
} /* tpLineSeverityFramerFsmmtrb1s_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerFsmmtrb1s_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb1s_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerFsmmtrb1s undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmmtrb1s data
	 * set rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb1s from rowreq_ctx->data.tpLineSeverityFramerFsmmtrb1s
	 */
	rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb1s = rowreq_ctx->data.tpLineSeverityFramerFsmmtrb1s;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb1s_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerFsmmtrb1s_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerFsmmtrb1s_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmmtrb1s_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb1s_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerFsmmtrb1s value.
	 * set tpLineSeverityFramerFsmmtrb1s value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmmtrb1s = tpLineSeverityFramerFsmmtrb1s_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerFsmmtrb1s", tpLineSeverityFramerFsmmtrb1s_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb1s_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerFsmmtrb1s_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb1s_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerFsmmtrb1s undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmmtrb1s data
	 * set rowreq_ctx->data.tpLineSeverityFramerFsmmtrb1s from rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb1s
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmmtrb1s = rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb1s;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb1s_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerFsmmtrb2s
 * tpLineSeverityFramerFsmmtrb2s is subid 4 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.4
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerFsmmtrb2s_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerFsmmtrb2s_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmmtrb2s_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb2s_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerFsmmtrb2s value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerFsmmtrb2s value not illegal */
} /* tpLineSeverityFramerFsmmtrb2s_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerFsmmtrb2s_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb2s_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerFsmmtrb2s undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmmtrb2s data
	 * set rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb2s from rowreq_ctx->data.tpLineSeverityFramerFsmmtrb2s
	 */
	rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb2s = rowreq_ctx->data.tpLineSeverityFramerFsmmtrb2s;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb2s_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerFsmmtrb2s_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerFsmmtrb2s_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmmtrb2s_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb2s_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerFsmmtrb2s value.
	 * set tpLineSeverityFramerFsmmtrb2s value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmmtrb2s = tpLineSeverityFramerFsmmtrb2s_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerFsmmtrb2s", tpLineSeverityFramerFsmmtrb2s_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb2s_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerFsmmtrb2s_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb2s_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerFsmmtrb2s undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmmtrb2s data
	 * set rowreq_ctx->data.tpLineSeverityFramerFsmmtrb2s from rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb2s
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmmtrb2s = rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb2s;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb2s_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerFsmmtrb3s
 * tpLineSeverityFramerFsmmtrb3s is subid 5 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.5
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerFsmmtrb3s_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerFsmmtrb3s_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmmtrb3s_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb3s_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerFsmmtrb3s value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerFsmmtrb3s value not illegal */
} /* tpLineSeverityFramerFsmmtrb3s_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerFsmmtrb3s_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb3s_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerFsmmtrb3s undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmmtrb3s data
	 * set rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb3s from rowreq_ctx->data.tpLineSeverityFramerFsmmtrb3s
	 */
	rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb3s = rowreq_ctx->data.tpLineSeverityFramerFsmmtrb3s;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb3s_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerFsmmtrb3s_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerFsmmtrb3s_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFsmmtrb3s_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb3s_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerFsmmtrb3s value.
	 * set tpLineSeverityFramerFsmmtrb3s value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmmtrb3s = tpLineSeverityFramerFsmmtrb3s_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerFsmmtrb3s", tpLineSeverityFramerFsmmtrb3s_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb3s_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerFsmmtrb3s_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFsmmtrb3s_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerFsmmtrb3s undo.
	 */
	/*
	 * copy tpLineSeverityFramerFsmmtrb3s data
	 * set rowreq_ctx->data.tpLineSeverityFramerFsmmtrb3s from rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb3s
	 */
	rowreq_ctx->data.tpLineSeverityFramerFsmmtrb3s = rowreq_ctx->undo->tpLineSeverityFramerFsmmtrb3s;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFsmmtrb3s_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerSoof
 * tpLineSeverityFramerSoof is subid 6 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.6
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerSoof_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerSoof_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerSoof_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSoof_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerSoof value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerSoof value not illegal */
} /* tpLineSeverityFramerSoof_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerSoof_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSoof_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerSoof undo.
	 */
	/*
	 * copy tpLineSeverityFramerSoof data
	 * set rowreq_ctx->undo->tpLineSeverityFramerSoof from rowreq_ctx->data.tpLineSeverityFramerSoof
	 */
	rowreq_ctx->undo->tpLineSeverityFramerSoof = rowreq_ctx->data.tpLineSeverityFramerSoof;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSoof_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerSoof_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerSoof_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerSoof_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSoof_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerSoof value.
	 * set tpLineSeverityFramerSoof value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerSoof = tpLineSeverityFramerSoof_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerSoof", tpLineSeverityFramerSoof_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSoof_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerSoof_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSoof_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerSoof undo.
	 */
	/*
	 * copy tpLineSeverityFramerSoof data
	 * set rowreq_ctx->data.tpLineSeverityFramerSoof from rowreq_ctx->undo->tpLineSeverityFramerSoof
	 */
	rowreq_ctx->data.tpLineSeverityFramerSoof = rowreq_ctx->undo->tpLineSeverityFramerSoof;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSoof_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerSlof
 * tpLineSeverityFramerSlof is subid 7 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.7
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerSlof_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerSlof_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerSlof_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSlof_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerSlof value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerSlof value not illegal */
} /* tpLineSeverityFramerSlof_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerSlof_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSlof_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerSlof undo.
	 */
	/*
	 * copy tpLineSeverityFramerSlof data
	 * set rowreq_ctx->undo->tpLineSeverityFramerSlof from rowreq_ctx->data.tpLineSeverityFramerSlof
	 */
	rowreq_ctx->undo->tpLineSeverityFramerSlof = rowreq_ctx->data.tpLineSeverityFramerSlof;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSlof_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerSlof_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerSlof_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerSlof_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSlof_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerSlof value.
	 * set tpLineSeverityFramerSlof value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerSlof = tpLineSeverityFramerSlof_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerSlof", tpLineSeverityFramerSlof_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSlof_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerSlof_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSlof_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerSlof undo.
	 */
	/*
	 * copy tpLineSeverityFramerSlof data
	 * set rowreq_ctx->data.tpLineSeverityFramerSlof from rowreq_ctx->undo->tpLineSeverityFramerSlof
	 */
	rowreq_ctx->data.tpLineSeverityFramerSlof = rowreq_ctx->undo->tpLineSeverityFramerSlof;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSlof_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerSif
 * tpLineSeverityFramerSif is subid 8 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.8
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerSif_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerSif_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerSif_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSif_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerSif value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerSif value not illegal */
} /* tpLineSeverityFramerSif_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerSif_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSif_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerSif undo.
	 */
	/*
	 * copy tpLineSeverityFramerSif data
	 * set rowreq_ctx->undo->tpLineSeverityFramerSif from rowreq_ctx->data.tpLineSeverityFramerSif
	 */
	rowreq_ctx->undo->tpLineSeverityFramerSif = rowreq_ctx->data.tpLineSeverityFramerSif;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSif_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerSif_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerSif_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerSif_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSif_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerSif value.
	 * set tpLineSeverityFramerSif value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerSif = tpLineSeverityFramerSif_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerSif", tpLineSeverityFramerSif_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSif_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerSif_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerSif_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerSif undo.
	 */
	/*
	 * copy tpLineSeverityFramerSif data
	 * set rowreq_ctx->data.tpLineSeverityFramerSif from rowreq_ctx->undo->tpLineSeverityFramerSif
	 */
	rowreq_ctx->data.tpLineSeverityFramerSif = rowreq_ctx->undo->tpLineSeverityFramerSif;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerSif_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityFramerFst
 * tpLineSeverityFramerFst is subid 9 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.9
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityFramerFst_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityFramerFst_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFst_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFst_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityFramerFst value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityFramerFst value not illegal */
} /* tpLineSeverityFramerFst_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityFramerFst_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFst_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityFramerFst undo.
	 */
	/*
	 * copy tpLineSeverityFramerFst data
	 * set rowreq_ctx->undo->tpLineSeverityFramerFst from rowreq_ctx->data.tpLineSeverityFramerFst
	 */
	rowreq_ctx->undo->tpLineSeverityFramerFst = rowreq_ctx->data.tpLineSeverityFramerFst;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFst_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityFramerFst_val
 *        A long containing the new value.
 */
int tpLineSeverityFramerFst_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityFramerFst_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFst_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityFramerFst value.
	 * set tpLineSeverityFramerFst value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityFramerFst = tpLineSeverityFramerFst_val;

	// Set severity on shared memory
	setTpLineSeverity("FramerFst", tpLineSeverityFramerFst_val);

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFst_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityFramerFst_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityFramerFst_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityFramerFst undo.
	 */
	/*
	 * copy tpLineSeverityFramerFst data
	 * set rowreq_ctx->data.tpLineSeverityFramerFst from rowreq_ctx->undo->tpLineSeverityFramerFst
	 */
	rowreq_ctx->data.tpLineSeverityFramerFst = rowreq_ctx->undo->tpLineSeverityFramerFst;

	return MFD_SUCCESS;
} /* tpLineSeverityFramerFst_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityLosstatLosf
 * tpLineSeverityLosstatLosf is subid 10 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.10
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityLosstatLosf_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityLosstatLosf_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityLosstatLosf_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityLosstatLosf_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityLosstatLosf value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityLosstatLosf value not illegal */
} /* tpLineSeverityLosstatLosf_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityLosstatLosf_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityLosstatLosf_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityLosstatLosf undo.
	 */
	/*
	 * copy tpLineSeverityLosstatLosf data
	 * set rowreq_ctx->undo->tpLineSeverityLosstatLosf from rowreq_ctx->data.tpLineSeverityLosstatLosf
	 */
	rowreq_ctx->undo->tpLineSeverityLosstatLosf = rowreq_ctx->data.tpLineSeverityLosstatLosf;

	return MFD_SUCCESS;
} /* tpLineSeverityLosstatLosf_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityLosstatLosf_val
 *        A long containing the new value.
 */
int tpLineSeverityLosstatLosf_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityLosstatLosf_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityLosstatLosf_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityLosstatLosf value.
	 * set tpLineSeverityLosstatLosf value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityLosstatLosf = tpLineSeverityLosstatLosf_val;

	// Set severity on shared memory
	setTpLineSeverity("LosstatLosf", tpLineSeverityLosstatLosf_val);

	return MFD_SUCCESS;
} /* tpLineSeverityLosstatLosf_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityLosstatLosf_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityLosstatLosf_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityLosstatLosf undo.
	 */
	/*
	 * copy tpLineSeverityLosstatLosf data
	 * set rowreq_ctx->data.tpLineSeverityLosstatLosf from rowreq_ctx->undo->tpLineSeverityLosstatLosf
	 */
	rowreq_ctx->data.tpLineSeverityLosstatLosf = rowreq_ctx->undo->tpLineSeverityLosstatLosf;

	return MFD_SUCCESS;
} /* tpLineSeverityLosstatLosf_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityPathmonAccstat
 * tpLineSeverityPathmonAccstat is subid 11 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.11
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityPathmonAccstat_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityPathmonAccstat_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonAccstat_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonAccstat_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityPathmonAccstat value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityPathmonAccstat value not illegal */
} /* tpLineSeverityPathmonAccstat_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityPathmonAccstat_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonAccstat_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityPathmonAccstat undo.
	 */
	/*
	 * copy tpLineSeverityPathmonAccstat data
	 * set rowreq_ctx->undo->tpLineSeverityPathmonAccstat from rowreq_ctx->data.tpLineSeverityPathmonAccstat
	 */
	rowreq_ctx->undo->tpLineSeverityPathmonAccstat = rowreq_ctx->data.tpLineSeverityPathmonAccstat;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonAccstat_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityPathmonAccstat_val
 *        A long containing the new value.
 */
int tpLineSeverityPathmonAccstat_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonAccstat_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonAccstat_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityPathmonAccstat value.
	 * set tpLineSeverityPathmonAccstat value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityPathmonAccstat = tpLineSeverityPathmonAccstat_val;

	// Set severity on shared memory
	setTpLineSeverity("PathmonAccstat", tpLineSeverityPathmonAccstat_val);

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonAccstat_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityPathmonAccstat_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonAccstat_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityPathmonAccstat undo.
	 */
	/*
	 * copy tpLineSeverityPathmonAccstat data
	 * set rowreq_ctx->data.tpLineSeverityPathmonAccstat from rowreq_ctx->undo->tpLineSeverityPathmonAccstat
	 */
	rowreq_ctx->data.tpLineSeverityPathmonAccstat = rowreq_ctx->undo->tpLineSeverityPathmonAccstat;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonAccstat_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityPathmonDais
 * tpLineSeverityPathmonDais is subid 12 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.12
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityPathmonDais_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityPathmonDais_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonDais_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDais_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityPathmonDais value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityPathmonDais value not illegal */
} /* tpLineSeverityPathmonDais_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityPathmonDais_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDais_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityPathmonDais undo.
	 */
	/*
	 * copy tpLineSeverityPathmonDais data
	 * set rowreq_ctx->undo->tpLineSeverityPathmonDais from rowreq_ctx->data.tpLineSeverityPathmonDais
	 */
	rowreq_ctx->undo->tpLineSeverityPathmonDais = rowreq_ctx->data.tpLineSeverityPathmonDais;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDais_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityPathmonDais_val
 *        A long containing the new value.
 */
int tpLineSeverityPathmonDais_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonDais_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDais_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityPathmonDais value.
	 * set tpLineSeverityPathmonDais value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityPathmonDais = tpLineSeverityPathmonDais_val;

	// Set severity on shared memory
	setTpLineSeverity("PathmonDais", tpLineSeverityPathmonDais_val);

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDais_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityPathmonDais_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDais_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityPathmonDais undo.
	 */
	/*
	 * copy tpLineSeverityPathmonDais data
	 * set rowreq_ctx->data.tpLineSeverityPathmonDais from rowreq_ctx->undo->tpLineSeverityPathmonDais
	 */
	rowreq_ctx->data.tpLineSeverityPathmonDais = rowreq_ctx->undo->tpLineSeverityPathmonDais;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDais_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityPathmonDbdi
 * tpLineSeverityPathmonDbdi is subid 13 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.13
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityPathmonDbdi_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityPathmonDbdi_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonDbdi_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDbdi_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityPathmonDbdi value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityPathmonDbdi value not illegal */
} /* tpLineSeverityPathmonDbdi_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityPathmonDbdi_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDbdi_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityPathmonDbdi undo.
	 */
	/*
	 * copy tpLineSeverityPathmonDbdi data
	 * set rowreq_ctx->undo->tpLineSeverityPathmonDbdi from rowreq_ctx->data.tpLineSeverityPathmonDbdi
	 */
	rowreq_ctx->undo->tpLineSeverityPathmonDbdi = rowreq_ctx->data.tpLineSeverityPathmonDbdi;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDbdi_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityPathmonDbdi_val
 *        A long containing the new value.
 */
int tpLineSeverityPathmonDbdi_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonDbdi_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDbdi_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityPathmonDbdi value.
	 * set tpLineSeverityPathmonDbdi value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityPathmonDbdi = tpLineSeverityPathmonDbdi_val;

	// Set severity on shared memory
	setTpLineSeverity("PathmonDbdi", tpLineSeverityPathmonDbdi_val);

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDbdi_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityPathmonDbdi_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDbdi_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityPathmonDbdi undo.
	 */
	/*
	 * copy tpLineSeverityPathmonDbdi data
	 * set rowreq_ctx->data.tpLineSeverityPathmonDbdi from rowreq_ctx->undo->tpLineSeverityPathmonDbdi
	 */
	rowreq_ctx->data.tpLineSeverityPathmonDbdi = rowreq_ctx->undo->tpLineSeverityPathmonDbdi;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDbdi_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityPathmonDlck
 * tpLineSeverityPathmonDlck is subid 14 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.14
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityPathmonDlck_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityPathmonDlck_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonDlck_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDlck_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityPathmonDlck value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityPathmonDlck value not illegal */
} /* tpLineSeverityPathmonDlck_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityPathmonDlck_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDlck_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityPathmonDlck undo.
	 */
	/*
	 * copy tpLineSeverityPathmonDlck data
	 * set rowreq_ctx->undo->tpLineSeverityPathmonDlck from rowreq_ctx->data.tpLineSeverityPathmonDlck
	 */
	rowreq_ctx->undo->tpLineSeverityPathmonDlck = rowreq_ctx->data.tpLineSeverityPathmonDlck;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDlck_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityPathmonDlck_val
 *        A long containing the new value.
 */
int tpLineSeverityPathmonDlck_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonDlck_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDlck_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityPathmonDlck value.
	 * set tpLineSeverityPathmonDlck value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityPathmonDlck = tpLineSeverityPathmonDlck_val;

	// Set severity on shared memory
	setTpLineSeverity("PathmonDlck", tpLineSeverityPathmonDlck_val);

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDlck_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityPathmonDlck_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonDlck_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityPathmonDlck undo.
	 */
	/*
	 * copy tpLineSeverityPathmonDlck data
	 * set rowreq_ctx->data.tpLineSeverityPathmonDlck from rowreq_ctx->undo->tpLineSeverityPathmonDlck
	 */
	rowreq_ctx->data.tpLineSeverityPathmonDlck = rowreq_ctx->undo->tpLineSeverityPathmonDlck;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonDlck_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeverityPathmonMsiunst
 * tpLineSeverityPathmonMsiunst is subid 15 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.15
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeverityPathmonMsiunst_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeverityPathmonMsiunst_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonMsiunst_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonMsiunst_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeverityPathmonMsiunst value.
	 */

	return MFD_SUCCESS; /* tpLineSeverityPathmonMsiunst value not illegal */
} /* tpLineSeverityPathmonMsiunst_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeverityPathmonMsiunst_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonMsiunst_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeverityPathmonMsiunst undo.
	 */
	/*
	 * copy tpLineSeverityPathmonMsiunst data
	 * set rowreq_ctx->undo->tpLineSeverityPathmonMsiunst from rowreq_ctx->data.tpLineSeverityPathmonMsiunst
	 */
	rowreq_ctx->undo->tpLineSeverityPathmonMsiunst = rowreq_ctx->data.tpLineSeverityPathmonMsiunst;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonMsiunst_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeverityPathmonMsiunst_val
 *        A long containing the new value.
 */
int tpLineSeverityPathmonMsiunst_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeverityPathmonMsiunst_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonMsiunst_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeverityPathmonMsiunst value.
	 * set tpLineSeverityPathmonMsiunst value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeverityPathmonMsiunst = tpLineSeverityPathmonMsiunst_val;

	// Set severity on shared memory
	setTpLineSeverity("PathmonMsiunst", tpLineSeverityPathmonMsiunst_val);

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonMsiunst_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeverityPathmonMsiunst_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeverityPathmonMsiunst_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeverityPathmonMsiunst undo.
	 */
	/*
	 * copy tpLineSeverityPathmonMsiunst data
	 * set rowreq_ctx->data.tpLineSeverityPathmonMsiunst from rowreq_ctx->undo->tpLineSeverityPathmonMsiunst
	 */
	rowreq_ctx->data.tpLineSeverityPathmonMsiunst = rowreq_ctx->undo->tpLineSeverityPathmonMsiunst;

	return MFD_SUCCESS;
} /* tpLineSeverityPathmonMsiunst_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeveritySecmonBipsfs
 * tpLineSeveritySecmonBipsfs is subid 16 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.16
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeveritySecmonBipsfs_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeveritySecmonBipsfs_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonBipsfs_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonBipsfs_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeveritySecmonBipsfs value.
	 */

	return MFD_SUCCESS; /* tpLineSeveritySecmonBipsfs value not illegal */
} /* tpLineSeveritySecmonBipsfs_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeveritySecmonBipsfs_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonBipsfs_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeveritySecmonBipsfs undo.
	 */
	/*
	 * copy tpLineSeveritySecmonBipsfs data
	 * set rowreq_ctx->undo->tpLineSeveritySecmonBipsfs from rowreq_ctx->data.tpLineSeveritySecmonBipsfs
	 */
	rowreq_ctx->undo->tpLineSeveritySecmonBipsfs = rowreq_ctx->data.tpLineSeveritySecmonBipsfs;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonBipsfs_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeveritySecmonBipsfs_val
 *        A long containing the new value.
 */
int tpLineSeveritySecmonBipsfs_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonBipsfs_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonBipsfs_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeveritySecmonBipsfs value.
	 * set tpLineSeveritySecmonBipsfs value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeveritySecmonBipsfs = tpLineSeveritySecmonBipsfs_val;

	// Set severity on shared memory
	setTpLineSeverity("SecmonBipsfs", tpLineSeveritySecmonBipsfs_val);

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonBipsfs_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeveritySecmonBipsfs_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonBipsfs_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeveritySecmonBipsfs undo.
	 */
	/*
	 * copy tpLineSeveritySecmonBipsfs data
	 * set rowreq_ctx->data.tpLineSeveritySecmonBipsfs from rowreq_ctx->undo->tpLineSeveritySecmonBipsfs
	 */
	rowreq_ctx->data.tpLineSeveritySecmonBipsfs = rowreq_ctx->undo->tpLineSeveritySecmonBipsfs;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonBipsfs_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeveritySecmonDbdi
 * tpLineSeveritySecmonDbdi is subid 17 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.17
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeveritySecmonDbdi_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeveritySecmonDbdi_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonDbdi_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDbdi_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeveritySecmonDbdi value.
	 */

	return MFD_SUCCESS; /* tpLineSeveritySecmonDbdi value not illegal */
} /* tpLineSeveritySecmonDbdi_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeveritySecmonDbdi_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDbdi_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeveritySecmonDbdi undo.
	 */
	/*
	 * copy tpLineSeveritySecmonDbdi data
	 * set rowreq_ctx->undo->tpLineSeveritySecmonDbdi from rowreq_ctx->data.tpLineSeveritySecmonDbdi
	 */
	rowreq_ctx->undo->tpLineSeveritySecmonDbdi = rowreq_ctx->data.tpLineSeveritySecmonDbdi;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonDbdi_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeveritySecmonDbdi_val
 *        A long containing the new value.
 */
int tpLineSeveritySecmonDbdi_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonDbdi_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDbdi_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeveritySecmonDbdi value.
	 * set tpLineSeveritySecmonDbdi value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeveritySecmonDbdi = tpLineSeveritySecmonDbdi_val;

	// Set severity on shared memory
	setTpLineSeverity("SecmonDbdi", tpLineSeveritySecmonDbdi_val);

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonDbdi_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeveritySecmonDbdi_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDbdi_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeveritySecmonDbdi undo.
	 */
	/*
	 * copy tpLineSeveritySecmonDbdi data
	 * set rowreq_ctx->data.tpLineSeveritySecmonDbdi from rowreq_ctx->undo->tpLineSeveritySecmonDbdi
	 */
	rowreq_ctx->data.tpLineSeveritySecmonDbdi = rowreq_ctx->undo->tpLineSeveritySecmonDbdi;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonDbdi_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeveritySecmonDiae
 * tpLineSeveritySecmonDiae is subid 18 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.18
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeveritySecmonDiae_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeveritySecmonDiae_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonDiae_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDiae_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeveritySecmonDiae value.
	 */

	return MFD_SUCCESS; /* tpLineSeveritySecmonDiae value not illegal */
} /* tpLineSeveritySecmonDiae_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeveritySecmonDiae_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDiae_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeveritySecmonDiae undo.
	 */
	/*
	 * copy tpLineSeveritySecmonDiae data
	 * set rowreq_ctx->undo->tpLineSeveritySecmonDiae from rowreq_ctx->data.tpLineSeveritySecmonDiae
	 */
	rowreq_ctx->undo->tpLineSeveritySecmonDiae = rowreq_ctx->data.tpLineSeveritySecmonDiae;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonDiae_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeveritySecmonDiae_val
 *        A long containing the new value.
 */
int tpLineSeveritySecmonDiae_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonDiae_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDiae_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeveritySecmonDiae value.
	 * set tpLineSeveritySecmonDiae value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeveritySecmonDiae = tpLineSeveritySecmonDiae_val;

	// Set severity on shared memory
	setTpLineSeverity("SecmonDiae", tpLineSeveritySecmonDiae_val);

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonDiae_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeveritySecmonDiae_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonDiae_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeveritySecmonDiae undo.
	 */
	/*
	 * copy tpLineSeveritySecmonDiae data
	 * set rowreq_ctx->data.tpLineSeveritySecmonDiae from rowreq_ctx->undo->tpLineSeveritySecmonDiae
	 */
	rowreq_ctx->data.tpLineSeveritySecmonDiae = rowreq_ctx->undo->tpLineSeveritySecmonDiae;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonDiae_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeveritySecmonFlom
 * tpLineSeveritySecmonFlom is subid 19 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.19
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeveritySecmonFlom_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeveritySecmonFlom_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonFlom_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonFlom_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeveritySecmonFlom value.
	 */

	return MFD_SUCCESS; /* tpLineSeveritySecmonFlom value not illegal */
} /* tpLineSeveritySecmonFlom_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeveritySecmonFlom_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonFlom_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeveritySecmonFlom undo.
	 */
	/*
	 * copy tpLineSeveritySecmonFlom data
	 * set rowreq_ctx->undo->tpLineSeveritySecmonFlom from rowreq_ctx->data.tpLineSeveritySecmonFlom
	 */
	rowreq_ctx->undo->tpLineSeveritySecmonFlom = rowreq_ctx->data.tpLineSeveritySecmonFlom;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonFlom_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeveritySecmonFlom_val
 *        A long containing the new value.
 */
int tpLineSeveritySecmonFlom_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonFlom_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonFlom_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeveritySecmonFlom value.
	 * set tpLineSeveritySecmonFlom value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeveritySecmonFlom = tpLineSeveritySecmonFlom_val;

	// Set severity on shared memory
	setTpLineSeverity("SecmonFlom", tpLineSeveritySecmonFlom_val);

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonFlom_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeveritySecmonFlom_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonFlom_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeveritySecmonFlom undo.
	 */
	/*
	 * copy tpLineSeveritySecmonFlom data
	 * set rowreq_ctx->data.tpLineSeveritySecmonFlom from rowreq_ctx->undo->tpLineSeveritySecmonFlom
	 */
	rowreq_ctx->data.tpLineSeveritySecmonFlom = rowreq_ctx->undo->tpLineSeveritySecmonFlom;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonFlom_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::tpLineSeverityEntry.tpLineSeveritySecmonLom
 * tpLineSeveritySecmonLom is subid 20 of tpLineSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.6.1.1.20
 * Description:
 alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param tpLineSeveritySecmonLom_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * tpLineSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int tpLineSeveritySecmonLom_check_value(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonLom_val)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonLom_check_value","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:441:o: |-> Check for valid tpLineSeveritySecmonLom value.
	 */

	return MFD_SUCCESS; /* tpLineSeveritySecmonLom value not illegal */
} /* tpLineSeveritySecmonLom_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (tpLineSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * tpLineSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int tpLineSeveritySecmonLom_undo_setup(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonLom_undo_setup","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:455:o: |-> Setup tpLineSeveritySecmonLom undo.
	 */
	/*
	 * copy tpLineSeveritySecmonLom data
	 * set rowreq_ctx->undo->tpLineSeveritySecmonLom from rowreq_ctx->data.tpLineSeveritySecmonLom
	 */
	rowreq_ctx->undo->tpLineSeveritySecmonLom = rowreq_ctx->data.tpLineSeveritySecmonLom;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonLom_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param tpLineSeveritySecmonLom_val
 *        A long containing the new value.
 */
int tpLineSeveritySecmonLom_set(tpLineSeverityTable_rowreq_ctx *rowreq_ctx, long tpLineSeveritySecmonLom_val)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonLom_set","called\n"));

	/** should never get a NULL pointer */
	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:461:M: |-> Set tpLineSeveritySecmonLom value.
	 * set tpLineSeveritySecmonLom value in rowreq_ctx->data
	 */
	rowreq_ctx->data.tpLineSeveritySecmonLom = tpLineSeveritySecmonLom_val;

	// Set severity on shared memory
	setTpLineSeverity("SecmonLom", tpLineSeveritySecmonLom_val);

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonLom_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int tpLineSeveritySecmonLom_undo(tpLineSeverityTable_rowreq_ctx *rowreq_ctx)
{

	DEBUGMSGTL(("verbose:tpLineSeverityTable:tpLineSeveritySecmonLom_undo","called\n"));

	netsnmp_assert(NULL != rowreq_ctx);

	/*
	 * TODO:456:o: |-> Clean up tpLineSeveritySecmonLom undo.
	 */
	/*
	 * copy tpLineSeveritySecmonLom data
	 * set rowreq_ctx->data.tpLineSeveritySecmonLom from rowreq_ctx->undo->tpLineSeveritySecmonLom
	 */
	rowreq_ctx->data.tpLineSeveritySecmonLom = rowreq_ctx->undo->tpLineSeveritySecmonLom;

	return MFD_SUCCESS;
} /* tpLineSeveritySecmonLom_undo */

void setTpLineSeverity(char *alarm, long severity_value)
{
	DEBUGMSGTL(("verbose:setTpLineSeverity:setTpLineSeverity","called\n"));

	shm_handler_create(pt_monitor_struct);

	if (strcmp(alarm, "FramerFsmms") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerFsmms = severity_value;
	}
	else if (strcmp(alarm, "FramerFsmmtrb1s") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerFsmmtrb1s = severity_value;
	}
	else if (strcmp(alarm, "FramerFsmmtrb2s") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerFsmmtrb2s = severity_value;
	}
	else if (strcmp(alarm, "FramerFsmmtrb3s") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerFsmmtrb3s = severity_value;
	}
	else if (strcmp(alarm, "FramerFst") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerFst = severity_value;
	}
	else if (strcmp(alarm, "FramerSif") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerSif = severity_value;
	}
	else if (strcmp(alarm, "FramerSlof") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerSlof = severity_value;
	}
	else if (strcmp(alarm, "FramerSoof") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.FramerSoof = severity_value;
	}
	else if (strcmp(alarm, "LosstatLosf") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.LosstatLosf = severity_value;
	}
	else if (strcmp(alarm, "PathmonAccstat") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.PathmonAccstat = severity_value;
	}
	else if (strcmp(alarm, "PathmonDais") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.PathmonDais = severity_value;
	}
	else if (strcmp(alarm, "PathmonDbdi") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.PathmonDbdi = severity_value;
	}
	else if (strcmp(alarm, "PathmonDlck") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.PathmonDlck = severity_value;
	}
	else if (strcmp(alarm, "PathmonMsiunst") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.PathmonMsiunst = severity_value;
	}
	else if (strcmp(alarm, "SecmonBipsfs") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.SecmonBipsfs = severity_value;
	}
	else if (strcmp(alarm, "SecmonDbdi") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.SecmonDbdi = severity_value;
	}
	else if (strcmp(alarm, "SecmonDiae") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.SecmonDiae = severity_value;
	}
	else if (strcmp(alarm, "SecmonFlom") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.SecmonFlom = severity_value;
	}
	else if (strcmp(alarm, "SecmonLom") == 0)
	{
		pt_monitor_struct->tp_defects_struct.severity.severity_line.SecmonLom = severity_value;
	}

	// Set dirty flag
	pt_monitor_struct->sev_dirty_flag = 1;
}

/** @} */
