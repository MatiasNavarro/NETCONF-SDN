/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 *
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp3SeverityTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>
#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @defgroup data_set data_set: Routines to set data
 *
 * These routines are used to set the value for individual objects. The
 * row context is passed, along with the new value.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp3SeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp3SeverityTable is subid 3 of xfpAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3, length: 12
*/
    /*
     * NOTE: if you update this chart, please update the versions in
     *       local/mib2c-conf.d/parent-set.m2i
     *       agent/mibgroup/helpers/baby_steps.c
     * while you're at it.
     */
    /*
     ***********************************************************************
     * Baby Steps Flow Chart (2004.06.05)                                  *
     *                                                                     *
     * +--------------+    +================+    U = unconditional path    *
     * |optional state|    ||required state||    S = path for success      *
     * +--------------+    +================+    E = path for error        *
     ***********************************************************************
     *
     *                        +--------------+
     *                        |     pre      |
     *                        |   request    |
     *                        +--------------+
     *                               | U
     *                        +==============+
     *       +----------------||  object    ||
     *       |              E ||  lookup    ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |              E ||   check    ||
     *       |<---------------||   values   ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |       +<-------||   undo     ||
     *       |       |      E ||   setup    ||
     *       |       |        +==============+
     *       |       |               | S
     *       |       |        +==============+
     *       |       |        ||    set     ||-------------------------->+
     *       |       |        ||   value    || E                         |
     *       |       |        +==============+                           |
     *       |       |               | S                                 |
     *       |       |        +--------------+                           |
     *       |       |        |    check     |-------------------------->|
     *       |       |        |  consistency | E                         |
     *       |       |        +--------------+                           |
     *       |       |               | S                                 |
     *       |       |        +==============+         +==============+  |
     *       |       |        ||   commit   ||-------->||     undo   ||  |
     *       |       |        ||            || E       ||    commit  ||  |
     *       |       |        +==============+         +==============+  |
     *       |       |               | S                     U |<--------+
     *       |       |        +--------------+         +==============+
     *       |       |        | irreversible |         ||    undo    ||
     *       |       |        |    commit    |         ||     set    ||
     *       |       |        +--------------+         +==============+
     *       |       |               | U                     U |
     *       |       +-------------->|<------------------------+
     *       |                +==============+
     *       |                ||   undo     ||
     *       |                ||  cleanup   ||
     *       |                +==============+
     *       +---------------------->| U
     *                        +--------------+
     *                        |    post      |
     *                        |   request    |
     *                        +--------------+
     *
     */

/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 *
 * Note that the undo context has been allocated with
 * xfp3SeverityTable_allocate_data(), but may need extra
 * initialization similar to what you may have done in
 * xfp3SeverityTable_rowreq_ctx_init().
 * Note that an individual node's undo_setup function will only be called
 * if that node is being set to a new value.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in the node's undo_setup
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
xfp3SeverityTable_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTable_undo_setup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> Setup xfp3SeverityTable undo.
     * set up xfp3SeverityTable undo information, in preparation for a set.
     * Undo storage is in (* xfp3SeverityLaserFault_val_ptr )*
     */

    return rc;
} /* xfp3SeverityTable_undo_setup */

/**
 * Undo a set request.
 *
 * This function will be called before the individual node undo
 * functions are called. If you need to do any undo that is not
 * related to a specific column, you can do it here.
 *
 * Note that an individual node's undo function will only be called
 * if that node is being set to a new value.
 *
 * If there is anything  specific to a particular column (e.g. releasing
 * memory for a string), you should do that setup in the node's undo
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int
xfp3SeverityTable_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTable_undo","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> xfp3SeverityTable undo.
     * xfp3SeverityTable undo information, in response to a failed set.
     * Undo storage is in (* xfp3SeverityLaserFault_val_ptr )*
     */

    return rc;
} /* xfp3SeverityTable_undo_setup */

/**
 * Cleanup up context undo information.
 *
 * This function will be called after set/commit processing. If you
 * allocated any resources in undo_setup, this is the place to release
 * those resources.
 *
 * This function is called regardless of the success or failure of the set
 * request. If you need to perform different steps for cleanup depending
 * on success or failure, you can add a flag to the rowreq_ctx.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
xfp3SeverityTable_undo_cleanup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTable_undo_cleanup","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:452:M: |-> Cleanup xfp3SeverityTable undo.
     * Undo storage is in (* xfp3SeverityLaserFault_val_ptr )*
     */

    return rc;
} /* xfp3SeverityTable_undo_cleanup */

/**
 * commit new values.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * xfp3SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param xfp3SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
xfp3SeverityTable_commit( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;
    int             save_flags;

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTable_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * save flags, then clear until we actually do something
     */
    save_flags = rowreq_ctx->column_set_flags;
    rowreq_ctx->column_set_flags = 0;

    /*
     * commit xfp3SeverityTable data
     * 1) check the column's flag in save_flags to see if it was set.
     * 2) clear the flag when you handle that column
     * 3) set the column's flag in column_set_flags if it needs undo
     *    processing in case of a failure.
     */
    if (save_flags & COLUMN_XFP3SEVERITYPRESENCE_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYPRESENCE_FLAG; /* clear xfp3SeverityPresence */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityPresence.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityPresence commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityPresence
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYPRESENCE_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYRXLOSS_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYRXLOSS_FLAG; /* clear xfp3SeverityRxLoss */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityRxLoss.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityRxLoss commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityRxLoss
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYRXLOSS_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYREADY_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYREADY_FLAG; /* clear xfp3SeverityReady */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityReady.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityReady commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityReady
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYREADY_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYTXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYTXPOWER_FLAG; /* clear xfp3SeverityTxPower */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityTxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityTxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityTxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYTXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYRXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYRXPOWER_FLAG; /* clear xfp3SeverityRxPower */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityRxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityRxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityRxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYRXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYTEMPERATURE_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYTEMPERATURE_FLAG; /* clear xfp3SeverityTemperature */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityTemperature.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityTemperature commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityTemperature
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYTEMPERATURE_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYLOWTXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYLOWTXPOWER_FLAG; /* clear xfp3SeverityLowTxPower */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityLowTxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityLowTxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityLowTxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYLOWTXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYHIGHTXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYHIGHTXPOWER_FLAG; /* clear xfp3SeverityHighTxPower */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityHighTxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityHighTxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityHighTxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYHIGHTXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYLOWRXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYLOWRXPOWER_FLAG; /* clear xfp3SeverityLowRxPower */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityLowRxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityLowRxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityLowRxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYLOWRXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYHIGHRXPOWER_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYHIGHRXPOWER_FLAG; /* clear xfp3SeverityHighRxPower */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityHighRxPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityHighRxPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityHighRxPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYHIGHRXPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYRXCDRLOSSOFLOCK_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYRXCDRLOSSOFLOCK_FLAG; /* clear xfp3SeverityRxCdrLossOfLock */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityRxCdrLossOfLock.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityRxCdrLossOfLock commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityRxCdrLossOfLock
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYRXCDRLOSSOFLOCK_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYTXCDRLOSSOFLOCK_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYTXCDRLOSSOFLOCK_FLAG; /* clear xfp3SeverityTxCdrLossOfLock */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityTxCdrLossOfLock.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityTxCdrLossOfLock commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityTxCdrLossOfLock
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYTXCDRLOSSOFLOCK_FLAG;
       }
    }

    if (save_flags & COLUMN_XFP3SEVERITYLASERFAULT_FLAG) {
       save_flags &= ~COLUMN_XFP3SEVERITYLASERFAULT_FLAG; /* clear xfp3SeverityLaserFault */
       /*
        * TODO:482:o: |-> commit column xfp3SeverityLaserFault.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"xfp3SeverityTable column xfp3SeverityLaserFault commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo xfp3SeverityLaserFault
             */
            rowreq_ctx->column_set_flags |= COLUMN_XFP3SEVERITYLASERFAULT_FLAG;
       }
    }

    /*
     * if we successfully commited this row, set the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags |= MFD_ROW_DIRTY;
    }

    if (save_flags) {
       snmp_log(LOG_ERR, "unhandled columns (0x%x) in commit\n", save_flags);
       return MFD_ERROR;
    }

    return rc;
} /* xfp3SeverityTable_commit */

/**
 * undo commit new values.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * xfp3SeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param xfp3SeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int
xfp3SeverityTable_undo_commit( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    int rc = MFD_SUCCESS;

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTable_undo_commit","called\n"));

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:485:M: |-> Undo xfp3SeverityTable commit.
     * check the column's flag in rowreq_ctx->column_set_flags to see
     * if it was set during commit, then undo it.
     *
     * eg: if (rowreq_ctx->column_set_flags & COLUMN__FLAG) {}
     */

    
    /*
     * if we successfully un-commited this row, clear the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags &= ~MFD_ROW_DIRTY;
    }

    return rc;
} /* xfp3SeverityTable_undo_commit */

/*
 * TODO:440:M: Implement xfp3SeverityTable node value checks.
 * TODO:450:M: Implement xfp3SeverityTable undo functions.
 * TODO:460:M: Implement xfp3SeverityTable set functions.
 * TODO:480:M: Implement xfp3SeverityTable commit functions.
 */
/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityPresence
 * xfp3SeverityPresence is subid 2 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityPresence_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityPresence_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityPresence_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityPresence_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityPresence value.
     */

    return MFD_SUCCESS; /* xfp3SeverityPresence value not illegal */
} /* xfp3SeverityPresence_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityPresence_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityPresence_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityPresence undo.
     */
    /*
     * copy xfp3SeverityPresence data
     * set rowreq_ctx->undo->xfp3SeverityPresence from rowreq_ctx->data.xfp3SeverityPresence
     */
    rowreq_ctx->undo->xfp3SeverityPresence = rowreq_ctx->data.xfp3SeverityPresence;


    return MFD_SUCCESS;
} /* xfp3SeverityPresence_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityPresence_val
 *        A long containing the new value.
 */
int
xfp3SeverityPresence_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityPresence_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityPresence_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityPresence value.
     * set xfp3SeverityPresence value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityPresence = xfp3SeverityPresence_val;

    // Set severity on shared memory
    setXfp3Severity("presence", xfp3SeverityPresence_val);

    return MFD_SUCCESS;
} /* xfp3SeverityPresence_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityPresence_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityPresence_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityPresence undo.
     */
    /*
     * copy xfp3SeverityPresence data
     * set rowreq_ctx->data.xfp3SeverityPresence from rowreq_ctx->undo->xfp3SeverityPresence
     */
    rowreq_ctx->data.xfp3SeverityPresence = rowreq_ctx->undo->xfp3SeverityPresence;

    
    return MFD_SUCCESS;
} /* xfp3SeverityPresence_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityRxLoss
 * xfp3SeverityRxLoss is subid 3 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityRxLoss_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityRxLoss_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityRxLoss_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxLoss_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityRxLoss value.
     */

    return MFD_SUCCESS; /* xfp3SeverityRxLoss value not illegal */
} /* xfp3SeverityRxLoss_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityRxLoss_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxLoss_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityRxLoss undo.
     */
    /*
     * copy xfp3SeverityRxLoss data
     * set rowreq_ctx->undo->xfp3SeverityRxLoss from rowreq_ctx->data.xfp3SeverityRxLoss
     */
    rowreq_ctx->undo->xfp3SeverityRxLoss = rowreq_ctx->data.xfp3SeverityRxLoss;


    return MFD_SUCCESS;
} /* xfp3SeverityRxLoss_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityRxLoss_val
 *        A long containing the new value.
 */
int
xfp3SeverityRxLoss_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityRxLoss_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxLoss_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityRxLoss value.
     * set xfp3SeverityRxLoss value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityRxLoss = xfp3SeverityRxLoss_val;

    // Set severity on shared memory
    setXfp3Severity("rx_loss", xfp3SeverityRxLoss_val);

    return MFD_SUCCESS;
} /* xfp3SeverityRxLoss_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityRxLoss_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxLoss_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityRxLoss undo.
     */
    /*
     * copy xfp3SeverityRxLoss data
     * set rowreq_ctx->data.xfp3SeverityRxLoss from rowreq_ctx->undo->xfp3SeverityRxLoss
     */
    rowreq_ctx->data.xfp3SeverityRxLoss = rowreq_ctx->undo->xfp3SeverityRxLoss;

    
    return MFD_SUCCESS;
} /* xfp3SeverityRxLoss_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityReady
 * xfp3SeverityReady is subid 4 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityReady_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityReady_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityReady_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityReady_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityReady value.
     */

    return MFD_SUCCESS; /* xfp3SeverityReady value not illegal */
} /* xfp3SeverityReady_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityReady_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityReady_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityReady undo.
     */
    /*
     * copy xfp3SeverityReady data
     * set rowreq_ctx->undo->xfp3SeverityReady from rowreq_ctx->data.xfp3SeverityReady
     */
    rowreq_ctx->undo->xfp3SeverityReady = rowreq_ctx->data.xfp3SeverityReady;


    return MFD_SUCCESS;
} /* xfp3SeverityReady_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityReady_val
 *        A long containing the new value.
 */
int
xfp3SeverityReady_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityReady_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityReady_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityReady value.
     * set xfp3SeverityReady value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityReady = xfp3SeverityReady_val;

    // Set severity on shared memory
    setXfp3Severity("ready", xfp3SeverityReady_val);

    return MFD_SUCCESS;
} /* xfp3SeverityReady_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityReady_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityReady_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityReady undo.
     */
    /*
     * copy xfp3SeverityReady data
     * set rowreq_ctx->data.xfp3SeverityReady from rowreq_ctx->undo->xfp3SeverityReady
     */
    rowreq_ctx->data.xfp3SeverityReady = rowreq_ctx->undo->xfp3SeverityReady;

    
    return MFD_SUCCESS;
} /* xfp3SeverityReady_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityTxPower
 * xfp3SeverityTxPower is subid 5 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityTxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityTxPower_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityTxPower_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityTxPower value.
     */

    return MFD_SUCCESS; /* xfp3SeverityTxPower value not illegal */
} /* xfp3SeverityTxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityTxPower_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityTxPower undo.
     */
    /*
     * copy xfp3SeverityTxPower data
     * set rowreq_ctx->undo->xfp3SeverityTxPower from rowreq_ctx->data.xfp3SeverityTxPower
     */
    rowreq_ctx->undo->xfp3SeverityTxPower = rowreq_ctx->data.xfp3SeverityTxPower;


    return MFD_SUCCESS;
} /* xfp3SeverityTxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityTxPower_val
 *        A long containing the new value.
 */
int
xfp3SeverityTxPower_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityTxPower_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityTxPower value.
     * set xfp3SeverityTxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityTxPower = xfp3SeverityTxPower_val;

    // Set severity on shared memory
    setXfp3Severity("tx_power", xfp3SeverityTxPower_val);

    return MFD_SUCCESS;
} /* xfp3SeverityTxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityTxPower_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityTxPower undo.
     */
    /*
     * copy xfp3SeverityTxPower data
     * set rowreq_ctx->data.xfp3SeverityTxPower from rowreq_ctx->undo->xfp3SeverityTxPower
     */
    rowreq_ctx->data.xfp3SeverityTxPower = rowreq_ctx->undo->xfp3SeverityTxPower;

    
    return MFD_SUCCESS;
} /* xfp3SeverityTxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityRxPower
 * xfp3SeverityRxPower is subid 6 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityRxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityRxPower_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityRxPower_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityRxPower value.
     */

    return MFD_SUCCESS; /* xfp3SeverityRxPower value not illegal */
} /* xfp3SeverityRxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityRxPower_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityRxPower undo.
     */
    /*
     * copy xfp3SeverityRxPower data
     * set rowreq_ctx->undo->xfp3SeverityRxPower from rowreq_ctx->data.xfp3SeverityRxPower
     */
    rowreq_ctx->undo->xfp3SeverityRxPower = rowreq_ctx->data.xfp3SeverityRxPower;


    return MFD_SUCCESS;
} /* xfp3SeverityRxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityRxPower_val
 *        A long containing the new value.
 */
int
xfp3SeverityRxPower_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityRxPower_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityRxPower value.
     * set xfp3SeverityRxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityRxPower = xfp3SeverityRxPower_val;

    // Set severity on shared memory
    setXfp3Severity("rx_power", xfp3SeverityRxPower_val);

    return MFD_SUCCESS;
} /* xfp3SeverityRxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityRxPower_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityRxPower undo.
     */
    /*
     * copy xfp3SeverityRxPower data
     * set rowreq_ctx->data.xfp3SeverityRxPower from rowreq_ctx->undo->xfp3SeverityRxPower
     */
    rowreq_ctx->data.xfp3SeverityRxPower = rowreq_ctx->undo->xfp3SeverityRxPower;

    
    return MFD_SUCCESS;
} /* xfp3SeverityRxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityTemperature
 * xfp3SeverityTemperature is subid 7 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityTemperature_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityTemperature_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityTemperature_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTemperature_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityTemperature value.
     */

    return MFD_SUCCESS; /* xfp3SeverityTemperature value not illegal */
} /* xfp3SeverityTemperature_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityTemperature_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTemperature_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityTemperature undo.
     */
    /*
     * copy xfp3SeverityTemperature data
     * set rowreq_ctx->undo->xfp3SeverityTemperature from rowreq_ctx->data.xfp3SeverityTemperature
     */
    rowreq_ctx->undo->xfp3SeverityTemperature = rowreq_ctx->data.xfp3SeverityTemperature;


    return MFD_SUCCESS;
} /* xfp3SeverityTemperature_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityTemperature_val
 *        A long containing the new value.
 */
int
xfp3SeverityTemperature_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityTemperature_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTemperature_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityTemperature value.
     * set xfp3SeverityTemperature value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityTemperature = xfp3SeverityTemperature_val;

    // Set severity on shared memory
    setXfp3Severity("temperature", xfp3SeverityTemperature_val);

    return MFD_SUCCESS;
} /* xfp3SeverityTemperature_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityTemperature_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTemperature_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityTemperature undo.
     */
    /*
     * copy xfp3SeverityTemperature data
     * set rowreq_ctx->data.xfp3SeverityTemperature from rowreq_ctx->undo->xfp3SeverityTemperature
     */
    rowreq_ctx->data.xfp3SeverityTemperature = rowreq_ctx->undo->xfp3SeverityTemperature;

    
    return MFD_SUCCESS;
} /* xfp3SeverityTemperature_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityLowTxPower
 * xfp3SeverityLowTxPower is subid 8 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.8
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityLowTxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityLowTxPower_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityLowTxPower_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowTxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityLowTxPower value.
     */

    return MFD_SUCCESS; /* xfp3SeverityLowTxPower value not illegal */
} /* xfp3SeverityLowTxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityLowTxPower_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowTxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityLowTxPower undo.
     */
    /*
     * copy xfp3SeverityLowTxPower data
     * set rowreq_ctx->undo->xfp3SeverityLowTxPower from rowreq_ctx->data.xfp3SeverityLowTxPower
     */
    rowreq_ctx->undo->xfp3SeverityLowTxPower = rowreq_ctx->data.xfp3SeverityLowTxPower;


    return MFD_SUCCESS;
} /* xfp3SeverityLowTxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityLowTxPower_val
 *        A long containing the new value.
 */
int
xfp3SeverityLowTxPower_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityLowTxPower_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowTxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityLowTxPower value.
     * set xfp3SeverityLowTxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityLowTxPower = xfp3SeverityLowTxPower_val;

    // Set severity on shared memory
    setXfp3Severity("low_tx_power", xfp3SeverityLowTxPower_val);

    return MFD_SUCCESS;
} /* xfp3SeverityLowTxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityLowTxPower_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowTxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityLowTxPower undo.
     */
    /*
     * copy xfp3SeverityLowTxPower data
     * set rowreq_ctx->data.xfp3SeverityLowTxPower from rowreq_ctx->undo->xfp3SeverityLowTxPower
     */
    rowreq_ctx->data.xfp3SeverityLowTxPower = rowreq_ctx->undo->xfp3SeverityLowTxPower;

    
    return MFD_SUCCESS;
} /* xfp3SeverityLowTxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityHighTxPower
 * xfp3SeverityHighTxPower is subid 9 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.9
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityHighTxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityHighTxPower_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityHighTxPower_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighTxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityHighTxPower value.
     */

    return MFD_SUCCESS; /* xfp3SeverityHighTxPower value not illegal */
} /* xfp3SeverityHighTxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityHighTxPower_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighTxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityHighTxPower undo.
     */
    /*
     * copy xfp3SeverityHighTxPower data
     * set rowreq_ctx->undo->xfp3SeverityHighTxPower from rowreq_ctx->data.xfp3SeverityHighTxPower
     */
    rowreq_ctx->undo->xfp3SeverityHighTxPower = rowreq_ctx->data.xfp3SeverityHighTxPower;


    return MFD_SUCCESS;
} /* xfp3SeverityHighTxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityHighTxPower_val
 *        A long containing the new value.
 */
int
xfp3SeverityHighTxPower_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityHighTxPower_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighTxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityHighTxPower value.
     * set xfp3SeverityHighTxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityHighTxPower = xfp3SeverityHighTxPower_val;

    // Set severity on shared memory
    setXfp3Severity("high_tx_power", xfp3SeverityHighTxPower_val);

    return MFD_SUCCESS;
} /* xfp3SeverityHighTxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityHighTxPower_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighTxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityHighTxPower undo.
     */
    /*
     * copy xfp3SeverityHighTxPower data
     * set rowreq_ctx->data.xfp3SeverityHighTxPower from rowreq_ctx->undo->xfp3SeverityHighTxPower
     */
    rowreq_ctx->data.xfp3SeverityHighTxPower = rowreq_ctx->undo->xfp3SeverityHighTxPower;

    
    return MFD_SUCCESS;
} /* xfp3SeverityHighTxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityLowRxPower
 * xfp3SeverityLowRxPower is subid 10 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.10
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityLowRxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityLowRxPower_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityLowRxPower_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowRxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityLowRxPower value.
     */

    return MFD_SUCCESS; /* xfp3SeverityLowRxPower value not illegal */
} /* xfp3SeverityLowRxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityLowRxPower_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowRxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityLowRxPower undo.
     */
    /*
     * copy xfp3SeverityLowRxPower data
     * set rowreq_ctx->undo->xfp3SeverityLowRxPower from rowreq_ctx->data.xfp3SeverityLowRxPower
     */
    rowreq_ctx->undo->xfp3SeverityLowRxPower = rowreq_ctx->data.xfp3SeverityLowRxPower;


    return MFD_SUCCESS;
} /* xfp3SeverityLowRxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityLowRxPower_val
 *        A long containing the new value.
 */
int
xfp3SeverityLowRxPower_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityLowRxPower_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowRxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityLowRxPower value.
     * set xfp3SeverityLowRxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityLowRxPower = xfp3SeverityLowRxPower_val;

    // Set severity on shared memory
    setXfp3Severity("low_rx_power", xfp3SeverityLowRxPower_val);

    return MFD_SUCCESS;
} /* xfp3SeverityLowRxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityLowRxPower_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLowRxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityLowRxPower undo.
     */
    /*
     * copy xfp3SeverityLowRxPower data
     * set rowreq_ctx->data.xfp3SeverityLowRxPower from rowreq_ctx->undo->xfp3SeverityLowRxPower
     */
    rowreq_ctx->data.xfp3SeverityLowRxPower = rowreq_ctx->undo->xfp3SeverityLowRxPower;

    
    return MFD_SUCCESS;
} /* xfp3SeverityLowRxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityHighRxPower
 * xfp3SeverityHighRxPower is subid 11 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.11
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityHighRxPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityHighRxPower_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityHighRxPower_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighRxPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityHighRxPower value.
     */

    return MFD_SUCCESS; /* xfp3SeverityHighRxPower value not illegal */
} /* xfp3SeverityHighRxPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityHighRxPower_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighRxPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityHighRxPower undo.
     */
    /*
     * copy xfp3SeverityHighRxPower data
     * set rowreq_ctx->undo->xfp3SeverityHighRxPower from rowreq_ctx->data.xfp3SeverityHighRxPower
     */
    rowreq_ctx->undo->xfp3SeverityHighRxPower = rowreq_ctx->data.xfp3SeverityHighRxPower;


    return MFD_SUCCESS;
} /* xfp3SeverityHighRxPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityHighRxPower_val
 *        A long containing the new value.
 */
int
xfp3SeverityHighRxPower_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityHighRxPower_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighRxPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityHighRxPower value.
     * set xfp3SeverityHighRxPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityHighRxPower = xfp3SeverityHighRxPower_val;

    // Set severity on shared memory
    setXfp3Severity("high_rx_power", xfp3SeverityHighRxPower_val);

    return MFD_SUCCESS;
} /* xfp3SeverityHighRxPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityHighRxPower_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityHighRxPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityHighRxPower undo.
     */
    /*
     * copy xfp3SeverityHighRxPower data
     * set rowreq_ctx->data.xfp3SeverityHighRxPower from rowreq_ctx->undo->xfp3SeverityHighRxPower
     */
    rowreq_ctx->data.xfp3SeverityHighRxPower = rowreq_ctx->undo->xfp3SeverityHighRxPower;

    
    return MFD_SUCCESS;
} /* xfp3SeverityHighRxPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityRxCdrLossOfLock
 * xfp3SeverityRxCdrLossOfLock is subid 12 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.12
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityRxCdrLossOfLock_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityRxCdrLossOfLock_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityRxCdrLossOfLock_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxCdrLossOfLock_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityRxCdrLossOfLock value.
     */

    return MFD_SUCCESS; /* xfp3SeverityRxCdrLossOfLock value not illegal */
} /* xfp3SeverityRxCdrLossOfLock_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityRxCdrLossOfLock_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxCdrLossOfLock_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityRxCdrLossOfLock undo.
     */
    /*
     * copy xfp3SeverityRxCdrLossOfLock data
     * set rowreq_ctx->undo->xfp3SeverityRxCdrLossOfLock from rowreq_ctx->data.xfp3SeverityRxCdrLossOfLock
     */
    rowreq_ctx->undo->xfp3SeverityRxCdrLossOfLock = rowreq_ctx->data.xfp3SeverityRxCdrLossOfLock;


    return MFD_SUCCESS;
} /* xfp3SeverityRxCdrLossOfLock_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityRxCdrLossOfLock_val
 *        A long containing the new value.
 */
int
xfp3SeverityRxCdrLossOfLock_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityRxCdrLossOfLock_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxCdrLossOfLock_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityRxCdrLossOfLock value.
     * set xfp3SeverityRxCdrLossOfLock value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityRxCdrLossOfLock = xfp3SeverityRxCdrLossOfLock_val;

    // Set severity on shared memory
    setXfp3Severity("rx_cdr_loss_of_lock", xfp3SeverityRxCdrLossOfLock_val);

    return MFD_SUCCESS;
} /* xfp3SeverityRxCdrLossOfLock_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityRxCdrLossOfLock_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityRxCdrLossOfLock_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityRxCdrLossOfLock undo.
     */
    /*
     * copy xfp3SeverityRxCdrLossOfLock data
     * set rowreq_ctx->data.xfp3SeverityRxCdrLossOfLock from rowreq_ctx->undo->xfp3SeverityRxCdrLossOfLock
     */
    rowreq_ctx->data.xfp3SeverityRxCdrLossOfLock = rowreq_ctx->undo->xfp3SeverityRxCdrLossOfLock;

    
    return MFD_SUCCESS;
} /* xfp3SeverityRxCdrLossOfLock_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityTxCdrLossOfLock
 * xfp3SeverityTxCdrLossOfLock is subid 13 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.13
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityTxCdrLossOfLock_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityTxCdrLossOfLock_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityTxCdrLossOfLock_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxCdrLossOfLock_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityTxCdrLossOfLock value.
     */

    return MFD_SUCCESS; /* xfp3SeverityTxCdrLossOfLock value not illegal */
} /* xfp3SeverityTxCdrLossOfLock_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityTxCdrLossOfLock_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxCdrLossOfLock_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityTxCdrLossOfLock undo.
     */
    /*
     * copy xfp3SeverityTxCdrLossOfLock data
     * set rowreq_ctx->undo->xfp3SeverityTxCdrLossOfLock from rowreq_ctx->data.xfp3SeverityTxCdrLossOfLock
     */
    rowreq_ctx->undo->xfp3SeverityTxCdrLossOfLock = rowreq_ctx->data.xfp3SeverityTxCdrLossOfLock;


    return MFD_SUCCESS;
} /* xfp3SeverityTxCdrLossOfLock_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityTxCdrLossOfLock_val
 *        A long containing the new value.
 */
int
xfp3SeverityTxCdrLossOfLock_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityTxCdrLossOfLock_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxCdrLossOfLock_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityTxCdrLossOfLock value.
     * set xfp3SeverityTxCdrLossOfLock value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityTxCdrLossOfLock = xfp3SeverityTxCdrLossOfLock_val;

    // Set severity on shared memory
    setXfp3Severity("tx_cdr_loss_of_lock", xfp3SeverityTxCdrLossOfLock_val);

    return MFD_SUCCESS;
} /* xfp3SeverityTxCdrLossOfLock_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityTxCdrLossOfLock_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityTxCdrLossOfLock_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityTxCdrLossOfLock undo.
     */
    /*
     * copy xfp3SeverityTxCdrLossOfLock data
     * set rowreq_ctx->data.xfp3SeverityTxCdrLossOfLock from rowreq_ctx->undo->xfp3SeverityTxCdrLossOfLock
     */
    rowreq_ctx->data.xfp3SeverityTxCdrLossOfLock = rowreq_ctx->undo->xfp3SeverityTxCdrLossOfLock;

    
    return MFD_SUCCESS;
} /* xfp3SeverityTxCdrLossOfLock_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3SeverityEntry.xfp3SeverityLaserFault
 * xfp3SeverityLaserFault is subid 14 of xfp3SeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.5.3.1.14
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3SeverityLaserFault_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * xfp3SeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int
xfp3SeverityLaserFault_check_value( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityLaserFault_val)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLaserFault_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid xfp3SeverityLaserFault value.
     */

    return MFD_SUCCESS; /* xfp3SeverityLaserFault value not illegal */
} /* xfp3SeverityLaserFault_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (xfp3SeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * xfp3SeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int
xfp3SeverityLaserFault_undo_setup( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLaserFault_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup xfp3SeverityLaserFault undo.
     */
    /*
     * copy xfp3SeverityLaserFault data
     * set rowreq_ctx->undo->xfp3SeverityLaserFault from rowreq_ctx->data.xfp3SeverityLaserFault
     */
    rowreq_ctx->undo->xfp3SeverityLaserFault = rowreq_ctx->data.xfp3SeverityLaserFault;


    return MFD_SUCCESS;
} /* xfp3SeverityLaserFault_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param xfp3SeverityLaserFault_val
 *        A long containing the new value.
 */
int
xfp3SeverityLaserFault_set( xfp3SeverityTable_rowreq_ctx *rowreq_ctx, long xfp3SeverityLaserFault_val )
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLaserFault_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set xfp3SeverityLaserFault value.
     * set xfp3SeverityLaserFault value in rowreq_ctx->data
     */
    rowreq_ctx->data.xfp3SeverityLaserFault = xfp3SeverityLaserFault_val;

    // Set severity on shared memory
    setXfp3Severity("laser_fault", xfp3SeverityLaserFault_val);

    return MFD_SUCCESS;
} /* xfp3SeverityLaserFault_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int
xfp3SeverityLaserFault_undo( xfp3SeverityTable_rowreq_ctx *rowreq_ctx)
{

    DEBUGMSGTL(("verbose:xfp3SeverityTable:xfp3SeverityLaserFault_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up xfp3SeverityLaserFault undo.
     */
    /*
     * copy xfp3SeverityLaserFault data
     * set rowreq_ctx->data.xfp3SeverityLaserFault from rowreq_ctx->undo->xfp3SeverityLaserFault
     */
    rowreq_ctx->data.xfp3SeverityLaserFault = rowreq_ctx->undo->xfp3SeverityLaserFault;

    
    return MFD_SUCCESS;
} /* xfp3SeverityLaserFault_undo */

void setXfp3Severity(char *alarm, long severity_value)
{
	DEBUGMSGTL(("verbose:xfp3SeverityTable:setXfp3Severity","called\n"));

	shm_handler_create(pt_monitor_struct);

	if(strcmp(alarm, "presence") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].presence = severity_value;
	}
	else if(strcmp(alarm, "rx_loss") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].rx_loss = severity_value;
	}
	else if(strcmp(alarm, "ready") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].ready = severity_value;
	}
	else if(strcmp(alarm, "tx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].tx_power = severity_value;
	}
	else if(strcmp(alarm, "rx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].rx_power = severity_value;
	}
	else if(strcmp(alarm, "temperature") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].temperature = severity_value;
	}
	else if(strcmp(alarm, "low_tx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].low_tx_power = severity_value;
	}
	else if(strcmp(alarm, "high_tx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].high_tx_power = severity_value;
	}
	else if(strcmp(alarm, "low_rx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].low_rx_power = severity_value;
	}
	else if(strcmp(alarm, "high_rx_power") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].high_rx_power = severity_value;
	}
	else if(strcmp(alarm, "rx_cdr_loss_of_lock") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].rx_cdr_loss_of_lock = severity_value;
	}
	else if(strcmp(alarm, "tx_cdr_loss_of_lock") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].tx_cdr_loss_of_lock = severity_value;
	}
	else if(strcmp(alarm, "laser_fault") == 0)
	{
		pt_monitor_struct->xfp_struct.severity[2].laser_fault = severity_value;
	}

	// Set dirty flag
	pt_monitor_struct->sev_dirty_flag = 1;
}

/** @} */
