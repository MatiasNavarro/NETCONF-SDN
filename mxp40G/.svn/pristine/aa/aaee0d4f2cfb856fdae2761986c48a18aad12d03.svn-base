/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $
 *
 * $Id:$
 *
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../edfaSeverityTable.h"

#include <stdio.h>
#include <sys/mman.h>
#include <sys/types.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <stdlib.h>
#include "../../../../lib/hl_configs/definitions.h"

void shm_handler_create(Monitor *pt_monitor_struct);
Monitor *pt_monitor_struct;

/** @defgroup data_set data_set: Routines to set data
 *
 * These routines are used to set the value for individual objects. The
 * row context is passed, along with the new value.
 * 
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table edfaSeverityTable
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::edfaSeverityTable is subid 1 of edfaAlarms.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1, length: 12
*/
    /*
     * NOTE: if you update this chart, please update the versions in
     *       local/mib2c-conf.d/parent-set.m2i
     *       agent/mibgroup/helpers/baby_steps.c
     * while you're at it.
     */
    /*
     ***********************************************************************
     * Baby Steps Flow Chart (2004.06.05)                                  *
     *                                                                     *
     * +--------------+    +================+    U = unconditional path    *
     * |optional state|    ||required state||    S = path for success      *
     * +--------------+    +================+    E = path for error        *
     ***********************************************************************
     *
     *                        +--------------+
     *                        |     pre      |
     *                        |   request    |
     *                        +--------------+
     *                               | U
     *                        +==============+
     *       +----------------||  object    ||
     *       |              E ||  lookup    ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |              E ||   check    ||
     *       |<---------------||   values   ||
     *       |                +==============+
     *       |                       | S
     *       |                +==============+
     *       |       +<-------||   undo     ||
     *       |       |      E ||   setup    ||
     *       |       |        +==============+
     *       |       |               | S
     *       |       |        +==============+
     *       |       |        ||    set     ||-------------------------->+
     *       |       |        ||   value    || E                         |
     *       |       |        +==============+                           |
     *       |       |               | S                                 |
     *       |       |        +--------------+                           |
     *       |       |        |    check     |-------------------------->|
     *       |       |        |  consistency | E                         |
     *       |       |        +--------------+                           |
     *       |       |               | S                                 |
     *       |       |        +==============+         +==============+  |
     *       |       |        ||   commit   ||-------->||     undo   ||  |
     *       |       |        ||            || E       ||    commit  ||  |
     *       |       |        +==============+         +==============+  |
     *       |       |               | S                     U |<--------+
     *       |       |        +--------------+         +==============+
     *       |       |        | irreversible |         ||    undo    ||
     *       |       |        |    commit    |         ||     set    ||
     *       |       |        +--------------+         +==============+
     *       |       |               | U                     U |
     *       |       +-------------->|<------------------------+
     *       |                +==============+
     *       |                ||   undo     ||
     *       |                ||  cleanup   ||
     *       |                +==============+
     *       +---------------------->| U
     *                        +--------------+
     *                        |    post      |
     *                        |   request    |
     *                        +--------------+
     *
     */

/**
 * Setup up context with information needed to undo a set request.
 *
 * This function will be called before the individual node undo setup
 * functions are called. If you need to do any undo setup that is not
 * related to a specific column, you can do it here.
 *
 * Note that the undo context has been allocated with
 * edfaSeverityTable_allocate_data(), but may need extra
 * initialization similar to what you may have done in
 * edfaSeverityTable_rowreq_ctx_init().
 * Note that an individual node's undo_setup function will only be called
 * if that node is being set to a new value.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in the node's undo_setup
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int edfaSeverityTable_undo_setup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
	 DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTable_undo_setup","called\n"));

    int rc = MFD_SUCCESS;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> Setup edfaSeverityTable undo.
     * set up edfaSeverityTable undo information, in preparation for a set.
     * Undo storage is in (* edfaSeverityTemperature_val_ptr )*
     */

    return rc;
} /* edfaSeverityTable_undo_setup */

/**
 * Undo a set request.
 *
 * This function will be called before the individual node undo
 * functions are called. If you need to do any undo that is not
 * related to a specific column, you can do it here.
 *
 * Note that an individual node's undo function will only be called
 * if that node is being set to a new value.
 *
 * If there is anything  specific to a particular column (e.g. releasing
 * memory for a string), you should do that setup in the node's undo
 * function, so it won't be done unless it is necessary.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 */
int edfaSeverityTable_undo( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTable_undo","called\n"));

	int rc = MFD_SUCCESS;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:451:M: |-> edfaSeverityTable undo.
     * edfaSeverityTable undo information, in response to a failed set.
     * Undo storage is in (* edfaSeverityTemperature_val_ptr )*
     */

    return rc;
} /* edfaSeverityTable_undo_setup */

/**
 * Cleanup up context undo information.
 *
 * This function will be called after set/commit processing. If you
 * allocated any resources in undo_setup, this is the place to release
 * those resources.
 *
 * This function is called regardless of the success or failure of the set
 * request. If you need to perform different steps for cleanup depending
 * on success or failure, you can add a flag to the rowreq_ctx.
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int edfaSeverityTable_undo_cleanup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTable_undo_cleanup","called\n"));

	int rc = MFD_SUCCESS;

	/** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:452:M: |-> Cleanup edfaSeverityTable undo.
     * Undo storage is in (* edfaSeverityTemperature_val_ptr )*
     */

    return rc;
} /* edfaSeverityTable_undo_cleanup */

/**
 * commit new values.
 *
 * At this point, you should have done everything you can to ensure that
 * this commit will not fail.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * edfaSeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param edfaSeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int edfaSeverityTable_commit( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTable_commit","called\n"));

    int rc = MFD_SUCCESS;
    int             save_flags;


    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * save flags, then clear until we actually do something
     */
    save_flags = rowreq_ctx->column_set_flags;
    rowreq_ctx->column_set_flags = 0;

    /*
     * commit edfaSeverityTable data
     * 1) check the column's flag in save_flags to see if it was set.
     * 2) clear the flag when you handle that column
     * 3) set the column's flag in column_set_flags if it needs undo
     *    processing in case of a failure.
     */
    if (save_flags & COLUMN_EDFASEVERITYAMPSTATUS_FLAG) {
       save_flags &= ~COLUMN_EDFASEVERITYAMPSTATUS_FLAG; /* clear edfaSeverityAmpStatus */
       /*
        * TODO:482:o: |-> commit column edfaSeverityAmpStatus.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"edfaSeverityTable column edfaSeverityAmpStatus commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo edfaSeverityAmpStatus
             */
            rowreq_ctx->column_set_flags |= COLUMN_EDFASEVERITYAMPSTATUS_FLAG;
       }
    }

    if (save_flags & COLUMN_EDFASEVERITYINPUTPOWER_FLAG) {
       save_flags &= ~COLUMN_EDFASEVERITYINPUTPOWER_FLAG; /* clear edfaSeverityInputPower */
       /*
        * TODO:482:o: |-> commit column edfaSeverityInputPower.
        */
      //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"edfaSeverityTable column edfaSeverityInputPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo edfaSeverityInputPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_EDFASEVERITYINPUTPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_EDFASEVERITYLOP_FLAG) {
       save_flags &= ~COLUMN_EDFASEVERITYLOP_FLAG; /* clear edfaSeverityLop */
       /*
        * TODO:482:o: |-> commit column edfaSeverityLop.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"edfaSeverityTable column edfaSeverityLop commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo edfaSeverityLop
             */
            rowreq_ctx->column_set_flags |= COLUMN_EDFASEVERITYLOP_FLAG;
       }
    }

    if (save_flags & COLUMN_EDFASEVERITYLOS_FLAG) {
       save_flags &= ~COLUMN_EDFASEVERITYLOS_FLAG; /* clear edfaSeverityLos */
       /*
        * TODO:482:o: |-> commit column edfaSeverityLos.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"edfaSeverityTable column edfaSeverityLos commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo edfaSeverityLos
             */
            rowreq_ctx->column_set_flags |= COLUMN_EDFASEVERITYLOS_FLAG;
       }
    }

    if (save_flags & COLUMN_EDFASEVERITYOUTPUTPOWER_FLAG) {
       save_flags &= ~COLUMN_EDFASEVERITYOUTPUTPOWER_FLAG; /* clear edfaSeverityOutputPower */
       /*
        * TODO:482:o: |-> commit column edfaSeverityOutputPower.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"edfaSeverityTable column edfaSeverityOutputPower commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo edfaSeverityOutputPower
             */
            rowreq_ctx->column_set_flags |= COLUMN_EDFASEVERITYOUTPUTPOWER_FLAG;
       }
    }

    if (save_flags & COLUMN_EDFASEVERITYTEMPERATURE_FLAG) {
       save_flags &= ~COLUMN_EDFASEVERITYTEMPERATURE_FLAG; /* clear edfaSeverityTemperature */
       /*
        * TODO:482:o: |-> commit column edfaSeverityTemperature.
        */
       //rc = -1;
       if(-1 == rc) {
           snmp_log(LOG_ERR,"edfaSeverityTable column edfaSeverityTemperature commit failed\n");
       }
       else {
            /*
             * set flag, in case we need to undo edfaSeverityTemperature
             */
            rowreq_ctx->column_set_flags |= COLUMN_EDFASEVERITYTEMPERATURE_FLAG;
       }
    }

    /*
     * if we successfully commited this row, set the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags |= MFD_ROW_DIRTY;
    }

    if (save_flags) {
       snmp_log(LOG_ERR, "unhandled columns (0x%x) in commit\n", save_flags);
       return MFD_ERROR;
    }

    return rc;
} /* edfaSeverityTable_commit */

/**
 * undo commit new values.
 *
 * Should you need different behavior depending on which columns were
 * set, rowreq_ctx->column_set_flags will indicate which writeable columns were
 * set. The definitions for the COLUMN_*_FLAG bits can be found in
 * edfaSeverityTable_oids.h.
 * A new row will have the MFD_ROW_CREATED bit set in rowreq_flags.
 *
 * @param edfaSeverityTable_rowreq_ctx
 *        Pointer to the users context.
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error
 */
int edfaSeverityTable_undo_commit( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTable_undo_commit","called\n"));

    int rc = MFD_SUCCESS;

    /** we should have a non-NULL pointer */
    netsnmp_assert( NULL != rowreq_ctx );

    /*
     * TODO:485:M: |-> Undo edfaSeverityTable commit.
     * check the column's flag in rowreq_ctx->column_set_flags to see
     * if it was set during commit, then undo it.
     *
     * eg: if (rowreq_ctx->column_set_flags & COLUMN__FLAG) {}
     */

    
    /*
     * if we successfully un-commited this row, clear the dirty flag.
     */
    if (MFD_SUCCESS == rc) {
        rowreq_ctx->rowreq_flags &= ~MFD_ROW_DIRTY;
    }

    return rc;
} /* edfaSeverityTable_undo_commit */

/*
 * TODO:440:M: Implement edfaSeverityTable node value checks.
 * TODO:450:M: Implement edfaSeverityTable undo functions.
 * TODO:460:M: Implement edfaSeverityTable set functions.
 * TODO:480:M: Implement edfaSeverityTable commit functions.
 */
/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityAmpStatus
 * edfaSeverityAmpStatus is subid 2 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.2
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityAmpStatus_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * edfaSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int edfaSeverityAmpStatus_check_value( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityAmpStatus_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityAmpStatus_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid edfaSeverityAmpStatus value.
     */

    return MFD_SUCCESS; /* edfaSeverityAmpStatus value not illegal */
} /* edfaSeverityAmpStatus_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * edfaSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int edfaSeverityAmpStatus_undo_setup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityAmpStatus_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup edfaSeverityAmpStatus undo.
     */
    /*
     * copy edfaSeverityAmpStatus data
     * set rowreq_ctx->undo->edfaSeverityAmpStatus from rowreq_ctx->data.edfaSeverityAmpStatus
     */
    rowreq_ctx->undo->edfaSeverityAmpStatus = rowreq_ctx->data.edfaSeverityAmpStatus;


    return MFD_SUCCESS;
} /* edfaSeverityAmpStatus_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param edfaSeverityAmpStatus_val
 *        A long containing the new value.
 */
int edfaSeverityAmpStatus_set( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityAmpStatus_val )
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityAmpStatus_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set edfaSeverityAmpStatus value.
     * set edfaSeverityAmpStatus value in rowreq_ctx->data
     */
    rowreq_ctx->data.edfaSeverityAmpStatus = edfaSeverityAmpStatus_val;

    // Set severity on shared memory
    setEdfaSeverity("amp_status", edfaSeverityAmpStatus_val);

    return MFD_SUCCESS;
} /* edfaSeverityAmpStatus_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int edfaSeverityAmpStatus_undo( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityAmpStatus_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up edfaSeverityAmpStatus undo.
     */
    /*
     * copy edfaSeverityAmpStatus data
     * set rowreq_ctx->data.edfaSeverityAmpStatus from rowreq_ctx->undo->edfaSeverityAmpStatus
     */
    rowreq_ctx->data.edfaSeverityAmpStatus = rowreq_ctx->undo->edfaSeverityAmpStatus;

    
    return MFD_SUCCESS;
} /* edfaSeverityAmpStatus_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityInputPower
 * edfaSeverityInputPower is subid 3 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.3
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityInputPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * edfaSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int edfaSeverityInputPower_check_value( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityInputPower_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityInputPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid edfaSeverityInputPower value.
     */

    return MFD_SUCCESS; /* edfaSeverityInputPower value not illegal */
} /* edfaSeverityInputPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * edfaSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int edfaSeverityInputPower_undo_setup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityInputPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup edfaSeverityInputPower undo.
     */
    /*
     * copy edfaSeverityInputPower data
     * set rowreq_ctx->undo->edfaSeverityInputPower from rowreq_ctx->data.edfaSeverityInputPower
     */
    rowreq_ctx->undo->edfaSeverityInputPower = rowreq_ctx->data.edfaSeverityInputPower;


    return MFD_SUCCESS;
} /* edfaSeverityInputPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param edfaSeverityInputPower_val
 *        A long containing the new value.
 */
int edfaSeverityInputPower_set( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityInputPower_val )
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityInputPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set edfaSeverityInputPower value.
     * set edfaSeverityInputPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.edfaSeverityInputPower = edfaSeverityInputPower_val;

    // Set severity on shared memory
    setEdfaSeverity("input_power", edfaSeverityInputPower_val);

    return MFD_SUCCESS;
} /* edfaSeverityInputPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int edfaSeverityInputPower_undo( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityInputPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up edfaSeverityInputPower undo.
     */
    /*
     * copy edfaSeverityInputPower data
     * set rowreq_ctx->data.edfaSeverityInputPower from rowreq_ctx->undo->edfaSeverityInputPower
     */
    rowreq_ctx->data.edfaSeverityInputPower = rowreq_ctx->undo->edfaSeverityInputPower;

    
    return MFD_SUCCESS;
} /* edfaSeverityInputPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityLop
 * edfaSeverityLop is subid 4 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.4
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityLop_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * edfaSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int edfaSeverityLop_check_value( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityLop_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLop_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid edfaSeverityLop value.
     */

    return MFD_SUCCESS; /* edfaSeverityLop value not illegal */
} /* edfaSeverityLop_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * edfaSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int edfaSeverityLop_undo_setup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLop_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup edfaSeverityLop undo.
     */
    /*
     * copy edfaSeverityLop data
     * set rowreq_ctx->undo->edfaSeverityLop from rowreq_ctx->data.edfaSeverityLop
     */
    rowreq_ctx->undo->edfaSeverityLop = rowreq_ctx->data.edfaSeverityLop;


    return MFD_SUCCESS;
} /* edfaSeverityLop_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param edfaSeverityLop_val
 *        A long containing the new value.
 */
int edfaSeverityLop_set( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityLop_val )
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLop_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set edfaSeverityLop value.
     * set edfaSeverityLop value in rowreq_ctx->data
     */
    rowreq_ctx->data.edfaSeverityLop = edfaSeverityLop_val;

    // Set severity on shared memory
    setEdfaSeverity("lop", edfaSeverityLop_val);

    return MFD_SUCCESS;
} /* edfaSeverityLop_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int edfaSeverityLop_undo( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLop_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up edfaSeverityLop undo.
     */
    /*
     * copy edfaSeverityLop data
     * set rowreq_ctx->data.edfaSeverityLop from rowreq_ctx->undo->edfaSeverityLop
     */
    rowreq_ctx->data.edfaSeverityLop = rowreq_ctx->undo->edfaSeverityLop;

    
    return MFD_SUCCESS;
} /* edfaSeverityLop_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityLos
 * edfaSeverityLos is subid 5 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.5
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityLos_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * edfaSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int edfaSeverityLos_check_value( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityLos_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLos_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid edfaSeverityLos value.
     */

    return MFD_SUCCESS; /* edfaSeverityLos value not illegal */
} /* edfaSeverityLos_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * edfaSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int edfaSeverityLos_undo_setup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLos_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup edfaSeverityLos undo.
     */
    /*
     * copy edfaSeverityLos data
     * set rowreq_ctx->undo->edfaSeverityLos from rowreq_ctx->data.edfaSeverityLos
     */
    rowreq_ctx->undo->edfaSeverityLos = rowreq_ctx->data.edfaSeverityLos;


    return MFD_SUCCESS;
} /* edfaSeverityLos_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param edfaSeverityLos_val
 *        A long containing the new value.
 */
int edfaSeverityLos_set( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityLos_val )
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLos_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set edfaSeverityLos value.
     * set edfaSeverityLos value in rowreq_ctx->data
     */
    rowreq_ctx->data.edfaSeverityLos = edfaSeverityLos_val;

    // Set severity on shared memory
    setEdfaSeverity("los", edfaSeverityLos_val);

    return MFD_SUCCESS;
} /* edfaSeverityLos_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int edfaSeverityLos_undo( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityLos_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up edfaSeverityLos undo.
     */
    /*
     * copy edfaSeverityLos data
     * set rowreq_ctx->data.edfaSeverityLos from rowreq_ctx->undo->edfaSeverityLos
     */
    rowreq_ctx->data.edfaSeverityLos = rowreq_ctx->undo->edfaSeverityLos;

    
    return MFD_SUCCESS;
} /* edfaSeverityLos_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityOutputPower
 * edfaSeverityOutputPower is subid 6 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.6
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityOutputPower_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * edfaSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int edfaSeverityOutputPower_check_value( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityOutputPower_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityOutputPower_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid edfaSeverityOutputPower value.
     */

    return MFD_SUCCESS; /* edfaSeverityOutputPower value not illegal */
} /* edfaSeverityOutputPower_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * edfaSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int edfaSeverityOutputPower_undo_setup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityOutputPower_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup edfaSeverityOutputPower undo.
     */
    /*
     * copy edfaSeverityOutputPower data
     * set rowreq_ctx->undo->edfaSeverityOutputPower from rowreq_ctx->data.edfaSeverityOutputPower
     */
    rowreq_ctx->undo->edfaSeverityOutputPower = rowreq_ctx->data.edfaSeverityOutputPower;


    return MFD_SUCCESS;
} /* edfaSeverityOutputPower_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param edfaSeverityOutputPower_val
 *        A long containing the new value.
 */
int edfaSeverityOutputPower_set( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityOutputPower_val )
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityOutputPower_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set edfaSeverityOutputPower value.
     * set edfaSeverityOutputPower value in rowreq_ctx->data
     */
    rowreq_ctx->data.edfaSeverityOutputPower = edfaSeverityOutputPower_val;

    // Set severity on shared memory
    setEdfaSeverity("output_power", edfaSeverityOutputPower_val);

    return MFD_SUCCESS;
} /* edfaSeverityOutputPower_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int edfaSeverityOutputPower_undo( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityOutputPower_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up edfaSeverityOutputPower undo.
     */
    /*
     * copy edfaSeverityOutputPower data
     * set rowreq_ctx->data.edfaSeverityOutputPower from rowreq_ctx->undo->edfaSeverityOutputPower
     */
    rowreq_ctx->data.edfaSeverityOutputPower = rowreq_ctx->undo->edfaSeverityOutputPower;

    
    return MFD_SUCCESS;
} /* edfaSeverityOutputPower_undo */

/*---------------------------------------------------------------------
 * FTNC-MIB::edfaSeverityEntry.edfaSeverityTemperature
 * edfaSeverityTemperature is subid 7 of edfaSeverityEntry.
 * Its status is Current, and its access level is ReadWrite.
 * OID: .1.3.6.1.4.1.43484.1.1.3.3.1.1.7
 * Description:
alarm severity
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   1
 *
 *
 * Its syntax is INTEGER32 (based on perltype INTEGER32)
 * The net-snmp type is ASN_INTEGER. The C type decl is long (long)
 */
/**
 * Check that the proposed new value is potentially valid.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param edfaSeverityTemperature_val
 *        A long containing the new value.
 *
 * @retval MFD_SUCCESS        : incoming value is legal
 * @retval MFD_NOT_VALID_NOW  : incoming value is not valid now
 * @retval MFD_NOT_VALID_EVER : incoming value is never valid
 *
 * This is the place to check for requirements that are not
 * expressed in the mib syntax (for example, a requirement that
 * is detailed in the description for an object).
 *
 * You should check that the requested change between the undo value and the
 * new value is legal (ie, the transistion from one value to another
 * is legal).
 *      
 *@note
 * This check is only to determine if the new value
 * is \b potentially valid. This is the first check of many, and
 * is one of the simplest ones.
 * 
 *@note
 * this is not the place to do any checks for values
 * which depend on some other value in the mib. Those
 * types of checks should be done in the
 * edfaSeverityTable_check_dependencies() function.
 *
 * The following checks have already been done for you:
 *    The syntax is ASN_INTEGER
 *
 * If there a no other checks you need to do, simply return MFD_SUCCESS.
 *
 */
int edfaSeverityTemperature_check_value( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityTemperature_val)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTemperature_check_value","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:441:o: |-> Check for valid edfaSeverityTemperature value.
     */

    return MFD_SUCCESS; /* edfaSeverityTemperature value not illegal */
} /* edfaSeverityTemperature_check_value */

/**
 * Save old value information
 *
 * @param rowreq_ctx
 *        Pointer to the table context (edfaSeverityTable_rowreq_ctx)
 *
 * @retval MFD_SUCCESS : success
 * @retval MFD_ERROR   : error. set will fail.
 *
 * This function will be called after the table level undo setup function
 * edfaSeverityTable_undo_setup has been called.
 *
 *@note
 * this function will only be called if a new value is set for this column.
 *
 * If there is any setup specific to a particular column (e.g. allocating
 * memory for a string), you should do that setup in this function, so it
 * won't be done unless it is necessary.
 */
int edfaSeverityTemperature_undo_setup( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTemperature_undo_setup","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:455:o: |-> Setup edfaSeverityTemperature undo.
     */
    /*
     * copy edfaSeverityTemperature data
     * set rowreq_ctx->undo->edfaSeverityTemperature from rowreq_ctx->data.edfaSeverityTemperature
     */
    rowreq_ctx->undo->edfaSeverityTemperature = rowreq_ctx->data.edfaSeverityTemperature;

    return MFD_SUCCESS;
} /* edfaSeverityTemperature_undo_setup */

/**
 * Set the new value.
 *
 * @param rowreq_ctx
 *        Pointer to the users context. You should know how to
 *        manipulate the value from this object.
 * @param edfaSeverityTemperature_val
 *        A long containing the new value.
 */
int edfaSeverityTemperature_set( edfaSeverityTable_rowreq_ctx *rowreq_ctx, long edfaSeverityTemperature_val )
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTemperature_set","called\n"));

    /** should never get a NULL pointer */
    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:461:M: |-> Set edfaSeverityTemperature value.
     * set edfaSeverityTemperature value in rowreq_ctx->data
     */
    rowreq_ctx->data.edfaSeverityTemperature = edfaSeverityTemperature_val;

    // Set severity on shared memory
    setEdfaSeverity("temperature", edfaSeverityTemperature_val);

    return MFD_SUCCESS;
} /* edfaSeverityTemperature_set */

/**
 * undo the previous set.
 *
 * @param rowreq_ctx
 *        Pointer to the users context.
 */
int edfaSeverityTemperature_undo( edfaSeverityTable_rowreq_ctx *rowreq_ctx)
{
    DEBUGMSGTL(("verbose:edfaSeverityTable:edfaSeverityTemperature_undo","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

    /*
     * TODO:456:o: |-> Clean up edfaSeverityTemperature undo.
     */
    /*
     * copy edfaSeverityTemperature data
     * set rowreq_ctx->data.edfaSeverityTemperature from rowreq_ctx->undo->edfaSeverityTemperature
     */
    rowreq_ctx->data.edfaSeverityTemperature = rowreq_ctx->undo->edfaSeverityTemperature;

    
    return MFD_SUCCESS;
} /* edfaSeverityTemperature_undo */

void setEdfaSeverity(char *alarm, long severity_value)
{
	DEBUGMSGTL(("verbose:edfaSeverityTable:setEdfaSeverity","called\n"));

	shm_handler_create(pt_monitor_struct);

	if(strcmp(alarm, "amp_status") == 0)
	{
		pt_monitor_struct->edfa_struct.severity.amp_status = severity_value;
	}
	else if(strcmp(alarm, "input_power") == 0)
	{
		pt_monitor_struct->edfa_struct.severity.input_power = severity_value;
	}
	else if(strcmp(alarm, "lop") == 0)
	{
		pt_monitor_struct->edfa_struct.severity.lop = severity_value;
	}
	else if(strcmp(alarm, "los") == 0)
	{
		pt_monitor_struct->edfa_struct.severity.los = severity_value;
	}
	else if(strcmp(alarm, "output_power") == 0)
	{
		pt_monitor_struct->edfa_struct.severity.output_power = severity_value;
	}
	else if(strcmp(alarm, "temperature") == 0)
	{
		pt_monitor_struct->edfa_struct.severity.temperature = severity_value;
	}

	// Set dirty flag
	pt_monitor_struct->sev_dirty_flag = 1;
}
/** @} */
