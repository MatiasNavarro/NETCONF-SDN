/*
 * Note: this file originally auto-generated by mib2c using
 *       version $ of $ 
 *
 * $Id:$
 */
/* standard Net-SNMP includes */
#include <net-snmp/net-snmp-config.h>
#include <net-snmp/net-snmp-features.h>
#include <net-snmp/net-snmp-includes.h>
#include <net-snmp/agent/net-snmp-agent-includes.h>

/* include our parent header */
#include "../../xfp3Table.h"


/** @defgroup data_get data_get: Routines to get data
 *
 * TODO:230:M: Implement xfp3Table get routines.
 * TODO:240:M: Implement xfp3Table mapping routines (if any).
 *
 * These routine are used to get the value for individual objects. The
 * row context is passed, along with a pointer to the memory where the
 * value should be copied.
 *
 * @{
 */
/**********************************************************************
 **********************************************************************
 ***
 *** Table xfp3Table
 ***
 **********************************************************************
 **********************************************************************/
/*
 * FTNC-MIB::xfp3Table is subid 5 of mxpMIBObjects.
 * Its status is Current.
 * OID: .1.3.6.1.4.1.43484.2.5, length: 9
*/

/* ---------------------------------------------------------------------
 * TODO:200:r: Implement xfp3Table data context functions.
 */


/**
 * set mib index(es)
 *
 * @param tbl_idx mib index structure
 * @param xfp3Index_ptr
 * @param xfp3Index_ptr_len
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This convenience function is useful for setting all the MIB index
 *  components with a single function call. It is assume that the C values
 *  have already been mapped from their native/rawformat to the MIB format.
 */
int
xfp3Table_indexes_set_tbl_idx(xfp3Table_mib_index *tbl_idx, char *xfp3Index_val_ptr,  size_t xfp3Index_val_ptr_len)
{
    DEBUGMSGTL(("verbose:xfp3Table:xfp3Table_indexes_set_tbl_idx","called\n"));

    /* xfp3Index(1)/OCTETSTR/ASN_OCTET_STR/char(char)//L/a/w/e/R/d/h */
    tbl_idx->xfp3Index_len = sizeof(tbl_idx->xfp3Index)/sizeof(tbl_idx->xfp3Index[0]); /* max length */
    /*
     * make sure there is enough space for xfp3Index data
     */
    if ((NULL == tbl_idx->xfp3Index) ||
        (tbl_idx->xfp3Index_len <
         (xfp3Index_val_ptr_len))) {
        snmp_log(LOG_ERR,"not enough space for value (xfp3Index_val_ptr)\n");
        return MFD_ERROR;
    }
    tbl_idx->xfp3Index_len = xfp3Index_val_ptr_len;
    memcpy( tbl_idx->xfp3Index, xfp3Index_val_ptr, xfp3Index_val_ptr_len* sizeof(xfp3Index_val_ptr[0]) );
    

    return MFD_SUCCESS;
} /* xfp3Table_indexes_set_tbl_idx */

/**
 * @internal
 * set row context indexes
 *
 * @param reqreq_ctx the row context that needs updated indexes
 *
 * @retval MFD_SUCCESS     : success.
 * @retval MFD_ERROR       : other error.
 *
 * @remark
 *  This function sets the mib indexs, then updates the oid indexs
 *  from the mib index.
 */
int
xfp3Table_indexes_set(xfp3Table_rowreq_ctx *rowreq_ctx, char *xfp3Index_val_ptr,  size_t xfp3Index_val_ptr_len)
{
    DEBUGMSGTL(("verbose:xfp3Table:xfp3Table_indexes_set","called\n"));

    if(MFD_SUCCESS != xfp3Table_indexes_set_tbl_idx(&rowreq_ctx->tbl_idx
                                   , xfp3Index_val_ptr, xfp3Index_val_ptr_len
           ))
        return MFD_ERROR;

    /*
     * convert mib index to oid index
     */
    rowreq_ctx->oid_idx.len = sizeof(rowreq_ctx->oid_tmp) / sizeof(oid);
    if(0 != xfp3Table_index_to_oid(&rowreq_ctx->oid_idx,
                                    &rowreq_ctx->tbl_idx)) {
        return MFD_ERROR;
    }

    return MFD_SUCCESS;
} /* xfp3Table_indexes_set */


/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3Pres
 * xfp3Pres is subid 2 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.2
 * Description:
XFP3 Presence
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3Pres data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3Pres_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3Pres_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3Pres.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3Pres_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3Pres_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3Pres_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3Pres_val_ptr_ptr, size_t *xfp3Pres_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3Pres_val_ptr_ptr) && (NULL != *xfp3Pres_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3Pres_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3Pres_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3Pres data.
 * copy (* xfp3Pres_val_ptr_ptr ) data and (* xfp3Pres_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3Pres data
     */
    if ((NULL == (* xfp3Pres_val_ptr_ptr )) ||
        ((* xfp3Pres_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3Pres_len* sizeof(rowreq_ctx->data.xfp3Pres[0])))) {
        /*
         * allocate space for xfp3Pres data
         */
        (* xfp3Pres_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3Pres_len* sizeof(rowreq_ctx->data.xfp3Pres[0]));
        if(NULL == (* xfp3Pres_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3Pres)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3Pres_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3Pres_len* sizeof(rowreq_ctx->data.xfp3Pres[0]);
    memcpy( (* xfp3Pres_val_ptr_ptr ), rowreq_ctx->data.xfp3Pres, rowreq_ctx->data.xfp3Pres_len* sizeof(rowreq_ctx->data.xfp3Pres[0]) );

    return MFD_SUCCESS;
} /* xfp3Pres_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3Loss
 * xfp3Loss is subid 3 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.3
 * Description:
XFP3 Loss of Signal Indicator
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3Loss data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3Loss_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3Loss_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3Loss.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3Loss_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3Loss_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3Loss_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3Loss_val_ptr_ptr, size_t *xfp3Loss_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3Loss_val_ptr_ptr) && (NULL != *xfp3Loss_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3Loss_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3Loss_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3Loss data.
 * copy (* xfp3Loss_val_ptr_ptr ) data and (* xfp3Loss_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3Loss data
     */
    if ((NULL == (* xfp3Loss_val_ptr_ptr )) ||
        ((* xfp3Loss_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3Loss_len* sizeof(rowreq_ctx->data.xfp3Loss[0])))) {
        /*
         * allocate space for xfp3Loss data
         */
        (* xfp3Loss_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3Loss_len* sizeof(rowreq_ctx->data.xfp3Loss[0]));
        if(NULL == (* xfp3Loss_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3Loss)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3Loss_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3Loss_len* sizeof(rowreq_ctx->data.xfp3Loss[0]);
    memcpy( (* xfp3Loss_val_ptr_ptr ), rowreq_ctx->data.xfp3Loss, rowreq_ctx->data.xfp3Loss_len* sizeof(rowreq_ctx->data.xfp3Loss[0]) );

    return MFD_SUCCESS;
} /* xfp3Loss_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3Rdy
 * xfp3Rdy is subid 4 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.4
 * Description:
XFP3 Ready
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3Rdy data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3Rdy_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3Rdy_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3Rdy.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3Rdy_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3Rdy_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3Rdy_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3Rdy_val_ptr_ptr, size_t *xfp3Rdy_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3Rdy_val_ptr_ptr) && (NULL != *xfp3Rdy_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3Rdy_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3Rdy_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3Rdy data.
 * copy (* xfp3Rdy_val_ptr_ptr ) data and (* xfp3Rdy_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3Rdy data
     */
    if ((NULL == (* xfp3Rdy_val_ptr_ptr )) ||
        ((* xfp3Rdy_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3Rdy_len* sizeof(rowreq_ctx->data.xfp3Rdy[0])))) {
        /*
         * allocate space for xfp3Rdy data
         */
        (* xfp3Rdy_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3Rdy_len* sizeof(rowreq_ctx->data.xfp3Rdy[0]));
        if(NULL == (* xfp3Rdy_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3Rdy)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3Rdy_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3Rdy_len* sizeof(rowreq_ctx->data.xfp3Rdy[0]);
    memcpy( (* xfp3Rdy_val_ptr_ptr ), rowreq_ctx->data.xfp3Rdy, rowreq_ctx->data.xfp3Rdy_len* sizeof(rowreq_ctx->data.xfp3Rdy[0]) );

    return MFD_SUCCESS;
} /* xfp3Rdy_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3Int
 * xfp3Int is subid 5 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.5
 * Description:
XFP3 Interruption signal
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3Int data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3Int_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3Int_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3Int.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3Int_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3Int_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3Int_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3Int_val_ptr_ptr, size_t *xfp3Int_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3Int_val_ptr_ptr) && (NULL != *xfp3Int_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3Int_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3Int_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3Int data.
 * copy (* xfp3Int_val_ptr_ptr ) data and (* xfp3Int_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3Int data
     */
    if ((NULL == (* xfp3Int_val_ptr_ptr )) ||
        ((* xfp3Int_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3Int_len* sizeof(rowreq_ctx->data.xfp3Int[0])))) {
        /*
         * allocate space for xfp3Int data
         */
        (* xfp3Int_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3Int_len* sizeof(rowreq_ctx->data.xfp3Int[0]));
        if(NULL == (* xfp3Int_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3Int)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3Int_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3Int_len* sizeof(rowreq_ctx->data.xfp3Int[0]);
    memcpy( (* xfp3Int_val_ptr_ptr ), rowreq_ctx->data.xfp3Int, rowreq_ctx->data.xfp3Int_len* sizeof(rowreq_ctx->data.xfp3Int[0]) );

    return MFD_SUCCESS;
} /* xfp3Int_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3TxPow
 * xfp3TxPow is subid 6 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.6
 * Description:
XFP3 TX Power
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3TxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3TxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3TxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3TxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3TxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3TxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3TxPow_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3TxPow_val_ptr_ptr, size_t *xfp3TxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3TxPow_val_ptr_ptr) && (NULL != *xfp3TxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3TxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3TxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3TxPow data.
 * copy (* xfp3TxPow_val_ptr_ptr ) data and (* xfp3TxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3TxPow data
     */
    if ((NULL == (* xfp3TxPow_val_ptr_ptr )) ||
        ((* xfp3TxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3TxPow_len* sizeof(rowreq_ctx->data.xfp3TxPow[0])))) {
        /*
         * allocate space for xfp3TxPow data
         */
        (* xfp3TxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3TxPow_len* sizeof(rowreq_ctx->data.xfp3TxPow[0]));
        if(NULL == (* xfp3TxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3TxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3TxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3TxPow_len* sizeof(rowreq_ctx->data.xfp3TxPow[0]);
    memcpy( (* xfp3TxPow_val_ptr_ptr ), rowreq_ctx->data.xfp3TxPow, rowreq_ctx->data.xfp3TxPow_len* sizeof(rowreq_ctx->data.xfp3TxPow[0]) );

    return MFD_SUCCESS;
} /* xfp3TxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3RxPow
 * xfp3RxPow is subid 7 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.7
 * Description:
XFP3 RX Power
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3RxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3RxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3RxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3RxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3RxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3RxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3RxPow_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3RxPow_val_ptr_ptr, size_t *xfp3RxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3RxPow_val_ptr_ptr) && (NULL != *xfp3RxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3RxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3RxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3RxPow data.
 * copy (* xfp3RxPow_val_ptr_ptr ) data and (* xfp3RxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3RxPow data
     */
    if ((NULL == (* xfp3RxPow_val_ptr_ptr )) ||
        ((* xfp3RxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3RxPow_len* sizeof(rowreq_ctx->data.xfp3RxPow[0])))) {
        /*
         * allocate space for xfp3RxPow data
         */
        (* xfp3RxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3RxPow_len* sizeof(rowreq_ctx->data.xfp3RxPow[0]));
        if(NULL == (* xfp3RxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3RxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3RxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3RxPow_len* sizeof(rowreq_ctx->data.xfp3RxPow[0]);
    memcpy( (* xfp3RxPow_val_ptr_ptr ), rowreq_ctx->data.xfp3RxPow, rowreq_ctx->data.xfp3RxPow_len* sizeof(rowreq_ctx->data.xfp3RxPow[0]) );

    return MFD_SUCCESS;
} /* xfp3RxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3Temp
 * xfp3Temp is subid 8 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.8
 * Description:
XFP3 Temperature
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3Temp data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3Temp_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3Temp_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3Temp.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3Temp_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3Temp_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3Temp_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3Temp_val_ptr_ptr, size_t *xfp3Temp_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3Temp_val_ptr_ptr) && (NULL != *xfp3Temp_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3Temp_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3Temp_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3Temp data.
 * copy (* xfp3Temp_val_ptr_ptr ) data and (* xfp3Temp_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3Temp data
     */
    if ((NULL == (* xfp3Temp_val_ptr_ptr )) ||
        ((* xfp3Temp_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3Temp_len* sizeof(rowreq_ctx->data.xfp3Temp[0])))) {
        /*
         * allocate space for xfp3Temp data
         */
        (* xfp3Temp_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3Temp_len* sizeof(rowreq_ctx->data.xfp3Temp[0]));
        if(NULL == (* xfp3Temp_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3Temp)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3Temp_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3Temp_len* sizeof(rowreq_ctx->data.xfp3Temp[0]);
    memcpy( (* xfp3Temp_val_ptr_ptr ), rowreq_ctx->data.xfp3Temp, rowreq_ctx->data.xfp3Temp_len* sizeof(rowreq_ctx->data.xfp3Temp[0]) );

    return MFD_SUCCESS;
} /* xfp3Temp_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3LowTxPow
 * xfp3LowTxPow is subid 9 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.9
 * Description:
XFP3 Low TX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3LowTxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3LowTxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3LowTxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3LowTxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3LowTxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3LowTxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3LowTxPow_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3LowTxPow_val_ptr_ptr, size_t *xfp3LowTxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3LowTxPow_val_ptr_ptr) && (NULL != *xfp3LowTxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3LowTxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3LowTxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3LowTxPow data.
 * copy (* xfp3LowTxPow_val_ptr_ptr ) data and (* xfp3LowTxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3LowTxPow data
     */
    if ((NULL == (* xfp3LowTxPow_val_ptr_ptr )) ||
        ((* xfp3LowTxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3LowTxPow_len* sizeof(rowreq_ctx->data.xfp3LowTxPow[0])))) {
        /*
         * allocate space for xfp3LowTxPow data
         */
        (* xfp3LowTxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3LowTxPow_len* sizeof(rowreq_ctx->data.xfp3LowTxPow[0]));
        if(NULL == (* xfp3LowTxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3LowTxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3LowTxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3LowTxPow_len* sizeof(rowreq_ctx->data.xfp3LowTxPow[0]);
    memcpy( (* xfp3LowTxPow_val_ptr_ptr ), rowreq_ctx->data.xfp3LowTxPow, rowreq_ctx->data.xfp3LowTxPow_len* sizeof(rowreq_ctx->data.xfp3LowTxPow[0]) );

    return MFD_SUCCESS;
} /* xfp3LowTxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3HighTxPow
 * xfp3HighTxPow is subid 10 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.10
 * Description:
XFP3 High TX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3HighTxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3HighTxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3HighTxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3HighTxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3HighTxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3HighTxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3HighTxPow_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3HighTxPow_val_ptr_ptr, size_t *xfp3HighTxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3HighTxPow_val_ptr_ptr) && (NULL != *xfp3HighTxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3HighTxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3HighTxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3HighTxPow data.
 * copy (* xfp3HighTxPow_val_ptr_ptr ) data and (* xfp3HighTxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3HighTxPow data
     */
    if ((NULL == (* xfp3HighTxPow_val_ptr_ptr )) ||
        ((* xfp3HighTxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3HighTxPow_len* sizeof(rowreq_ctx->data.xfp3HighTxPow[0])))) {
        /*
         * allocate space for xfp3HighTxPow data
         */
        (* xfp3HighTxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3HighTxPow_len* sizeof(rowreq_ctx->data.xfp3HighTxPow[0]));
        if(NULL == (* xfp3HighTxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3HighTxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3HighTxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3HighTxPow_len* sizeof(rowreq_ctx->data.xfp3HighTxPow[0]);
    memcpy( (* xfp3HighTxPow_val_ptr_ptr ), rowreq_ctx->data.xfp3HighTxPow, rowreq_ctx->data.xfp3HighTxPow_len* sizeof(rowreq_ctx->data.xfp3HighTxPow[0]) );

    return MFD_SUCCESS;
} /* xfp3HighTxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3LowRxPow
 * xfp3LowRxPow is subid 11 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.11
 * Description:
XFP3 High RX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3LowRxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3LowRxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3LowRxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3LowRxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3LowRxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3LowRxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3LowRxPow_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3LowRxPow_val_ptr_ptr, size_t *xfp3LowRxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3LowRxPow_val_ptr_ptr) && (NULL != *xfp3LowRxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3LowRxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3LowRxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3LowRxPow data.
 * copy (* xfp3LowRxPow_val_ptr_ptr ) data and (* xfp3LowRxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3LowRxPow data
     */
    if ((NULL == (* xfp3LowRxPow_val_ptr_ptr )) ||
        ((* xfp3LowRxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3LowRxPow_len* sizeof(rowreq_ctx->data.xfp3LowRxPow[0])))) {
        /*
         * allocate space for xfp3LowRxPow data
         */
        (* xfp3LowRxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3LowRxPow_len* sizeof(rowreq_ctx->data.xfp3LowRxPow[0]));
        if(NULL == (* xfp3LowRxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3LowRxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3LowRxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3LowRxPow_len* sizeof(rowreq_ctx->data.xfp3LowRxPow[0]);
    memcpy( (* xfp3LowRxPow_val_ptr_ptr ), rowreq_ctx->data.xfp3LowRxPow, rowreq_ctx->data.xfp3LowRxPow_len* sizeof(rowreq_ctx->data.xfp3LowRxPow[0]) );

    return MFD_SUCCESS;
} /* xfp3LowRxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3HighRxPow
 * xfp3HighRxPow is subid 12 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.12
 * Description:
XFP3 High RX Power Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3HighRxPow data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3HighRxPow_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3HighRxPow_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3HighRxPow.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3HighRxPow_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3HighRxPow_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3HighRxPow_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3HighRxPow_val_ptr_ptr, size_t *xfp3HighRxPow_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3HighRxPow_val_ptr_ptr) && (NULL != *xfp3HighRxPow_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3HighRxPow_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3HighRxPow_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3HighRxPow data.
 * copy (* xfp3HighRxPow_val_ptr_ptr ) data and (* xfp3HighRxPow_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3HighRxPow data
     */
    if ((NULL == (* xfp3HighRxPow_val_ptr_ptr )) ||
        ((* xfp3HighRxPow_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3HighRxPow_len* sizeof(rowreq_ctx->data.xfp3HighRxPow[0])))) {
        /*
         * allocate space for xfp3HighRxPow data
         */
        (* xfp3HighRxPow_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3HighRxPow_len* sizeof(rowreq_ctx->data.xfp3HighRxPow[0]));
        if(NULL == (* xfp3HighRxPow_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3HighRxPow)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3HighRxPow_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3HighRxPow_len* sizeof(rowreq_ctx->data.xfp3HighRxPow[0]);
    memcpy( (* xfp3HighRxPow_val_ptr_ptr ), rowreq_ctx->data.xfp3HighRxPow, rowreq_ctx->data.xfp3HighRxPow_len* sizeof(rowreq_ctx->data.xfp3HighRxPow[0]) );

    return MFD_SUCCESS;
} /* xfp3HighRxPow_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3RxCdrLol
 * xfp3RxCdrLol is subid 13 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.13
 * Description:
XFP3 RX Loss of Lock Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3RxCdrLol data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3RxCdrLol_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3RxCdrLol_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3RxCdrLol.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3RxCdrLol_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3RxCdrLol_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3RxCdrLol_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3RxCdrLol_val_ptr_ptr, size_t *xfp3RxCdrLol_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3RxCdrLol_val_ptr_ptr) && (NULL != *xfp3RxCdrLol_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3RxCdrLol_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3RxCdrLol_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3RxCdrLol data.
 * copy (* xfp3RxCdrLol_val_ptr_ptr ) data and (* xfp3RxCdrLol_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3RxCdrLol data
     */
    if ((NULL == (* xfp3RxCdrLol_val_ptr_ptr )) ||
        ((* xfp3RxCdrLol_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3RxCdrLol_len* sizeof(rowreq_ctx->data.xfp3RxCdrLol[0])))) {
        /*
         * allocate space for xfp3RxCdrLol data
         */
        (* xfp3RxCdrLol_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3RxCdrLol_len* sizeof(rowreq_ctx->data.xfp3RxCdrLol[0]));
        if(NULL == (* xfp3RxCdrLol_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3RxCdrLol)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3RxCdrLol_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3RxCdrLol_len* sizeof(rowreq_ctx->data.xfp3RxCdrLol[0]);
    memcpy( (* xfp3RxCdrLol_val_ptr_ptr ), rowreq_ctx->data.xfp3RxCdrLol, rowreq_ctx->data.xfp3RxCdrLol_len* sizeof(rowreq_ctx->data.xfp3RxCdrLol[0]) );

    return MFD_SUCCESS;
} /* xfp3RxCdrLol_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3TxCdrLol
 * xfp3TxCdrLol is subid 14 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.14
 * Description:
XFP3 TX Loss of Lock Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3TxCdrLol data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3TxCdrLol_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3TxCdrLol_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3TxCdrLol.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3TxCdrLol_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3TxCdrLol_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3TxCdrLol_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3TxCdrLol_val_ptr_ptr, size_t *xfp3TxCdrLol_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3TxCdrLol_val_ptr_ptr) && (NULL != *xfp3TxCdrLol_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3TxCdrLol_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3TxCdrLol_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3TxCdrLol data.
 * copy (* xfp3TxCdrLol_val_ptr_ptr ) data and (* xfp3TxCdrLol_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3TxCdrLol data
     */
    if ((NULL == (* xfp3TxCdrLol_val_ptr_ptr )) ||
        ((* xfp3TxCdrLol_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3TxCdrLol_len* sizeof(rowreq_ctx->data.xfp3TxCdrLol[0])))) {
        /*
         * allocate space for xfp3TxCdrLol data
         */
        (* xfp3TxCdrLol_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3TxCdrLol_len* sizeof(rowreq_ctx->data.xfp3TxCdrLol[0]));
        if(NULL == (* xfp3TxCdrLol_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3TxCdrLol)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3TxCdrLol_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3TxCdrLol_len* sizeof(rowreq_ctx->data.xfp3TxCdrLol[0]);
    memcpy( (* xfp3TxCdrLol_val_ptr_ptr ), rowreq_ctx->data.xfp3TxCdrLol, rowreq_ctx->data.xfp3TxCdrLol_len* sizeof(rowreq_ctx->data.xfp3TxCdrLol[0]) );

    return MFD_SUCCESS;
} /* xfp3TxCdrLol_get */

/*---------------------------------------------------------------------
 * FTNC-MIB::xfp3Entry.xfp3LasFault
 * xfp3LasFault is subid 15 of xfp3Entry.
 * Its status is Current, and its access level is ReadOnly.
 * OID: .1.3.6.1.4.1.43484.2.5.1.15
 * Description:
XFP3 Laser Fault Alarm
 *
 * Attributes:
 *   accessible 1     isscalar 0     enums  0      hasdefval 0
 *   readable   1     iscolumn 1     ranges 0      hashint   0
 *   settable   0
 *
 *
 * Its syntax is OCTETSTR (based on perltype OCTETSTR)
 * The net-snmp type is ASN_OCTET_STR. The C type decl is char (char)
 * This data type requires a length.
 */
/**
 * Extract the current value of the xfp3LasFault data.
 *
 * Set a value using the data context for the row.
 *
 * @param rowreq_ctx
 *        Pointer to the row request context.
 * @param xfp3LasFault_val_ptr_ptr
 *        Pointer to storage for a char variable
 * @param xfp3LasFault_val_ptr_len_ptr
 *        Pointer to a size_t. On entry, it will contain the size (in bytes)
 *        pointed to by xfp3LasFault.
 *        On exit, this value should contain the data size (in bytes).
 *
 * @retval MFD_SUCCESS         : success
 * @retval MFD_SKIP            : skip this node (no value for now)
 * @retval MFD_ERROR           : Any other error
*
 * @note If you need more than (*xfp3LasFault_val_ptr_len_ptr) bytes of memory,
 *       allocate it using malloc() and update xfp3LasFault_val_ptr_ptr.
 *       <b>DO NOT</b> free the previous pointer.
 *       The MFD helper will release the memory you allocate.
 *
 * @remark If you call this function yourself, you are responsible
 *         for checking if the pointer changed, and freeing any
 *         previously allocated memory. (Not necessary if you pass
 *         in a pointer to static memory, obviously.)
 */
int
xfp3LasFault_get( xfp3Table_rowreq_ctx *rowreq_ctx, char **xfp3LasFault_val_ptr_ptr, size_t *xfp3LasFault_val_ptr_len_ptr )
{
   /** we should have a non-NULL pointer and enough storage */
   netsnmp_assert( (NULL != xfp3LasFault_val_ptr_ptr) && (NULL != *xfp3LasFault_val_ptr_ptr));
   netsnmp_assert( NULL != xfp3LasFault_val_ptr_len_ptr );


    DEBUGMSGTL(("verbose:xfp3Table:xfp3LasFault_get","called\n"));

    netsnmp_assert(NULL != rowreq_ctx);

/*
 * TODO:231:o: |-> Extract the current value of the xfp3LasFault data.
 * copy (* xfp3LasFault_val_ptr_ptr ) data and (* xfp3LasFault_val_ptr_len_ptr ) from rowreq_ctx->data
 */
    /*
     * make sure there is enough space for xfp3LasFault data
     */
    if ((NULL == (* xfp3LasFault_val_ptr_ptr )) ||
        ((* xfp3LasFault_val_ptr_len_ptr ) <
         (rowreq_ctx->data.xfp3LasFault_len* sizeof(rowreq_ctx->data.xfp3LasFault[0])))) {
        /*
         * allocate space for xfp3LasFault data
         */
        (* xfp3LasFault_val_ptr_ptr ) = malloc(rowreq_ctx->data.xfp3LasFault_len* sizeof(rowreq_ctx->data.xfp3LasFault[0]));
        if(NULL == (* xfp3LasFault_val_ptr_ptr )) {
            snmp_log(LOG_ERR,"could not allocate memory (rowreq_ctx->data.xfp3LasFault)\n");
            return MFD_ERROR;
        }
    }
    (* xfp3LasFault_val_ptr_len_ptr ) = rowreq_ctx->data.xfp3LasFault_len* sizeof(rowreq_ctx->data.xfp3LasFault[0]);
    memcpy( (* xfp3LasFault_val_ptr_ptr ), rowreq_ctx->data.xfp3LasFault, rowreq_ctx->data.xfp3LasFault_len* sizeof(rowreq_ctx->data.xfp3LasFault[0]) );

    return MFD_SUCCESS;
} /* xfp3LasFault_get */



/** @} */
